<?xml version="1.0"?>
<doc>
<assembly>
<name>
WhitTools
</name>
</assembly>
<members>
<member name="T:WhitTools.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:WhitTools.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:WhitTools.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="M:WhitTools.ActiveDirectory.GetWebPermissionsUserGroups(System.String)">
 <summary>
 Returns all user groups the user has permissions to edit.
 </summary>
 <param name="sUsername">The username to retrieve groups for.</param>
 <returns>A DataTable containing the user groups the username is associated with.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ActiveDirectory.InsertWebPermissionsUser(System.String)">
 <summary>
 Inserts a username into the Web3.Communications.dbo.WebPermissionsUsers DataTable. If the username 
 already exists then the current id is returned.
 </summary>
 <param name="sUsername">The username to insert into the table.</param>
 <returns>The ID Number connected to the username. Returns N_ERROR (-255) if the insert fails.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ActiveDirectory.InsertWebPermissionsUserGroup(System.String,System.String)">
 <summary>
 Assigns a user group to a user in Web3.Communications.dbo.WebPermissionsUserGroups. If the username 
 does not exist in the DataTable yet, it is added.
 </summary>
 <param name="sUsername">The username to assign to the user group.</param>
 <param name="sUserGroup">The user group to assign to the username.</param>
 <returns>The ID Number connected to the user group. Returns N_ERROR (-255) if the insert fails.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ActiveDirectory.DeleteWebPermissionsUserGroup(System.String,System.String)">
 <summary>
 Removes a user group from a user in Web3.Communications.dbo.WebPermissionsUserGroups.
 </summary>
 <param name="sUsername">The username to remove from the user group.</param>
 <param name="sUserGroup">The user group to remove from the username.</param>
 <returns>Was the user successfully removed from the group?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ActiveDirectory.GetGroupMembers(System.String,System.String)">
 <summary>
 Retrieves all of the members of a web permissions user group from active directory.
 The sql sort columns available are: Username, MemberName, FirstName, LastName.
 </summary>
 <param name="sGroupName">The user group to get members for.</param>
 <param name="sSort">The sql query value to sort the results on. Options are 'Username', 'MemberName', 'FirstName', 'LastName', or any combination separated by commas.</param>
 <returns>The members assigned to the web permissions user group.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ActiveDirectory.IsGroupMember(System.String,System.String,System.Boolean)">
 <summary>
 Checks if a user is part of an active directory group. If no username is provided, the currently logged-in user will be used.
 </summary>
 <param name="sUsername">The username to check for permissions.</param>
 <param name="sGroupName">The user group to check for permissions.</param>
 <returns>Does the user have permissions for the group.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ActiveDirectory.GetGroupAdmins(System.String)">
 <summary>
 Gets a list of Web Permissions User Group admin PLIDs.
 </summary>
 <param name="sGroupName">The user group to get the admins for.</param>
 <returns>A DataTable filled with the PLID numbers of user group admins.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ActiveDirectory.GetGroupAdminEmailList(System.String,System.String)">
 <summary>
 Creates an email list of all admins for a web permissions user group.
 </summary>
 <param name="sGroupName">The user group to get admin email addresses for.</param>
 <param name="sAdditionalEmailAddresses">A list of additional email addresses to guarantee are on the list.</param>
 <returns>A list of web permissions user group admin email addresses.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ActiveDirectory.GetActiveDirectoryGroups(System.String,System.Boolean)">
 <summary>
 Creates a DataTable with active directory groups.
 </summary>
 <param name="sFilter">A string that the group name must contain in order to be valid.</param>
 <param name="bStrict">If a filter is used, should the filter be case sensitive?</param>
 <returns>A DataTable with active directory groups.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ActiveDirectory.GetActiveDirectoryGroupsQuery(System.String,System.String)">
 <summary>
 Creates an sql query string with active directory groups to match a column name.
 </summary>
 <param name="sColumnToMatch">The DataTable column to match against the group name.</param>
 <param name="sFilter">A string that the group name must contain in order to be valid.</param>
 <returns>An sql query with active directory groups to match a column value.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ActiveDirectory.GetActiveDirectoryGroupsList(System.String,System.String)">
 <summary>
 Creates a list of active directory groups.
 </summary>
 <param name="sDelimeter">The delimiter to place between group names.</param>
 <param name="sFilter">A string that the group name must contain in order to be valid.</param>
 <returns>A list of active directory groups.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ActiveDirectory.ActiveDirectoryGroupExists(System.String)">
 <summary>
 Checks if an active directory group exists.
 </summary>
 <param name="sGroupName">The active directory group to check for.</param>
 <returns>Does the group exist in the active directory?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ActiveDirectory.AddMemberToGroup(System.String,System.String)">
 <summary>
 Adds an active directory member to the provided active directory group.
 </summary>
 <param name="sUsername">The formatted username to add to the group.</param>
 <param name="sGroupName">The active directory group to add the member to.</param>
 <returns>Was the member successfully added to the group?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ActiveDirectory.RemoveMemberFromGroup(System.String,System.String)">
 <summary>
 Removes an active directory member from the provided active directory group.
 </summary>
 <param name="username">The formatted username to remove from the group.</param>
 <param name="groupName">The active directory group to remove the member from.</param>
 <returns>Was the member successfully removed from the group?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ActiveDirectory.DeleteMemberFromGroup(System.String,System.String)">
 <summary>
 Removes an active directory member from the provided active directory group.
 </summary>
 <param name="sUsername">The formatted username to remove from the group.</param>
 <param name="sGroupName">The active directory group to remove the member from.</param>
 <returns>Was the member successfully removed from the group?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ActiveDirectory.CreateActiveDirectoryGroup(System.String)">
 <summary>
 Creates a new active directory group.
 </summary>
 <param name="sNewGroupName">The name of the new group.</param>
 <returns>Was the new active directory group successfully created?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ActiveDirectory.ChangeActiveDirectoryGroupName(System.String,System.String)">
 <summary>
 Updates an active directory group name.
 </summary>
 <param name="sOldGroupName">The active directory group name to change.</param>
 <param name="sNewGroupName">The name to change the active directory to.</param>
 <returns>Was the name successfully changed?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ActiveDirectory.GetGroupGUID(System.String)">
 <summary>
 Gets the active directory group GUID.
 </summary>
 <param name="sGroupName">The active directory group GUID.</param>
 <returns>The active directory group GUID. Returns S_NOT_FOUND if the group does not exist.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ActiveDirectory.DeleteActiveDirectoryGroup(System.String)">
 <summary>
 Delete an active directory group.
 </summary>
 <param name="sGroupName">The active directory group to delete.</param>
 <returns>Was the active directory group deleted?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ActiveDirectory.GetLDAPProperties(System.String)">
 <summary>
 Searches LDAP according to the provided search filter.
 </summary>
 <param name="sSearchFilter">The LDAP filter value. Expressions can use relational operators. An example is "(CN=Username)" or "(CN=GroupName)" or "(objectClass=user)" or "(lastName>=Davis)".</param>
 <returns>A DataTable containing the search results in the form of key/value pairs. Table columns are: Key, Value, Type</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ActiveDirectory.AddMemberToNoPolicy(System.String)">
 <summary>
 Adds an active directory member to the NoPolicy active directory group.
 </summary>
 <param name="sUsername">The formatted username to add to the NoPolicy group.</param>
 <returns>Was the member successfully added to the NoPolicy group?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ActiveDirectory.RemoveMemberFromNoPolicy(System.String)">
 <summary>
 Removes an active directory member from the NoPolicy group.
 </summary>
 <param name="sUsername">The formatted username to remove from the NoPolicy group.</param>
 <returns>Was the member successfully removed from the NoPolicy group?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Address.GetCorrectionHighlights(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
 <summary>
 
 </summary>
 <param name="sAddressLine1"></param>
 <param name="sAddressLine2"></param>
 <param name="sAddressLine3"></param>
 <param name="sCity"></param>
 <param name="sState"></param>
 <param name="sZIP"></param>
 <param name="sAddressLine1Corrected"></param>
 <param name="sAddressLine2Corrected"></param>
 <param name="sAddressLine3Corrected"></param>
 <param name="sCityCorrected"></param>
 <param name="sStateCorrected"></param>
 <param name="sZIPCorrected"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Address.CompareStrings(System.String,System.String)">
 <summary>
 
 </summary>
 <param name="sFirst"></param>
 <param name="sSecond"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Address.CleanAddressEnabled">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Address.CheckCleanAddress">
 <summary>
 
 </summary>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Address.CheckOutsideUS">
 <summary>
 
 </summary>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.LoadUserID(System.Int32,System.Int32@,System.String)">
 <summary>
 Gets the user's ID number.
 </summary>
 <param name="nApplicationType"></param>
 <param name="nOAID"></param>
 <param name="sRedirectOnFail">The page to redirect to if a user id fails to load.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.LoadUserID(System.Int32,System.String)">
 <summary>
 Gets the user's OAID number. Redirects the user if the OAID fails to load.
 </summary>
 <param name="nApplicationType">The application type id. If 0, the number is read from System.Configuration.ConfigurationManager.AppSettings("ApplicationType").</param>
 <param name="sRedirectOnFail">The page to redirect to if a user id fails to load.</param>
 <returns>The current user's application ID (OAID). Returns N_ERROR (-255) if no ID is found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.LoadOAID(System.Int32,System.String)">
 <summary>
 Gets the user's application OAID number. Redirects the user if the OAID fails to load.
 </summary>
 <param name="nApplicationType">The application type id. If 0, the number is read from System.Configuration.ConfigurationManager.AppSettings("ApplicationType").</param>
 <param name="sRedirectOnFail">The page to redirect to if a user id fails to load.</param>
 <returns>The current user's application ID (OAID). Returns N_ERROR (-255) if no ID is found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.GetApplicationType(System.Int32,System.String,System.Boolean,System.Boolean)">
 <summary>
 Retrieves the current application type. First checks if an application type was provided and 
 if it is valid; then checks the session variable, then the "ApplicationType" QueryString, then 
 the web.config file.
 </summary>
 <param name="nApplicationType">The current application type. If provided, it is checked for validity.</param>
 <param name="sRedirectOnFail">The page to redirect the user to if an application type is not found.</param>
 <param name="bStrict">Conduct a strict search? Meaning the application type must be assigned to the session variable already or provided in a QueryString.</param>
 <param name="bReportErrors">Report any errors thrown by this function?</param>
 <returns>The current application type.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.CheckCompleted(System.Int32,System.String,System.String)">
 <summary>
 Checks if an applicant has already completed their application (i.e. Certification='Y' or Certification='1'). 
 Redirects the user if they have completed their application.
 </summary>
 <param name="nApplicationType">The application type ID.</param>
 <param name="sRedirectOnCompleted">The page to redirect the user to if their application is complete.</param>
 <returns>Is the application completed?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.CheckUser(System.Int32,System.String,System.String)">
 <summary>
 Checks if the provided user has an existing application. Redirects the user if they do not.
 </summary>
 <param name="nApplicationType">The application type ID.</param>
 <param name="sLoginEmail">The email address of the user logging in.</param>
 <param name="sRedirectOnFail">The page to redirect the user to if they do not have an existing application.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.AuthenticateUser(System.Int32,System.String,System.String,System.String@,System.Web.UI.WebControls.Label@)">
 <summary>
 Authenticates a user's login by checking their password to their email.
 </summary>
 <param name="nApplicationType"></param>
 <param name="sLoginEmail"></param>
 <param name="sLoginPassword"></param>
 <param name="sUserID"></param>
 <param name="lblLoginMessage"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.AuthenticateUser(System.String,System.String,System.Web.UI.WebControls.CustomValidator@,System.Int32)">
 <summary>
 Authenticates a user's login by checking their password to their email.
 </summary>
 <param name="sLoginEmail"></param>
 <param name="sLoginPassword"></param>
 <param name="cv"></param>
 <param name="nApplicationType"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.AuthenticateApplicant(System.String,System.String,System.Web.UI.WebControls.CustomValidator@,System.Web.UI.WebControls.CustomValidator@,System.Web.UI.WebControls.ServerValidateEventArgs@,System.Int32)">
 <summary>
 Authenticates an applicant's login information by checking their email address against their password.
 Provides the reason for an invalid authentication when relevant.
 </summary>
 <param name="sLoginEmail">The email address to check for an application with.</param>
 <param name="sLoginPassword">The password to check against the application.</param>
 <param name="cvEmail">The CustomValidator that will display any email related issues.</param>
 <param name="cvPassword">The CustomValidator that will display any password related issues.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="nApplicationType">The application type to check the email address and password against.</param>
 <returns>Is the applicant providing a valid email address and password for the current application type?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.ChangePassword(System.Int32,System.String,System.String,System.Web.UI.WebControls.Panel@,System.Web.UI.WebControls.Panel@,System.Web.UI.WebControls.Label@,System.Web.UI.WebControls.CustomValidator@)">
 <summary>
 Changes the applicant's password.
 </summary>
 <param name="nApplicationType"></param>
 <param name="sNewPassword"></param>
 <param name="sOldPassword"></param>
 <param name="pnlForm"></param>
 <param name="pnlConfirm"></param>
 <param name="lblLoginMessage"></param>
 <param name="cv"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.ChangePassword(System.String@,System.String@,System.Web.UI.WebControls.CustomValidator@,System.Int32)">
 <summary>
 Changes the applicant's password.
 </summary>
 <param name="sCurrentPassword">The current password.</param>
 <param name="sNewPassword">The new password.</param>
 <param name="cv"></param>
 <param name="nApplicationType">The application type to change.</param>
 <returns>Was the password changed successfully?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.ValidateChangePassword(System.String,System.String,System.String,System.Web.UI.WebControls.CustomValidator@,System.Web.UI.WebControls.CustomValidator@,System.Web.UI.WebControls.CustomValidator@,System.Web.UI.WebControls.ServerValidateEventArgs@,System.Boolean)">
 <summary>
 Validates a password change.
 </summary>
 <param name="sCurrentPassword">The current user's current password.</param>
 <param name="sNewPassword">The current user's new password.</param>
 <param name="sConfirmPassword">A confirmation password.</param>
 <param name="cvConfirmPassword">The CustomValidator to display error messages for confirming passwords.</param>
 <param name="cvCurrentPassword">The CustomValidator to display error messages for the current password.</param>
 <param name="cvNewPassword">The CustomValidator to display error messages for the new password.</param>
 <param name="args">The validator arguments variable.</param>
 <param name="bShowAlerts">Show invalid/error alerts when a CustomValidator is not provided?</param>
 <returns>Is the password change valid?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.NewUser(System.Int32,System.Web.UI.WebControls.Panel@,System.Web.UI.WebControls.Panel@,System.String,System.Web.UI.WebControls.Label@,System.String@)">
 <summary>
 Adds a new applicant to the database or resets the password of an old user.
 </summary>
 <param name="nApplicationType">The application type to apply.</param>
 <param name="pnlUser">The panel that displays the email address control and submit button.</param>
 <param name="pnlConfirm">The panel that displays the confirmation text.</param>
 <param name="sEmailText">The email address to reset/create the application type for.</param>
 <param name="lblEmail">A label control to keep track of the email address on.</param>
 <param name="sReturnNewPassword">The variable to return the new password through.</param>
 <returns>Was the user's application reset/created successfully?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.ResetApplication(System.Int32,System.String,System.String@)">
 <summary>
 Adds a new applicant to the database or resets the password of an old user.
 </summary>
 <param name="nApplicationType">The application type the user is updating.</param>
 <param name="sEmail">The email address of the applicant.</param>
 <param name="sReturnNewPassword">The variable to return the new password through.</param>
 <returns>Was the application reset successfully?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.CheckFinished(System.Int32,System.String)">
 <summary>
 Checks if the application is finished by making sure all sections are complete and certification is complete.
 </summary>
 <param name="nApplicationType">The application type to check against. If not provided the function looks to System.Configuration.ConfigurationManager.AppSettings(S_APPLICATION_TYPE) for the application type.</param>
 <param name="sRedirectOnFail">The page the user is redirected to if they are not finished with their application.</param>
 <returns>Are all sections in the application completed?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.GetInsertRecommendationRequestURL(System.Int32)">
 <summary>
 Creates a URL link to the Graduate Recommendation Request Form.
 </summary>
 <param name="nOAID">The application id to setup the page for. If no ID is provided then the current user's application id is loaded.</param>
 <returns>A URL to the Graduate Recommendation Form. Returns S_UNAVAILABLE if the application id does not exist or could not be found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.GetInsertRecommendationRequestURL(System.String)">
 <summary>
 Creates a URL link to the Graduate Recommendation Request Form.
 </summary>
 <param name="sRequestedByEmail">The email address the recommendation request will be submitted for.</param>
 <returns>A URL to the Graduate Recommendation Form.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.GetApplicationTypeByOAID(System.Int32,System.String)">
 <summary>
 Gets the application type of an application using the OAID value.
 </summary>
 <param name="nOAID">The id value of an application.</param>
 <param name="sRedirectOnFail">The page to redirect to if the OAID fails to load.</param>
 <returns>The application type.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.ConvertApplicationType(System.Int32,System.Boolean)">
 <summary>
 Converts an integer application type to its corresponding string value.
 </summary>
 <param name="nApplicationType">The application type to convert.</param>
 <returns>The string version of an application type.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.GetApplicationInfo(System.Int32,System.Boolean,System.String)">
 <summary>
 Gets all of an application's information based off of the provided OAID value (nApplicationID).
 </summary>
 <param name="nOAID">The OAID value of the application to get information for.</param>
 <param name="bEliminateNull">Replace null values with default values.</param>
 <param name="sNullNumberValue">The value to replace null numbers with.</param>
 <returns>The information for the provided application OAID.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.GetApplicationColumn(System.Int32,System.String)">
 <summary>
 Returns the column value of the application provided.
 </summary>
 <param name="nOAID">The application id number to retrieve information from.</param>
 <param name="sColumn">The DataTable column to get information for.</param>
 <returns>The value in the column of the application provided.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.GetApplicationViewLink(System.Int32,System.String)">
 <summary>
 Gets the link to view the application on the back-end.
 </summary>
 <param name="nOAID">The application id.</param>
 <param name="sOptionalText">The text to display in the anchor tag. Defaults to the OAID provided.</param>
 <returns>The link to view the application.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.GetApplicationCertified(System.Int32,System.Boolean)">
 <summary>
 Returns the certification status of an application.
 </summary>
 <param name="nOAID">The application to get the certification status for.</param>
 <param name="bIncludeCertificationPage">Does the certification page need to be considered?</param>
 <returns>The certification status for the application.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.GetApplicationCertifiedInt(System.Int32,System.Boolean)">
 <summary>
 Returns the certification status of an application.
 </summary>
 <param name="nOAID">The application to get the certification status for.</param>
 <param name="bIncludeCertificationPage">Does the certification page need to be considered?</param>
 <returns>
 The certification status for the application. Returns N_YES (1) if the application is certified, 
 returns N_NO (0) if the application is not certified. If the application does not exist, returns N_ERROR (-255).
 </returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.GetApplicationCertifiedBool(System.Int32,System.Boolean)">
 <summary>
 Returns if an application is certified.
 </summary>
 <param name="nOAID">The application to get the certification status for.</param>
 <param name="bIncludeCertificationPage">Does the certification page need to be considered?</param>
 <returns>Is the application certified?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.MarkApplicationActive(System.Int32,System.Int32)">
 <summary>
 Marks an application as active (1) or inactive (0). Defaults to active.
 </summary>
 <param name="nOAID">The application id to mark active/inactive.</param>
 <param name="nActive">The active status to apply to the application.</param>
 <returns>The active status of the application. Returns N_ERROR (-255) on an error.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.MarkApplicationInactive(System.Int32,System.Int32)">
 <summary>
 Marks an application as active (1) or inactive (0). Defaults to inactive.
 </summary>
 <param name="nOAID">The application id to mark active/inactive.</param>
 <param name="nActive">The active status to apply to the application.</param>
 <returns>The active status of the application. Returns N_ERROR (-255) on an error.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.GetApplicationSectionComplete(System.Int32,System.Int32)">
 <summary>
 Gets the status of a section of an application. Returns N_YES (1) if the section is complete, returns N_NO (0) if the section is incomplete.
 </summary>
 <param name="nSection">The section to check.</param>
 <param name="nOAID">The application id to check. If not provided the function will call LoadOAID().</param>
 <returns>Returns N_YES (1) if the section is complete, returns N_NO (0) if the section is incomplete. Returns N_ERROR (-255) if the application does not exist.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.GetApplicationSectionCompleteBool(System.Int32,System.Int32)">
 <summary>
 Gets the status of a section of an application. Returns True if the section is complete, returns False if the section is incomplete.
 </summary>
 <param name="nSection">The section to check.</param>
 <param name="nOAID">The application id to check. If not provided the function will call LoadOAID().</param>
 <returns>Is the section complete?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.ApplicationExists(System.Int32,System.String)">
 <summary>
 Returns if the application exists.
 </summary>
 <param name="nOAID">The application id to check. If not provided the function calls LoadOAID().</param>
 <param name="sRedirectOnFail">The page to redirect to if the OAID fails to load.</param>
 <returns>Does the application exist?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.CheckMailingPermanentAddressesSame(System.Int32)">
 <summary>
 Checks if the mailing address and permanent address for the applicant are the same.
 </summary>
 <param name="nOAID">The application id to check addresses for.</param>
 <returns>Are the mailing and permanent addresses the same?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.GetApplicationTypeInfo(System.Int32)">
 <summary>
 Gets the information related to the provided application type. Defaults to the current application type.
 </summary>
 <param name="nApplicationType">The application type to get information for. Defaults to the current application type.</param>
 <returns>The information about the provided application type.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.GetApplicationTypeInfo(System.String,System.Int32)">
 <summary>
 Gets the information column related to the provided application type. Defaults to the current application type.
 </summary>
 <param name="sColumn">The DataTable column to pull information from.</param>
 <param name="nApplicationType">The application type to get information for. Defaults to the current application type.</param>
 <returns>The information about the provided application type's column.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.GetApplicationTypeSections(System.Int32,System.Boolean)">
 <summary>
 Gets the sections of the provided application type. Defaults to the current application type.
 </summary>
 <param name="nApplicationType">The application type to get sections for. Defaults to the current application type.</param>
 <param name="bActiveOnly">Only return active sections?</param>
 <returns>The sections associated with the provided application type.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.GetApplicationTypeSectionInfo(System.Int32)">
 <summary>
 Gets information about an application section.
 </summary>
 <param name="nSectionID">The application section to get information for.</param>
 <returns>The information about the application section.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.GetCurrentSectionInfo(System.String)">
 <summary>
 Gets information about the application section the current page is displaying.
 </summary>
 <param name="sColumn">The specific column to pull section information from. Options include ApplicationTypeID, SectionName, SectionOrderIndex, SectionLink, Active.</param>
 <returns>The column value for the current application section on the page.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.GetNextSectionLink">
 <summary>
 Finds the link to the next section in line after the section currently being displayed.
 </summary>
 <returns>The link to the next section in line.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.ApplicationTypeExists(System.Int32)">
 <summary>
 Checks if the application type provided exists in the database.
 </summary>
 <param name="nApplicationType">The application type to check.</param>
 <returns>Does the application type exist?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.FillSectionIndices(System.Web.UI.WebControls.DropDownList@)">
 <summary>
 Fills a sections indices DropDownList with available indices.
 </summary>
 <param name="ddlSectionOrderIndex">The control to fill.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.FillSectionLinks(System.Web.UI.WebControls.DropDownList@)">
 <summary>
 Fills a sections link DropDownList with available links.
 </summary>
 <param name="ddlSectionLink">The control to fill.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.FillProgramControlTypes(System.Web.UI.WebControls.DropDownList@)">
 <summary>
 Fills a control with the "section_program.aspx" control type options to choose from.
 </summary>
 <param name="ddlControlTypes">The control to fill.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.ConvertLinkToComplete(System.String)">
 <summary>
 Converts an application type's SectionLink column to the equivalent column in the applicant's DataTable 
 where the applicant's completed status for the section is saved. Section order varies between application types
 (and some are excluded altogether), therefore the applicant's column is standardized by section instead of 
 having to use a different query for each application type.
 </summary>
 <param name="sLink">The link to the page for the section being referenced.</param>
 <returns>The column in the applicant's DataTable where their completion status will be saved. (ex: Section1Complete, Certification, etc)</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.CheckUSHighSchool(System.Web.UI.UserControl@)">
 <summary>
 Sets the panel visibility for Admissions Info U.S. high school questions.
 </summary>
 <param name="AdmissionsInfo"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.EvaluateYear(System.Int32)">
 <summary>
 
 </summary>
 <param name="nApplicationType"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.RedirectOnFail(System.String,System.Boolean,System.Boolean)">
 <summary>
 Redirects/Refreshes if the sRedirectURL is provided. Provides parameters to control if the page is refreshed
 depending on if the current page is the same as the page to redirect to.
 </summary>
 <param name="sRedirectURL">The page to redirect to.</param>
 <param name="bRefreshIfPageIsSame">Does the page refresh if this function is called to redirect to the current page?</param>
 <param name="bKeepQueryStrings">If this function refreshes the page, should the query strings be maintained as they are?</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions.ResetApplicationStatus(System.Int32)">
 <summary>
 Resets the section completion status and the certification status to N_NO (0). Section1Complete=0, Section2Complete=0, etc...
 </summary>
 <param name="nOAID">The application id to reset the section status for.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions_Graduate.CreateGraduateRecommendationRequest(System.Int32,System.String,System.Int32,System.String,System.String)">
 <summary>
 Creates a recommendation request for a graduate admissions applicant. Sends a request email to the requestee.
 </summary>
 <param name="nOAID">The Whitworth application id to send a request for.</param>
 <param name="sEmail">The email address of the person to request the recommendation from.</param>
 <param name="nWaiveRight">Does the applicant waive their right to view the recommendation? 0 = retain right, 1 = waive right</param>
 <param name="sFirstName">The first name of the person to request the recommendation from.</param>
 <param name="sLastName">The last name of the person to request the recommendation from.</param>
 <returns>The recommendation request id created. Returns N_ERROR (-255) for a failed attempt.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions_Graduate.SendGraduateRecommendationCommittedNotification(System.Int32)">
 <summary>
 Sends an email to graduate admissions admins and the recommendation recipient that a new graduate 
 recommendation has been committed.
 </summary>
 <param name="nRequestID">The recommendation request id.</param>
 <returns>Were the emails successfully sent?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions_Graduate.SendGraduateRecommendationReminder(System.Int32)">
 <summary>
 Sends a reminder email to fill out a recommendation request.
 </summary>
 <param name="nRequestID">The recommendation request id to send a reminder for.</param>
 <returns>Was the reminder email successfully sent?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions_Graduate.GetGraduateRecommendationInfo(System.Int32)">
 <summary>
 Gets all of a graduate recommendation's information.
 </summary>
 <param name="nRequestID">The ID value of the recommendation request to get information for.</param>
 <returns>The information for the provided graduate recommendation request.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions_Graduate.GetGraduateRecommendationCount(System.Int32)">
 <summary>
 Gets the number of graduate recommendations for the application id. Returns the count in the form of committed/total (i.e. 1/2).
 </summary>
 <param name="nOAID">The application to get graduate recommendations for.</param>
 <returns>The number of committed and total graduate recommendations for the application in the form of committed/total.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions_Graduate.CreateGraduateBreadcrumb(System.String,System.String,System.String)">
 <summary>
 Creates a breadcrumb html string for graduate applications.
 </summary>
 <param name="sLink">The url to link to.</param>
 <param name="sText">The text to display.</param>
 <param name="sTarget">The target attribute of the anchor tag.</param>
 <returns>A formatted HTML anchor tag with the provided link and text.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions_Graduate.SetupGraduateApplicationPage(System.Int32)">
 <summary>
 Sets common controls for application pages.
 </summary>
 <param name="nApplicationType">The application type to apply.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions_Graduate.GetGraduateRecommendationStatus(System.Int32,System.Boolean,System.Boolean)">
 <summary>
 Displays basic information about the recommendation request.
 </summary>
 <param name="nRecommendationID">The recommendation id to display.</param>
 <param name="bIncludeLinks">Include a link to view the recommendation?</param>
 <param name="bCommittedOnly">If links are included, do only committed recommendations show links?</param>
 <returns>A short sentence describing the recommendation request's status.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions_Graduate.GetGraduateApplicationID(System.Int32)">
 <summary>
 Gets the application OAID for a given graduate recommendation id.
 </summary>
 <param name="nGraduateRecommendationID">The graduate recommendation to get an application OAID for.</param>
 <returns>The OAID connected to the provided recommendation request id.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions_Graduate.GetGraduateRecommendationRequestedByEmail(System.Int32)">
 <summary>
 Returns the email address of the one who requested the recommendation.
 </summary>
 <param name="nRequestID">The recommendation request to get the requester's email address for.</param>
 <returns>The email address of the one who requested the recommendation.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions_Graduate.GetGraduateRecommendationRequestedByName(System.Int32)">
 <summary>
 Returns the name of the one who requested the recommendation.
 </summary>
 <param name="nRequestID">The recommendation request to get the requester's name for.</param>
 <returns>The name of the one who requested the recommendation.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions_Password.PasswordGenerator(System.Int64)">
 <summary>
 Generates a random password.
 </summary>
 <param name="nLength"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions_Password.Generate">
 <summary>
 Generates a random password.
 </summary>
 <returns>Randomly generated password.</returns>
 <remarks>The length of the generated password will be determined at random. It will be no shorter than the minimum default and no longer than maximum default.</remarks>
</member>
<member name="M:WhitTools.Admissions_Password.Generate(System.Int32)">
 <summary>
 Generates a random password of the exact length.
 </summary>
 <param name="nLength">Exact password length.</param>
 <returns>Randomly generated password.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions_Password.Generate(System.Int32,System.Int32)">
 <summary>
 Generates a random password.
 </summary>
 <param name="nMinLength">Minimum password length.</param>
 <param name="nMaxLength">Maximum password length.</param>
 <returns>Randomly generated password.</returns>
 <remarks>The length of the generated password will be determined at random and it will fall with the range determined by the function parameters.</remarks>
</member>
<member name="M:WhitTools.Admissions_Prospect.SaveAdmissionsProspect(System.String,System.Web.UI.UserControl@)">
 <summary>
 
 </summary>
 <param name="sOriginCode"></param>
 <param name="AdmissionsInfo"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions_Prospect.SaveProspectPreviousColleges(System.Int32,System.Web.UI.WebControls.Repeater@)">
 <summary>
 
 </summary>
 <param name="nOAID"></param>
 <param name="PreviousColleges"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions_Prospect.UpdateAdmissionsProspect(System.Web.UI.UserControl@,System.Int32)">
 <param name="AdmissionsInfo"></param>
 <param name="nOAID"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions_Prospect.LoadAdmissionsProspectInfo(System.Web.UI.UserControl@,System.Int32)">
 <summary>
 
 </summary>
 <param name="AdmissionsInfo"></param>
 <param name="nOAID"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions_Prospect.LoadAdmissionsProspectInfoReadOnly(System.Web.UI.UserControl@,System.Int32)">
 <summary>
 This version of LoadAdmissionsProspectInfo is for printable pages and loads the info into labels instead of TextBoxes, dropdownlists, etc.
 </summary>
 <param name="AdmissionsInfo"></param>
 <param name="nOAID"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions_Prospect.CheckExclusions(System.Web.UI.UserControl@,System.String)">
 <summary>
 
 </summary>
 <param name="AdmissionsInfo"></param>
 <param name="sOriginCode"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions_Prospect.GenerateConsentFormLink(System.Web.UI.UserControl@,System.String)">
 <param name="ucAdmissionsInfo"></param>
 <param name="sSessionID"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Admissions_Prospect.GenerateConsentFormLink(System.String,System.String,System.String,System.Web.UI.WebControls.Label@,System.String)">
 <summary>
 
 </summary>
 <param name="sFirstName"></param>
 <param name="sLastName"></param>
 <param name="sEmail"></param>
 <param name="lblLink"></param>
 <param name="sSessionID"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Audio.WriteAudio(System.String,System.String,System.Decimal,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Provides an HTML5 audio tag with the provided parameters assigned.
 </summary>
 <param name="sAudioFile">The path to the audio file to play.</param>
 <param name="sID">The html tag id to assign. Defaults to a unique audio id.</param>
 <param name="nVolume">The volume to start the audio at (0 to 1.0). Defaults to 1.0.</param>
 <param name="bAutoPlay">Start the audio as soon as it loads?</param>
 <param name="bStartsMuted">Should the audio start as muted?</param>
 <param name="bLoops">Does the audio loop?</param>
 <param name="bPreLoads">Does the audio preload?</param>
 <param name="bShowStats">Show the audio's information to web team members?</param>
 <returns>The HTML5 code for rendering a audio on the page.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Audio.PlayAudio(System.String)">
 <summary>
 Plays an HTML5 audio tag.
 </summary>
 <param name="sID">The HTML5 audio tag id.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Audio.PauseAudio(System.String)">
 <summary>
 Plays an HTML5 audio tag.
 </summary>
 <param name="sID">The HTML5 audio tag id.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Audio.PlayPauseAudio(System.String)">
 <summary>
 Plays an HTML5 audio tag.
 </summary>
 <param name="sID">The HTML5 audio tag id.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Audio.LoadAudio(System.String,System.String)">
 <summary>
 Plays an HTML5 audio tag.
 </summary>
 <param name="sID">The HTML5 audio tag id.</param>
 <param name="sAudioFile">The path to the audio file to play.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Audio.MuteAudio(System.String,System.Boolean)">
 <summary>
 Plays an HTML5 audio tag.
 </summary>
 <param name="sID">The HTML5 audio tag id.</param>
 <param name="bMuted">Set the audio as muted?</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Audio.SetAudioVolume(System.String,System.Decimal)">
 <summary>
 Plays an HTML5 audio tag.
 </summary>
 <param name="sID">The HTML5 audio tag id.</param>
 <param name="nVolume">The volume to set to the audio (0 to 1.0).</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.BillingInformation.LoadBillingInfoVariables">
 <summary>
 
 </summary>
 <remarks></remarks>
</member>
<member name="M:WhitTools.BillingInformation.CheckFormAlreadySubmitted">
 <summary>
 
 </summary>
 <remarks></remarks>
</member>
<member name="M:WhitTools.BillingInformation.CheckClosed">
 <summary>
 
 </summary>
 <remarks></remarks>
</member>
<member name="M:WhitTools.BillingInformation.GetUpcomingTerm(System.DateTime,System.String)">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.BillingInformation.GetVehicleCost(System.Web.UI.WebControls.Label@,System.String)">
 <summary>
 
 </summary>
 <param name="lblVehicleRegistration"></param>
 <param name="sUsername"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.BillingInformation.IsCurrentYearbook(System.Int32)">
 <summary>
 
 </summary>
 <param name="nYear"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.BillingInformation.UpdateTotal(System.Int32,System.String,System.String)">
 <summary>
 
 </summary>
 <param name="nSubmitted"></param>
 <param name="sUsername"></param>
 <param name="sArchive"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertMonthToInt(System.String)">
 <summary>
 Converts a string containing the month to its equivalent integer value.
 </summary>
 <param name="sMonth">The string representation of the month.</param>
 <returns>The integer value of the month.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertMonthToLong(System.String)">
 <summary>
 Converts a parameter containing the month to its equivalent string value.
 </summary>
 <param name="sMonth">The value of the month.</param>
 <returns>The string representation of the month.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertMonthToShort(System.String,System.Boolean)">
 <summary>
 Converts a parameter containing the month to its equivalent string shortened value. (Ex: 1 --> Jan)
 </summary>
 <param name="sMonth">The value of the month.</param>
 <returns>The shortened string representation of the month.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertDayOfWeek(System.Int32)">
 <summary>
 Takes a DateTime.DayOfWeek value and returns the word associated with that value.
 </summary>
 <param name="nDayOfWeek">The value to convert.</param>
 <returns>The word version of the day of week integer value. Returns S_UNKNOWN global enum if the value is invalid.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertDayOfWeek(System.String)">
 <summary>
 Takes a DayOfWeek value and returns the word associated with that value.
 </summary>
 <param name="sDayOfWeek">The value to convert.</param>
 <returns>The word version of the day of week integer value. Returns S_UNKNOWN global enum if the value is invalid.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertDayOfWeekToInt(System.String)">
 <summary>
 Takes a day of the week and converts it to a DateTime.DayOfWeek value.
 </summary>
 <param name="sDayOfWeek">The value to convert.</param>
 <returns>The integer version of the day of week value. Returns N_UNKNOWN global enum if the value is invalid.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertDayOfWeekToShort(System.String)">
 <summary>
 Takes a day of the week and converts it to short version of the word associated with that value.
 </summary>
 <param name="sDayOfWeek">The value to convert.</param>
 <returns>The short word version of the day of week value. Returns N_UNKNOWN global enum if the value is invalid.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertYear(System.Int32)">
 <summary>
 Converts an integer containing the year to its string format.
 </summary>
 <param name="nYear">The integer value of the year.</param>
 <returns>The string representation of the year.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertPhone(System.Web.UI.WebControls.TextBox@,System.Web.UI.WebControls.TextBox@,System.Web.UI.WebControls.TextBox@,System.String)">
 <summary>
 Passes a phone number into three separate TextBoxes.
 </summary>
 <param name="txtPhone1">The control that will receive the first 3 digits of the phone number.</param>
 <param name="txtPhone2">The control that will receive the 4th through 6th digits of the phone number.</param>
 <param name="txtPhone3">The control that will receive the last 4 digits of the phone number.</param>
 <param name="sPhone">The phone number to split up.</param>
 <remarks>
 Example: ConvertPhone(txtPhone1, txtPhone2, txtPhone3, dt.rows(nCounter).item("Phone"))
 Equivalent to: SelectPhone() in TomsLibrary
 </remarks>
</member>
<member name="M:WhitTools.Converter.ConvertPhone(System.Web.UI.WebControls.Label@,System.Web.UI.WebControls.Label@,System.Web.UI.WebControls.Label@,System.String)">
 <summary>
 Passes a phone number into three separate labels.
 </summary>
 <param name="lblPhone1">The control that will receive the first 3 digits of the phone number.</param>
 <param name="lblPhone2">The control that will receive the 4th through 6th digits of the phone number.</param>
 <param name="lblPhone3">The control that will receive the last 4 digits of the phone number.</param>
 <param name="sPhone">The phone number to split up.</param>
 <remarks>
 Example: ConvertPhone(lblPhone1, lblPhone2, lblPhone3, dt.rows(nCounter).item("Phone"))
 </remarks>
</member>
<member name="M:WhitTools.Converter.ConvertInternationalPhone(System.Object@,System.Object@,System.Object@,System.String)">
 <summary>
 Passes an international phone number into three separate TextBoxes.
 </summary>
 <param name="txtPhone1">The control that will receive the first digits of the phone number.</param>
 <param name="txtPhone2">The control that will receive the middle digits of the phone number.</param>
 <param name="txtPhone3">The control that will receive the last digits of the phone number.</param>
 <param name="sPhone">The phone number to split up.</param>
 <remarks>
 Example: ConvertPhone(txtPhone1, txtPhone2, txtPhone3, dt.rows(nCounter).item("Phone"))
 </remarks>
</member>
<member name="M:WhitTools.Converter.ConvertInternationalPhone(System.Web.UI.WebControls.Label@,System.Web.UI.WebControls.Label@,System.Web.UI.WebControls.Label@,System.String)">
 <summary>
 Passes an international phone number into three separate labels.
 </summary>
 <param name="lblPhone1">The control that will receive the first digits of the phone number.</param>
 <param name="lblPhone2">The control that will receive the middle digits of the phone number.</param>
 <param name="lblPhone3">The control that will receive the last digits of the phone number.</param>
 <param name="sPhone">The phone number to split up.</param>
 <remarks>
 Example: ConvertInternationalPhone(lblPhone1, lblPhone2, lblPhone3, dt.rows(nCounter).item("Phone"))
 </remarks>
</member>
<member name="M:WhitTools.Converter.ConvertSSN(System.Web.UI.WebControls.TextBox@,System.Web.UI.WebControls.TextBox@,System.Web.UI.WebControls.TextBox@,System.String,System.Boolean)">
 <summary>
 Passes a social security number into three separate TextBoxes.
 </summary>
 <param name="txtSSN1">The TextBox that receives the first 3 digits of the SSN.</param>
 <param name="txtSSN2">The TextBox that receives the 4th and 5th digits of the SSN.</param>
 <param name="txtSSN3">The TextBox that receives the last 4 digits of the SSN.</param>
 <param name="sSSN">The SSN to convert to the TextBoxes.</param>
 <remarks>Example: ConvertSSN(txtSSN1, txtSSN2, txtSSN3, dt.rows(nCounter).item("SSN"))</remarks>
</member>
<member name="M:WhitTools.Converter.ConvertYesNo(System.String)">
 <summary>
 Converts WhitTools.Filler.FillYesNo values to string values.
 </summary>
 <param name="sYesNo">The object to evaluate for an answer.</param>
 <returns>A string containing "Yes" or "No".</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertYesNoInt(System.String)">
 <summary>
 Converts WhitTools.Filler.FillYesNo values to integer values.
 </summary>
 <param name="sYesNo">The object to evaluate for an answer.</param>
 <returns>An integer containing the converted Yes/No value.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertDate(System.String,System.Web.UI.WebControls.DropDownList@,System.Web.UI.WebControls.DropDownList@,System.Web.UI.WebControls.DropDownList@,System.Web.UI.WebControls.DropDownList@,System.Boolean)">
 <summary>
 Converts the month, day and year in their respective dropdownlists when passed a datetime value.
 </summary>
 <param name="sDateTimeSelected">The datetime to select in the dropdownlists.</param>
 <param name="ddlMonth">The month dropdownlist.</param>
 <param name="ddlDay">The day dropdownlist.</param>
 <param name="ddlYear">The year dropdownlist.</param>
 <param name="ddlTime">The time dropdownlist.</param>
 <param name="bRoundDown">When checking for the time, round the current time down? If false, round up.</param>
 <remarks>
 Example: ConvertDate(dt.rows(nCounter).item("DateSubmitted"), ddlMonth, ddlDay, ddlYear)
 Equivalent to: SelectDate() in TomsLibrary.
 </remarks>
</member>
<member name="M:WhitTools.Converter.ConvertDate(System.Web.UI.WebControls.DropDownList@,System.Web.UI.WebControls.DropDownList@,System.Web.UI.WebControls.DropDownList@,System.String,System.Web.UI.WebControls.DropDownList@)">
 <summary>
 Old version of ConvertDate that takes the date parameter after the control parameters.  Please use the other version as this one has been deprecated.
 </summary>
 <param name="ddlMonth"></param>
 <param name="ddlDay"></param>
 <param name="ddlYear"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertDateExtendedTime(System.String,System.Web.UI.WebControls.DropDownList@,System.Web.UI.WebControls.DropDownList@,System.Web.UI.WebControls.DropDownList@,System.Web.UI.WebControls.DropDownList@,System.Web.UI.WebControls.DropDownList@,System.Web.UI.WebControls.DropDownList@)">
 <summary>
 Converts the month, day, year, hour, minute and am/pm in their respective dropdownlists when passed a datetime value.
 </summary>
 <param name="sDateTimeSelected">The datetime to select in the dropdownlists.</param>
 <param name="ddlMonth">The month dropdownlist.</param>
 <param name="ddlDay">The day dropdownlist.</param>
 <param name="ddlYear">The year dropdownlist.</param>
 <param name="ddlHour">The hour dropdownlist.</param>
 <param name="ddlMinute">The minute dropdownlist.</param>
 <param name="ddlAmPm">The am/pm dropdownlist.</param>
 <remarks>
 Example: ConvertDate(dt.rows(nCounter).item("DateSubmitted"), ddlMonth, ddlDay, ddlYear, ddlHour, ddlMinute)
 Example: ConvertDate(dt.rows(nCounter).item("DateSubmitted"), ddlMonth, ddlDay, ddlYear, ddlHour, ddlMinute, ddlAmPm)
 Equivalent to: SelectDate() in TomsLibrary.
 </remarks>
</member>
<member name="M:WhitTools.Converter.ConvertMajor(System.String)">
 <summary>
 Converts majors from their abbreviation to long form.
 </summary>
 <param name="sMajor">The abbreviation to change.</param>
 <remarks>
 Example: ConvertMajor(sMajor)
 </remarks>
</member>
<member name="M:WhitTools.Converter.ConvertListToDT(System.Object)">
 <summary>
 Creates a DataTable consisting of the selected items in a list control.
 </summary>
 <param name="oControl">The list control to be parsed</param>
 <remarks>
 Example: dt = ConvertListToDT(cblThisList)
 </remarks>
</member>
<member name="M:WhitTools.Converter.ConvertListToSQLSelect(System.Object,System.String)">
 <summary>
 Creates a string containing SQL select syntax based on the selected items in the passed list controls.
 </summary>
 <param name="oControl">The list control to be parsed</param>
 <param name="sSelectColumn">The SQL table column which the list values correspond to</param>
 <remarks>
 Example: sSelectedTypes = ConvertListToSQLSelect(cblTypeList)
 </remarks>
</member>
<member name="M:WhitTools.Converter.ConvertLinksInText(System.String)">
 <summary>
 Takes a text string and replaces all instances of web URL's with anchor tags which reference those URL's.
 </summary>
 <param name="sText">The string with urls to replace as anchor tags.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertToDollarStringInt(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Takes an integer and turns it into a dollar value. Does the same thing as String.Format("{0:C}", nValue) with more options.
 </summary>
 <param name="nValue">The integer to convert.</param>
 <param name="bAddDollarSign">Add a $ to the front of the string?</param>
 <param name="bAddCommas">Add commas in the thousands, millions, etc places?</param>
 <param name="bAddCents">Add .00 to the end of the string?</param>
 <returns>A string version of the integer in dollar values.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertToDollarString(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Takes a given value and turns it into a dollar value. Does the same thing as String.Format("{0:C}", nValue) with more options.
 </summary>
 <param name="sValue">The value to convert. Defaults to zero if an invalid value is passed.</param>
 <param name="bAddDollarSign">Add a $ to the front of the string?</param>
 <param name="bAddCommas">Add commas in the thousands, millions, etc places?</param>
 <param name="bRemove00">Remove .00 when there are no cents in the value?</param>
 <param name="bWriteErrors">Write errors to the page if an invalid sValue is passed?</param>
 <returns>A string version of the integer in dollar values.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertToDollarString(System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Takes a double and turns it into a dollar value. Does the same thing as String.Format("{0:C}", nValue) with more options.
 </summary>
 <param name="nValue">The value to convert. Defaults to zero if an invalid value is passed.</param>
 <param name="bAddDollarSign">Add a $ to the front of the string?</param>
 <param name="bAddCommas">Add commas in the thousands, millions, etc places?</param>
 <param name="bRemove00">Remove .00 when there are no cents in the value?</param>
 <param name="bWriteErrors">Write errors to the page if an invalid sValue is passed?</param>
 <returns>A string version of the double in dollar values.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertToDollarString(System.Decimal,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Takes a decimal and turns it into a dollar value. Does the same thing as String.Format("{0:C}", nValue) with more options.
 </summary>
 <param name="nValue">The value to convert. Defaults to zero if an invalid value is passed.</param>
 <param name="bAddDollarSign">Add a $ to the front of the string?</param>
 <param name="bAddCommas">Add commas in the thousands, millions, etc places?</param>
 <param name="bRemove00">Remove .00 when there are no cents in the value?</param>
 <param name="bWriteErrors">Write errors to the page if an invalid sValue is passed?</param>
 <returns>A string version of the decimal in dollar values.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertGLAccount(System.Web.UI.WebControls.TextBox@,System.Web.UI.WebControls.TextBox@,System.Web.UI.WebControls.TextBox@,System.Web.UI.WebControls.TextBox@,System.String)">
 <summary>
 Passes a GL account number into four separate TextBoxes.
 </summary>
 <param name="txtAccount1">The control that will receive the first 2 digits of the GL account number.</param>
 <param name="txtAccount2">The control that will receive the 3rd through 6th digits of the GL account number.</param>
 <param name="txtAccount3">The control that will receive the 7th through 11th digits of the GL account number.</param>
 <param name="txtAccount4">The control that will receive the last digit of the GL account number.</param>
 <param name="sAccount">The GL account number to split up.</param>
 <remarks>
 Example: ConvertGLAccount(txtAccountNumber1, txtAccountNumber2, txtAccountNumber3, txtAccountNumber4, dt.rows(nCounter).item("GLAccount"))
 11/28/2011 - Removed call to FormatGLAccount as it was returning a string larger than 12 characters, invalidating the algorithm.pe
 </remarks>
</member>
<member name="M:WhitTools.Converter.ConvertDepartment(System.String)">
 <summary>
 Takes a department id or code and converts it to the full department name. Ensures the most up-to-date department value.
 </summary>
 <param name="sDepIdCode">Accepts two values, 1) The numeric id of the department or the department code that represents the department you want the full name of.</param>
 <returns>The full department name associated with the provided symbol.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertDepartmentToID(System.String)">
 <summary>
 Takes a department id or code and converts it to the full department name. Ensures the most up-to-date department value.
 </summary>
 <param name="sDepIdCode">Accepts two values, 1) The numeric id of the department or the department code that represents the department you want the full name of.</param>
 <returns>The full department name associated with the provided symbol.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertDepartmentType(System.Int32)">
 <summary>
 Takes a department type id and returns the description. Ensures the most up-to-date department value.
 </summary>
 <param name="nDepType">The department type to get a description for.</param>
 <returns>The description of the department type.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertDepartmentCodeToID(System.String)">
 <summary>
 Converts a department code to its corresponding department id number.
 </summary>
 <param name="sDepCode">The department code to convert to its department id.</param>
 <returns>The department id that correspondes to the provided department code. (-3 = code not found N_UNAVAILABLE)</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertMajorCategoryIDToDepartmentID(System.Int32)">
 <summary>
 Converts a major category to its equivalent academic department id.
 </summary>
 <param name="nMajorCategoryID">The major category to convert.</param>
 <returns>The academic department related to the major category.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertMajorCodeToID(System.String)">
 <summary>
 Converts a major code to its corresponding id number.
 </summary>
 <param name="sMajorCode">The major code to convert.</param>
 <returns>The id number of the major connected to the major code.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertMajorIDToMajor(System.Int32)">
 <summary>
 Converts a major ID# to its full title.
 </summary>
 <param name="sMajorID">The major id to convert.</param>
 <returns>The name of the major connected to the major id.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertBuilding(System.String)">
 <summary>
 Converts a building id number to the name of the building. Returns S_UNAVAILABLE if no match is found.
 </summary>
 <param name="sBuilding">The building to convert.</param>
 <returns>The name of the building.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertBuildingToInt(System.String)">
 <summary>
 Converts a building to the building ID.
 </summary>
 <param name="sBuilding">The building to convert.</param>
 <returns>The building ID.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertGlobalEnum(System.Object)">
 <summary>
 Converts WhitTools.GlobalEnum values to string values.
 </summary>
 <param name="oEnum">The object to evaluate for an answer.</param>
 <returns>A string containing the converted enum text value.</returns>
 <remarks>
 N_TRUE/N_FALSE and S_TRUE/S_FALSE are the equivalent of YES/NO, which must take precedence.
 </remarks>
</member>
<member name="M:WhitTools.Converter.ConvertGlobalEnumInt(System.Object)">
 <summary>
 Converts WhitTools.GlobalEnum values to integer values.
 </summary>
 <param name="oEnum">The object to evaluate for an answer.</param>
 <returns>An integer containing the converted enum value.</returns>
 <remarks>
 N_TRUE/N_FALSE and S_TRUE/S_FALSE are the equivalent of YES/NO, which must take precedence.
 </remarks>
</member>
<member name="M:WhitTools.Converter.ConvertGlobalEnumWithBold(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Converts WhitTools.GlobalEnum values to string values, adjusting some to bold text.
 </summary>
 <param name="sEnum">The string to evaluate for an answer. Can be the integer or string forms of the enum value.</param>
 <param name="bBoldNo">Make "No" text bold?</param>
 <param name="bBoldOpen">Make "Open" text bold?</param>
 <param name="bBoldDecline">Make "Decline" or "Declined" text bold?</param>
 <param name="bBoldNull">Make "Null" text bold?</param>
 <returns>A string containing the converted enum text value.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertGlobalEnumWithStrong(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Converts WhitTools.GlobalEnum values to string values, adjusting some to strong tag.
 </summary>
 <param name="sEnum">The string to evaluate for an answer. Can be the integer or string forms of the enum value.</param>
 <param name="bBoldNo">Make "No" text bold?</param>
 <param name="bBoldOpen">Make "Open" text bold?</param>
 <param name="bBoldDecline">Make "Decline" or "Declined" text bold?</param>
 <param name="bBoldNull">Make "Null" text bold?</param>
 <param name="bBoldYes">Make "Yes" text bold?</param>
 <returns>A string containing the converted enum text value.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertPlace(System.Int32)">
 <summary>
 Converts an integer into its "place". 1 becomes 1st, 12 becomes 12th, etc.
 </summary>
 <param name="nPlace">The place to convert.</param>
 <returns>The converted place.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertColor(System.Int32)">
 <summary>
 Converts a color integer to the name of that color.
 </summary>
 <param name="nColor">The integer value of a color.</param>
 <returns>The name of the color passed in as an integer value.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertColorToInt(System.String)">
 <summary>
 Converts a color to the ARGB value of that color.
 </summary>
 <param name="sColor">The name of a color to convert to its ARGB color value.</param>
 <returns>The ARGB value of the color passed in by name.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertPhoneType(System.String)">
 <summary>
 Takes a phone type and returns the string value of that type. It does not matter what form the phone type is in.
 </summary>
 <param name="sPhoneType">The phone type value to convert.</param>
 <returns>The string value of the phone type to convert.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertPhoneTypeToInt(System.String)">
 <summary>
 Takes a phone type and returns the integer value of that type. It does not matter what form the phone type is in.
 </summary>
 <param name="sPhoneType">The phone type value to convert.</param>
 <returns>The integer value of the phone type to convert.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertStringToAsciiNumber(System.String)">
 <summary>
 Converts a string of mixed characters to a string of 3-digit ascii equivalents of those characters.
 </summary>
 <param name="sConvert">The character string to convert.</param>
 <returns>A string of numbers that are the 3-digit ascii equivalents of the character value.</returns>
 <remarks>The numeric value created by this function gets very long. Therefore it cannot be saved even in a ulong variable unless the string is 6 characters or less in length.</remarks>
</member>
<member name="M:WhitTools.Converter.ConvertAsciiNumberToString(System.String)">
 <summary>
 Converts a string of 3-digit ascii values to their character equivalents.
 </summary>
 <param name="sAscii">The string of 3-digit ascii values to convert.</param>
 <returns>A string of characters converted from their 3-digit ascii values.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertEthnicity(System.String,System.Int32,System.Boolean)">
 <summary>
 Converts an ethnicity string or integer value to its equivalent string value.
 </summary>
 <param name="sEthnicity">The ethnicity value to get the string for.</param>
 <param name="nEthnicityType">The ethnicity type to apply if applicable.</param>
 <param name="bWriteErrors">Will web team members see conversion errors?</param>
 <returns>The string value for the provided ethnicity. Returns S_UNKNOWN global enum for invalid values.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertEthnicityToInt(System.String,System.Int32)">
 <summary>
 Converts an ethnicity string or integer value to its equivalent integer value.
 </summary>
 <param name="sEthnicity">The ethnicity value to get the integer for.</param>
 <param name="nEthnicityType">The ethnicity type to apply if applicable.</param>
 <returns>The integer value for the provided ethnicity. Returns N_UNKNOWN global enum for invalid values.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertEthnicityType(System.String)">
 <summary>
 Converts an ethnicity type string or integer value to its equivalent string value.
 </summary>
 <param name="sEthnicityType">The ethnicity type value to get the string for.</param>
 <returns>The string value for the provided ethnicity type. Returns S_UNKNOWN global enum for invalid values.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertEthnicityTypeToInt(System.String)">
 <summary>
 Converts an ethnicity type string or integer value to its equivalent integer value.
 </summary>
 <param name="sEthnicityType">The ethnicity type value to get the string for.</param>
 <returns>The integer value for the provided ethnicity type. Returns N_UNKNOWN global enum for invalid values.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertSchoolType(System.String)">
 <summary>
 Converts a school type string or integer value to it equivalent string value.
 </summary>
 <param name="sSchoolType">The school type to convert.</param>
 <returns>The string value of the provided school type. Returns S_UNKNOWN global enum for invalid values.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertSchoolTypeToInt(System.String)">
 <summary>
 Converts a school type string or integer value to it equivalent integer value.
 </summary>
 <param name="sSchoolType">The school type to convert.</param>
 <returns>The integer value of the provided school type. Returns N_UNKNOWN global enum for invalid values.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertDateTime(System.Web.UI.WebControls.DropDownList,System.Web.UI.WebControls.DropDownList,System.Web.UI.WebControls.DropDownList,System.Web.UI.WebControls.DropDownList)">
 <summary>
 Converts date/time values from ddl controls to a DateTime variable. Returns CDate(S_NULL_DATE) value if the date/time is invalid.
 </summary>
 <param name="ddlMonth">The control containing month values.</param>
 <param name="ddlDay">The control containing day values.</param>
 <param name="ddlYear">The control containing year values.</param>
 <param name="ddlTime">The control containing time values.</param>
 <returns>The date selected in the controls. Returns CDate(S_NULL_DATE) value if the date/time is invalid.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertTimeOfDay(System.String)">
 <summary>
 Converts a time of day to its string format.
 </summary>
 <param name="sTimeOfDay">The time of day value to convert.</param>
 <returns>The string value of a time of day.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertTimeOfDayInt(System.String)">
 <summary>
 Converts a time of day to its integer format.
 </summary>
 <param name="sTimeOfDay">The time of day value to convert.</param>
 <returns>The integer value of a time of day.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertNumberToLetter(System.Int32)">
 <summary>
 Converts a number (expected to be between 1-26) to its equivalent letter in the English alphabet.
 </summary>
 <param name="nNumber">The number passed (1-26).</param>
 <returns>The letter corresponding to the provided number.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertDataTableRowColumnValue(System.Data.DataTable@,System.String,System.String,System.String)">
 <summary>
 Converts all row values of a specific column from one value to another. To convert the value in the column
 to its GlobalEnum value, leave the sConvertFrom and sConvertTo parameters blank. To convert the value to a
 formatted date, use S_FORMAT_DATE or S_FORMAT_DATE_SHORT. To convert the value to a formatted string, use
 S_FORMAT_STRING. To convert a department to the full name of the department, use S_DEPARTMENT. To convert a
 username to the person's full name, use S_USERNAME. To convert a PLID to the person's full name, use S_PLID. 
 To convert a GL Account number to the full version including dashes, use S_GL_ACCOUNT.
 </summary>
 <param name="dt">The DataTable to convert values for.</param>
 <param name="sColumn">The column to convert values for.</param>
 <param name="sConvertFrom">The column value to convert from. If the value in the row column matches 
 this value then it is replaced with the sConvertTo value. If this field is left blank then the value 
 in the column is converted to its GlobalEnum value. This value can be S_FORMAT_DATE or S_FORMAT_DATE_SHORT
 to convert the value to a formatted version of the date. This value can be S_FORMAT_STRING to format the
 value of the row by putting a space between lowercase letters followed by uppercase letters. To convert a 
 department to the full name of the department, use S_DEPARTMENT. To convert a username to the person's full 
 name, use S_USERNAME. To convert a PLID to the person's full name, use S_PLID. To convert a GL Account number 
 to the full version including dashes, use S_GL_ACCOUNT.</param>
 <param name="sConvertTo">The column value to convert to. If the value in the row column matches 
 sConvertFrom then it is replaced with this value. If this field is left blank then the value in 
 the column is converted to its GlobalEnum value. This value can be S_FORMAT_DATE or S_FORMAT_DATE_SHORT
 to convert the value to a formatted version of the date. This value can be S_FORMAT_STRING to format the
 value of the row by putting a space between lowercase letters followed by uppercase letters. To convert a 
 department to the full name of the department, use S_DEPARTMENT. To convert a username to the person's full 
 name, use S_USERNAME. To convert a PLID to the person's full name, use S_PLID. To convert a GL Account number 
 to the full version including dashes, use S_GL_ACCOUNT.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertDataTableColumnName(System.Data.DataTable@,System.String,System.String)">
 <summary>
 Changes the name of a DataTable column. Puts the text inside of " marks to ensure the text does not conflict with equations.
 </summary>
 <param name="dt">The DataTable to change the name of a column in.</param>
 <param name="sColumnToChange">The name of the column to change.</param>
 <param name="sNewColumnName">The name to change the column to.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertDataTableColumnNames(System.Data.DataTable@)">
 <summary>
 Formats the name of a DataTable columns. The formatting applied is to add spaces between lowercase letters followed by uppercase letters.
 </summary>
 <param name="dt">The DataTable to format the name of the columns in.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertDataTableColumnPosition(System.Data.DataTable@,System.String,System.Int32)">
 <summary>
 Changes the position of the column within the column list to its new 0-index ordinal position.
 </summary>
 <param name="dt">The DataTable to change a column position for.</param>
 <param name="sColumnToMove">The name of the column to move.</param>
 <param name="nNewOrdinalPosition">The new 0-index ordinal position to place the column at. Defaults to the end of the column list.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertGender(System.String)">
 <summary>
 Converts a gender to its equivalent string value.
 </summary>
 <param name="sGender">The gender value to convert.</param>
 <returns>Male or Female. Returns S_ERROR if not found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertGenderToInt(System.String)">
 <summary>
 Converts a gender to its equivalent integer value.
 </summary>
 <param name="sGender">The gender value to convert.</param>
 <returns>N_MALE (16) or N_FEMALE (-16). Returns N_ERROR (-255) if not found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertMaritalStatus(System.String)">
 <summary>
 Converts a marital status to its equivalent string value.
 </summary>
 <param name="sMaritalStatus">The marital status value to convert.</param>
 <returns>The string value of the marital status. Returns S_NOT_SELECTED if Null. Returns S_ERROR if not found. S_DIVORCED if it is an option.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertMaritalStatusToInt(System.String)">
 <summary>
 Converts a marital status to its equivalent integer value.
 </summary>
 <param name="sMaritalStatus">The marital status value to convert.</param>
 <returns>The integer value of the marital status. Returns N_NOT_SELECTED if Null. Returns N_ERROR (-255) if not found. N_DIVORCED (-257) if it is an option.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertApplicationSubType(System.Int32)">
 <summary>
 Gets the description of the application sub-type.
 </summary>
 <param name="nApplicationSubType">The sub-type to get a description for.</param>
 <returns>The description of the application sub-type.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertHtmlToReadable(System.String,System.Boolean)">
 <summary>
 Makes an HTML string readable within a web page.
 </summary>
 <param name="sHTML">The HTML code to convert.</param>
 <returns>A readable version of the HTML code.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertMilitaryStatus(System.Int32)">
 <summary>
 Gets the military status.
 </summary>
 <param name="nMilitaryStatus">The military status to convert.</param>
 <returns>The military status. Returns S_ERROR if the military status does not exist.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertPosition(System.String)">
 <summary>
 Converts a position to its string equivalent.
 </summary>
 <param name="sPosition">The position to convert.</param>
 <returns>The string value of the position.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertPositionToInt(System.String)">
 <summary>
 Converts a position to its integer equivalent.
 </summary>
 <param name="sPosition">The position to convert.</param>
 <returns>The integer value of the position.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertPrefix(System.String)">
 <summary>
 Converts a prefix to its string equivalent.
 </summary>
 <param name="sPrefix">The prefix to convert.</param>
 <returns>The string value of the position.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertPrefixToInt(System.String)">
 <summary>
 Converts a prefix to its integer equivalent.
 </summary>
 <param name="sPrefix">The prefix to convert.</param>
 <returns>The integer value of the position.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertSuffix(System.String)">
 <summary>
 Converts a suffix to its string equivalent.
 </summary>
 <param name="sSuffix">The suffix to convert.</param>
 <returns>The string value of the position.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertSuffixToInt(System.String)">
 <summary>
 Converts a suffix to its integer equivalent.
 </summary>
 <param name="sSuffix">The suffix to convert.</param>
 <returns>The integer value of the position.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertReligion(System.String)">
 <summary>
 Converts a religion to its string equivalent.
 </summary>
 <param name="sReligion">The religion to convert.</param>
 <returns>The string value of the religion.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertReligionToInt(System.String)">
 <summary>
 Converts a religion to its integer equivalent.
 </summary>
 <param name="sReligion">The religion to convert.</param>
 <returns>The integer value of the religion.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertChristianDenomination(System.String)">
 <summary>
 Converts a religion to its string equivalent.
 </summary>
 <param name="sDenomination">The religion to convert.</param>
 <returns>The string value of the religion.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertChristianDenominationToInt(System.String)">
 <summary>
 Converts a Christian denomination to its integer equivalent.
 </summary>
 <param name="sDenomination">The Christian denomination to convert.</param>
 <returns>The integer value of the Christian denomination.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertVehicleRegistrationType(System.String,System.Boolean)">
 <summary>
 Converts a vehicle registration type to its string version.
 </summary>
 <param name="sType">The vehicle registration type to convert.</param>
 <param name="bShort">Return the short version?</param>
 <returns>The string version of the vehicle registration type.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertTypeOfCommute(System.String,System.Boolean)">
 <summary>
 Converts a vehicle registration type to its string version.
 </summary>
 <param name="sType">The vehicle registration type to convert.</param>
 <param name="bShort">Return the short version?</param>
 <returns>The string version of the vehicle registration type.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertVehicleRegistrationTypeToInt(System.String)">
 <summary>
 Converts a vehicle registration type to its integer version. Returns N_ERROR (-255) if no match is found.
 </summary>
 <param name="sType">The vehicle registration type to convert.</param>
 <returns>The integer version of the vehicle registration type. Returns N_ERROR (-255) if no match is found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertTypeOfCommuteToInt(System.String)">
 <summary>
 Converts a vehicle registration type to its integer version. Returns N_ERROR (-255) if no match is found.
 </summary>
 <param name="sType">The vehicle registration type to convert.</param>
 <returns>The integer version of the vehicle registration type. Returns N_ERROR (-255) if no match is found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertOccupation(System.String)">
 <summary>
 Gets the string value of the occupation provided.
 </summary>
 <param name="sOccupation">The occupation to check for. Accepts the ID, Occupation or Code values.</param>
 <returns>The string value of the occupation.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertOccupationToInt(System.String)">
 <summary>
 Gets the integer value of the occupation provided.
 </summary>
 <param name="sOccupation">The occupation to check for. Accepts the ID, Occupation or Code values.</param>
 <returns>The integer value of the occupation.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertSpecialChars(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Replaces special HTML character representations with their actual character. (ex: "%3d" becomes "=", "%2B" becomes "+", "%20" becomes " ")
 </summary>
 <param name="sText">The text to replace.</param>
 <param name="bReplaceEquals">Replace the "=" character?</param>
 <param name="bReplaceBreak">Replace HTML break tag with "%0d"?</param>
 <param name="bReplaceSpaces">Replace space characters?</param>
 <param name="bReplacePlusWithSpace">Replace "+" with space character? QueryStrings will convert spaces to "+" characters. This is intended to fix that.</param>
 <returns>A string with the special HTML characters replaced.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertToSpecialChars(System.String,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Replaces characters with their special HTML character representations. (ex: "=" becomes "%3d", "+" becomes "%2B", " " becomes "%20")
 </summary>
 <param name="sText">The text to replace.</param>
 <param name="bReplaceEquals">Replace the "=" character?</param>
 <param name="bReplaceBreak">Replace HTML break tag with "%0d"?</param>
 <param name="bReplaceSpaces">Replace space characters?</param>
 <returns>A string with the special HTML characters replaced.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertEducType(System.String,System.String)">
 <summary>
 Converts an educational institute type.
 </summary>
 <param name="sEducType">The educational institute id or type.</param>
 <param name="sNotFound">The text to display when a match is not found.</param>
 <returns>The educational institute type.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertEducTypeInt(System.String,System.Int32)">
 <summary>
 Converts an educational institute type.
 </summary>
 <param name="sEducType">The educational institute id or type.</param>
 <param name="sNotFound">The text to display when a match is not found.</param>
 <returns>The educational institute type. Returns N_NOT_FOUND (-14) if no match is found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertSchool(System.String,System.String)">
 <summary>
 Converts a school name or ID to the name of the school.
 </summary>
 <param name="sSchool">The school to get the name/description of.</param>
 <param name="sColumn">The database column to retrieve. (Description/School)</param>
 <returns>The name/description of the school.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertSchoolToInt(System.String)">
 <summary>
 Converts a school to the school ID. Returns 0 if the school was not found.
 </summary>
 <param name="sSchool">The school to get the ID for.</param>
 <returns>The ID of the school. Returns 0 if the school was not found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Converter.ConvertNBS(System.String)">
 <summary>
 Converts spaces to NBS characters in a string.
 </summary>
 <param name="sText">The text to convert spaces to NBS characters.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Cookies.UpdateCookie(System.String,System.String,System.Object)">
 <summary>
 Updates the value of a cookie. If the cookie does not exist yet, it is created. If the cookie
 already exists, it will set the expiration date of the cookie to a past date and create a new
 version. This will cause issues if you need to use the new value in the cookie immediately.
 The page must be refreshed before the new cookie value is used over the old value.
 </summary>
 <param name="sCookieName">The cookie to update (or insert if it does not exists). CookieName must be unique, otherwise other applications that use the same name will be messed up. Suggested naming convention: ApplicationName_CookieName</param>
 <param name="sValue">The value to assign the cookie.</param>
 <param name="dateExpires">The date the cookie expires. Defaults to 3 months.</param>
 <returns>The value assigned to the cookie.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Cookies.InsertCookie(System.String,System.String,System.Object)">
 <summary>
 Inserts a new cookie. If the cookie already exists, it is updated.
 </summary>
 <param name="sCookieName">The cookie to insert (or update if it already exists). CookieName must be unique, otherwise other applications that use the same name will be messed up. Suggested naming convention: ApplicationName_CookieName</param>
 <param name="sValue">The value to assign the cookie.</param>
 <param name="dateExpires">The date the cookie expires. Defaults to 3 months.</param>
 <returns>The value assigned to the cookie.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Cookies.CookieExists(System.String)">
 <summary>
 Checks if a cookie contains a value.
 </summary>
 <param name="sCookieName">The cookie to check for a value.</param>
 <returns>Does the cookie contain a value?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Cookies.GetCookieValue(System.String)">
 <summary>
 Gets the value of a cookie. Returns S_EMPTY_VALUE if the value could not be retrieved.
 </summary>
 <param name="sCookieName">The cookie to check for a value.</param>
 <returns>The value of the cookie. Returns S_EMPTY_VALUE if the value could not be retrieved.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Cookies.GetCookieValueInt(System.String)">
 <summary>
 Gets the value of a cookie. Returns N_NOT_FOUND (-14) if the value could not be retrieved.
 </summary>
 <param name="sCookieName">The cookie to check for a value.</param>
 <returns>The value of the cookie.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Cookies.GetCookieValueDec(System.String)">
 <summary>
 Gets the value of a cookie. Returns N_NOT_FOUND (-14) if the value could not be retrieved.
 </summary>
 <param name="sCookieName">The cookie to check for a value.</param>
 <returns>The value of the cookie.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Cookies.GetCookieValueDate(System.String)">
 <summary>
 Gets the value of a cookie. Returns S_NULL_DATE if the value could not be retrieved.
 </summary>
 <param name="sCookieName">The cookie to check for a value.</param>
 <returns>The value of the cookie.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Cookies.GetCookieValueBool(System.String,System.Boolean)">
 <summary>
 Gets the value of a cookie. Returns "False" if the value could not be retrieved. Any number value greater
 than 0 returns as "True".
 </summary>
 <param name="sCookieName">The cookie to check for a value.</param>
 <param name="bDefault">The default value to return.</param>
 <returns>The value of the cookie.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Cookies.FormatCookieName(System.String)">
 <summary>
 Strips the unique cookie identifier prefix from a cookie name.
 </summary>
 <param name="sCookieName">The cookie name to format.</param>
 <returns>A cookie with the unique prefix stripped from it.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Cookies.WriteAllCookies(System.Boolean)">
 <summary>
 Writes all cookies to an html readable string.
 </summary>
 <param name="bShowDecrypted">Include decrypted version of the cookie value?</param>
 <returns>An html readable string containing all of the cookies associated with the current page.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Cookies.WriteCookies(System.Boolean)">
 <summary>
 Writes all cookies to an html readable string.
 </summary>
 <param name="bShowDecrypted">Include decrypted version of the cookie value?</param>
 <returns>An html readable string containing all of the cookies associated with the current page.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Cookies.GetAllCookies(System.Boolean)">
 <summary>
 Writes all cookies to an html readable string.
 </summary>
 <param name="bIncludeDecrypted">Include decrypted version of the cookie value?</param>
 <returns>An html readable string containing all of the cookies associated with the current page.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Cookies.GetCookies(System.Boolean)">
 <summary>
 Writes all cookies to an html readable string.
 </summary>
 <param name="bIncludeDecrypted">Include decrypted version of the cookie value?</param>
 <returns>An html readable string containing all of the cookies associated with the current page.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Cookies.DeleteCookie(System.String)">
 <summary>
 Deletes a cookie.
 </summary>
 <param name="sCookieName">The cookie to delete.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Cookies.RemoveCookie(System.String)">
 <summary>
 Deletes a cookie.
 </summary>
 <param name="sCookieName">The cookie to delete.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.DataTables.GetDataTable(System.String,System.Data.SqlClient.SqlConnection@,System.Boolean,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Places data from an SQL string into a DataTable and returns the table.
 </summary>
 <param name="sSelect">The select string to query the database.</param>
 <param name="cnx">The connection string to the desired database.</param>
 <param name="bEliminateNull">Eliminate null values in the DataTable?</param>
 <param name="sNullNumberValue">The number value to replace with null items. Only relevant if bElimateNull is set to True. Default: -1</param>
 <param name="sAssignError">The web team member's username to assign any errors to.</param>
 <param name="bShowErrorAlert">Show the error alert popup?</param>
 <param name="bWriteCustomError">Show the custom error report?</param>
 <param name="bReportError">Send error reports?</param>
 <param name="bCheckAttacks">Check for sql query attacks?</param>
 <param name="bCheckTables">Check for existing DataTable names?</param>
 <returns>A DataTable filled with the sql query data.</returns>
 <remarks>
 Example: dtMyTable = GetDataTable("SELECT * FROM ExampleDatabase", cnx)
 Example: dtMyTable = GetDataTable("SELECT * FROM ExampleDatabase", cnx, True)
 </remarks>
</member>
<member name="M:WhitTools.DataTables.SaveCurrentPageInfo(System.String)">
 <summary>
 
 </summary>
 <param name="sErrorMessage"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.DataTables.GetDataTable(System.String,System.Boolean,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Places data from an SQL string into a DataTable and returns the table.
 </summary>
 <param name="sSelect">The select string to query the database.</param>
 <param name="bEliminateNull">Eliminate null values in the DataTable?</param>
 <param name="sNullNumberValue">The number value to replace with null items. Only relevant if bElimateNull is set to True. Default: -1</param>
 <param name="sAssignError">The web team member's username to assign any errors to.</param>
 <param name="bShowErrorAlert">Show the error alert popup?</param>
 <param name="bWriteCustomError">Show the custom error report?</param>
 <param name="bReportError">Send error reports?</param>
 <returns>A DataTable filled with the sql query data.</returns>
 <remarks>
 Example: dtMyTable = GetDataTable("SELECT * FROM ExampleDatabase", cnx)
 Example: dtMyTable = GetDataTable("SELECT * FROM ExampleDatabase", cnx, True)
 </remarks>
</member>
<member name="M:WhitTools.DataTables.GetDataTable(System.Data.SqlClient.SqlConnection,System.String,System.Boolean,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 A version of GetDatatable meant to ensure compatibility with code which uses the old version
 of the GetDataTable method in which the SQLConnection object was not optional. Simply calls
 the new version.
 </summary>
 <param name="cnx">The connection string to the desired database.</param>
 <param name="sSelect">The select string to query the database.</param>
 <param name="bEliminateNull">Eliminate null values in the DataTable?</param>
 <param name="sNullNumberValue">The number value to replace with null items. Only relevant if bElimateNull is set to True. Default: -1</param>
 <param name="sAssignError">The web team member's username to assign any errors to.</param>
 <param name="bShowErrorAlert">Show the error alert popup?</param>
 <param name="bWriteCustomError">Show the custom error report?</param>
 <param name="bReportError">Send error reports?</param>
 <returns>A DataTable filled with the sql query data.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.DataTables.GetDataTable(System.Data.SqlClient.SqlCommand,System.String,System.Data.SqlClient.SqlConnection@,System.Boolean,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Places data from an SQL string into a DataTable and returns the table.
 </summary>
 <param name="cmd">The sql command to use.</param>
 <param name="sSelect">The select string to query the database.</param>
 <param name="cnx">The connection string to the desired database.</param>
 <param name="bEliminateNull">Eliminate null values in the DataTable?</param>
 <param name="sNullNumberValue">The number value to replace with null items. Only relevant if bElimateNull is set to True. Default: -1</param>
 <param name="sAssignError">The web team member's username to assign any errors to.</param>
 <param name="bShowErrorAlert">Show the error alert popup?</param>
 <param name="bWriteCustomError">Show the custom error report?</param>
 <param name="bReportError">Send error reports?</param>
 <returns>A DataTable filled with the sql query data.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.DataTables.GetDataTable(System.String,System.String,System.String,System.Data.SqlClient.SqlConnection@,System.Boolean,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Selects all values from the provided table where the provided column and value match.
 </summary>
 <param name="sTargetTable">The table to select from.</param>
 <param name="sTargetColumn">The column to select from.</param>
 <param name="sTargetValue">The value to select. CleanSQL() is assigned within the function.</param>
 <param name="cnx">The SqlConnection to use.</param>
 <param name="bEliminateNull">Eliminate null values in the DataTable?</param>
 <param name="sNullNumberValue">The number value to replace with null items. Only relevant if bElimateNull is set to True. Default: -1</param>
 <param name="sAssignError">The web team member's username to assign any errors to.</param>
 <param name="bShowErrorAlert">Show the error alert popup?</param>
 <param name="bWriteCustomError">Show the custom error report?</param>
 <param name="bReportError">Send error reports?</param>
 <returns>A DataTable filled with all columns in the row where the provided column and value match.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.DataTables.GetDataTable(System.String,System.UInt32,System.Data.SqlClient.SqlConnection@,System.Boolean,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Selects all values from the provided table where the ID matches.
 </summary>
 <param name="sTargetTable">The table to select from.</param>
 <param name="nID">The ID column value to select.</param>
 <param name="cnx">The SqlConnection to use.</param>
 <param name="bEliminateNull">Eliminate null values in the DataTable?</param>
 <param name="sNullNumberValue">The number value to replace with null items. Only relevant if bElimateNull is set to True. Default: -1</param>
 <param name="sAssignError">The web team member's username to assign any errors to.</param>
 <param name="bShowErrorAlert">Show the error alert popup?</param>
 <param name="bWriteCustomError">Show the custom error report?</param>
 <param name="bReportError">Send error reports?</param>
 <returns>A DataTable filled with all columns in the row where the provided ID value matches.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.DataTables.DeleteFromTable(System.String,System.String,System.String,System.String,System.Int32,System.Boolean,System.Data.SqlClient.SqlConnection@)">
 <summary>
 Deletes a value from the provided table. Error handling is included in the function.
 </summary>
 <param name="sTargetTable">The table to delete from. If the full path to the table (Web3.adTelephone.dbo.PeopleListing) is not provided, then a SQLConnection object must be provided.</param>
 <param name="sTargetColumn">The column to delete from.</param>
 <param name="sTargetValue">The value to delete. CleanSQL() is assigned within the function.</param>
 <param name="sAssignError">The username to assign any error reports to.</param>
 <param name="nErrorImportance">The Global Enum value that determines the importance of any error messages (N_ERROR_IMPORTANCE_NORMAL).</param>
 <param name="bShowErrorAlert">Show an error message alert upon an error?</param>
 <param name="cnx">The SqlConnection to use.</param>
 <remarks>Intended to streamline delete processes which occur mainly on backend maintenance pages when multiple values need to be cleared out at once.</remarks>
</member>
<member name="M:WhitTools.DataTables.SelectFromTable(System.String,System.String,System.String,System.Data.SqlClient.SqlConnection@,System.Boolean,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Selects all values from the provided table where the provided column and value match.
 </summary>
 <param name="sTargetTable">The table to select from.</param>
 <param name="sTargetColumn">The column to select from.</param>
 <param name="sTargetValue">The value to select. CleanSQL() is assigned within the function.</param>
 <param name="cnx">The SqlConnection to use.</param>
 <param name="bEliminateNull">Eliminate null values in the DataTable?</param>
 <param name="sNullNumberValue">The number value to replace with null items. Only relevant if bElimateNull is set to True. Default: -1</param>
 <param name="sAssignError">The web team member's username to assign any errors to.</param>
 <param name="bShowErrorAlert">Show the error alert popup?</param>
 <param name="bWriteCustomError">Show the custom error report?</param>
 <param name="bReportError">Send error reports?</param>
 <returns>A DataTable filled with all columns in the row where the provided column and value match.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.DataTables.SelectFromTable(System.String,System.UInt32,System.Data.SqlClient.SqlConnection@,System.Boolean,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Selects all values from the provided table where the ID matches.
 </summary>
 <param name="sTargetTable">The table to select from.</param>
 <param name="nID">The ID column value to select.</param>
 <param name="cnx">The SqlConnection to use.</param>
 <param name="bEliminateNull">Eliminate null values in the DataTable?</param>
 <param name="sNullNumberValue">The number value to replace with null items. Only relevant if bElimateNull is set to True. Default: -1</param>
 <param name="sAssignError">The web team member's username to assign any errors to.</param>
 <param name="bShowErrorAlert">Show the error alert popup?</param>
 <param name="bWriteCustomError">Show the custom error report?</param>
 <param name="bReportError">Send error reports?</param>
 <returns>A DataTable filled with all columns in the row where the provided ID value matches.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.DataTables.EliminateNull(System.Data.DataTable@,System.String,System.Boolean)">
 <summary>
 Replaces null values in a DataTable with a value that matches the DataType of the item being replaced.
 Strings will be replaced with "", numbers with -1, DataTime with 1/1/1900.
 </summary>
 <param name="dt">The DataTable to replace null values in.</param>
 <param name="sNullNumberValue">The value to replace null number values with. Default: -1</param>
 <remarks>These replacement values are something to keep in mind when using EliminateNull and then displaying values from the DataTable, as you may see 1/1/1900's and other values popping up.</remarks>
</member>
<member name="M:WhitTools.DataTables.FormatDataTable(System.Data.DataTable@,System.Boolean)">
 <summary>
 Formats items in a DataTable to valid values.
 </summary>
 <param name="dt">The DataTable to format.</param>
 <param name="bEliminateNull">Fill null items with valid values?</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.DataTables.CopyDataTable(System.Data.DataTable,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
 <summary>
 Creates a new table and copies data from a previously existing table. 
 Accepts optional beginning and ending indexes for copying specific row sets.
 Defaults to convert column data types to type "String".
 </summary>
 <param name="dtTarget">The DataTable to copy.</param>
 <param name="nStartIndex">The row index to start at.</param>
 <param name="nEndIndex">The row index to end at.</param>
 <param name="bMaintainColumnType">Keep the column data type the same? If false, column types are converted to a "String" data type.</param>
 <returns>A copy of the target DataTable containing only the selected rows.</returns>
 <remarks>Equivalent to: CopyTable() in TomsLibrary</remarks>
</member>
<member name="M:WhitTools.DataTables.CheckExcluded(System.Int32,System.Int32,System.Int32)">
 <summary>
 Checks whether or not an index falls under exclusion as specified by a starting and ending index for exclusion.
 </summary>
 <param name="nIndex"></param>
 <param name="nStartExclude"></param>
 <param name="nEndExclude"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.DataTables.ConvertDataTableColumnTypes(System.Data.DataTable,System.Int32)">
 <summary>
 This will take an existing data table and copy it to a new DataTable, the only difference being
 that all columns are now of data type String. This makes it possible to do string operations
 on any data in the table, in order to do transforms and other operations.
 </summary>
 <param name="dt">The DataTable to update.</param>
 <param name="nFormatColumns">0 = no formatting, 1 = format column headers (put a space between lowercase letters followed by an uppercase letter).</param>
 <returns>An updated string version of the provided DataTable.</returns>
 <remarks>Equivalent to: UpdateDTColumnTypes() in TomsLibrary</remarks>
</member>
<member name="M:WhitTools.DataTables.GetDataTableValuesHTML(System.Data.DataTable,System.Int32,System.Int32)">
 <summary>
 This will take an existing data table and write its values to a string for easy HTML display.
 </summary>
 <param name="dt">The DataTable to update.</param>
 <param name="nFormatColumns">The way the headers are formatted.</param>
 <param name="nDisplayType">Code denoting the manner in which the data will be displayed.  1 will result
 in horizontal display, 2 will result in vertical.</param>
 <returns>An string containing an HTML code with the data in it, columns at the top in bold.</returns>
</member>
<member name="M:WhitTools.DataTables.GetNewestID(System.String,System.Data.SqlClient.SqlConnection@,System.String)">
 <summary>
 Returns the column value of the newest row added to the table.
 </summary>
 <param name="sTableName">The name of the DataTable to pull the newest id row from. If a connection object is not provided this table name must include Web3.Database.dbo.TableName</param>
 <param name="cnx">The SQL Connection object to use.</param>
 <param name="sColumn">The column value in the table to retrieve. Must be an integer and the primary key of the table.</param>
 <returns>The newest row ID added to the table. Returns 0 if not found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.DataTables.GetNewestID(System.Data.SqlClient.SqlConnection@,System.String,System.String)">
 <summary>
 Returns the newest row ID added to the table.
 </summary>
 <param name="cnx">The SQL Connection object to use.</param>
 <param name="sTableName">The name of the DataTable to pull the newest id row from.</param>
 <param name="sColumn">The column value in the table to retrieve.</param>
 <returns>The newest row ID added to the table. Returns 0 if not found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.DataTables.GetNewestID(System.String,System.String)">
 <summary>
 Returns the value of the row with the highest sColumn value for the provided table.
 </summary>
 <param name="sTableName">The name of the DataTable to pull the newest id row from.</param>
 <param name="sColumn">The column value in the table to retrieve.</param>
 <returns>The newest row ID added to the table. Returns 0 if not found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.DataTables.GetRowOfHighestColumnValue(System.String,System.String,System.Data.SqlClient.SqlConnection@)">
 <summary>
 Returns the row with the highest value in the table for the provided column.
 </summary>
 <param name="sTableName">The name of the DataTable to pull the newest id row from. If a connection object is not provided this table name must include Web3.Database.dbo.TableName</param>
 <param name="cnx">The SQL Connection object to use.</param>
 <returns>The row with the highest value in the table for the provided column. Returns 0 if not found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.DataTables.GetRowOfLowestColumnValue(System.String,System.String,System.Data.SqlClient.SqlConnection@)">
 <summary>
 Returns the row with the highest value in the table for the provided column.
 </summary>
 <param name="sTableName">The name of the DataTable to pull the newest id row from. If a connection object is not provided this table name must include Web3.Database.dbo.TableName</param>
 <param name="cnx">The SQL Connection object to use.</param>
 <returns>The row with the highest value in the table for the provided column. Returns 0 if not found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.DataTables.CompareTwoDataTables(System.Data.DataTable,System.Data.DataTable,System.String,System.Boolean,System.String)">
 <summary>
 Takes two DataTables and returns a string containing the row with the old and new values for each table.
 </summary>
 <param name="dtLeft">The first DataTable to use to compare.</param>
 <param name="dtRight">The second DataTable to use to compare.</param>
 <param name="sMiddleText">The text to place between the old and new values.</param>
 <param name="bOnlyDifferent">Only show the values that are different from each other?</param>
 <param name="sColumnPrimaryKey">The column where the unique row identifier will be found.</param>
 <returns>A comparision table for the values in the two provided DataTables.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.DataTables.GetBlankDataTable(System.Int32,System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Creates a DataTable with the provided column names and the indicated number of rows.
 </summary>
 <param name="nRows">The number of blank rows to add to the DataTable. Must be >= 1.</param>
 <param name="sColumn1">The name of the column. Defaults to "PLID" if a blank string is passed.</param>
 <param name="sColumn2">The name of the column.</param>
 <param name="sColumn3">The name of the column.</param>
 <param name="sColumn4">The name of the column.</param>
 <param name="sColumn5">The name of the column.</param>
 <returns>A DataTable with blank rows and columns with the names provided.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.DataTables.GetDataTableValues2(System.Data.DataTable,System.String,System.Int32,System.Int32,System.Int32)">
 <summary>
 Returns a string of the values in a DataTable.
 </summary>
 <param name="dtValues">The DataTable to see the values of.</param>
 <param name="sDelimeter">How to separate values.</param>
 <param name="nRowCutoff">The row to stop finding values at.</param>
 <param name="nDisplayType">The way the data is displayed.</param>
 <param name="nColumnCutOff">The number of characters to display in the column fields.</param>
 <returns>A string to display the table values.</returns>
 <remarks>Display types: 1=vertical, 2=horizontal</remarks>
</member>
<member name="M:WhitTools.DataTables.WriteDataTableValues(System.Data.DataTable,System.Int32,System.Boolean)">
 <summary>
 Provides an easy way to write a DataTable's values to the page.
 </summary>
 <param name="dtValues">The DataTable to write values to the page.</param>
 <param name="nMaxRowsToDisplay">The maximum number of rows to display. Defaults to maximum amount.</param>
 <param name="bWebTeamOnly">Should only web team members be able to see this? Also displays if the maintenance QueryString is set.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.DataTables.WriteDataTableValues(System.String,System.Int32,System.Boolean)">
 <summary>
 Provides an easy way to write a query's results to the page.
 </summary>
 <param name="sQuery">The query to fill a DataTable to write values to the page.</param>
 <param name="nMaxRowsToDisplay">Show only a certain number of rows? Replaces " * " with "TOP 500 * ". Defaults to "Show All" or -1.</param>
 <param name="bWebTeamOnly">Should only web team members be able to see this? Also displays if the maintenance QueryString is set.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.DataTables.DeleteCheckedFromTable(System.Web.UI.WebControls.Repeater@,System.String,System.String,System.String,System.String,System.String,System.Data.SqlClient.SqlConnection,System.Boolean)">
 <summary>
 Deletes rows that match the checked id from the given DataTable.
 </summary>
 <param name="rptItems">The repeater to check for DataTable rows to delete.</param>
 <param name="sTable">The full path of the sql DataTable to delete rows from.</param>
 <param name="sColumn">The column name to delete values on.</param>
 <param name="sAssignedUsername">The web team username to assign any errors to.</param>
 <param name="sIDLabelControlName">The control name of the label to get the DataTable id from.</param>
 <param name="sActionCheckboxControlName">The control name of the checkbox to check if the control should be deleted.</param>
 <param name="cnx">The SqlConnection to use.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.DataTables.CreateAdditionalPhoneColumns(System.Data.DataTable@)">
 <summary>
 Adds additional Phone columns to a DataTable.
 </summary>
 <param name="dt">The DataTable to add additional phone columns to.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.DataTables.SortDataTable(System.Data.DataTable@,System.String)">
 <summary>
 Sorts a DataTable into the provided columns. Columns must be part of the DataTable schema and separated by commas (Example: FirstName ASC, LastName DESC).
 </summary>
 <param name="dtSort">The DataTable to sort.</param>
 <param name="sSortColumns">The columns to sort the DataTable on. (Example: FirstName ASC, LastName DESC)</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.DataTables.ConvertDataTableRowColumnValue2(System.Data.DataTable@,System.String,System.String,System.String)">
 <summary>
 Converts all row values of a specific column from one value to another. To convert the value in the column
 to its GlobalEnum value, leave the sConvertFrom and sConvertTo parameters blank.
 </summary>
 <param name="dt">The DataTable to convert values for.</param>
 <param name="sColumn">The column to convert values for.</param>
 <param name="sConvertFrom">The column value to convert from. If the value in the row column matches this value then it is replaced with the sConvertTo value. If this field is left blank then the value in the column is converted to its GlobalEnum value.</param>
 <param name="sConvertTo">The column value to convert to. If the value in the row column matches sConvertFrom then it is replaced with this value. If this field is left blank then the value in the column is converted to its GlobalEnum value.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.DataTables.ConvertDataTableColumnName2(System.Data.DataTable@,System.String,System.String)">
 <summary>
 Changes the name of a DataTable column.
 </summary>
 <param name="dt">The DataTable to change the name of a column in.</param>
 <param name="sColumnToChange">The name of the column to change.</param>
 <param name="sNewColumnName">The name to change the column to.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.DataTables.ConvertDataTableColumnPosition2(System.Data.DataTable@,System.String,System.Int32)">
 <summary>
 Changes the position of the column within the column list to its new 0-index ordinal position.
 </summary>
 <param name="dt">The DataTable to change a column position for.</param>
 <param name="sColumnToMove">The name of the column to move.</param>
 <param name="nNewOrdinalPosition">The new 0-index ordinal position to place the column at. Defaults to the end of the column list.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.DataTables.DataTableHasColumn(System.String,System.String,System.String)">
 <summary>
 Checks is a column is a part of a certain DataTable.
 </summary>
 <param name="sTable">The full name of the DataTable to check. Example: Web3.adTelephone.dbo.PeopleListing</param>
 <param name="sColumn">The column to check for.</param>
 <param name="sDatabase">If the database is not provided in sTable, then it must be provided here.</param>
 <returns>Does the DataTable have the selected column?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.DataTables.DataTableHasColumn(System.Data.DataTable,System.String)">
 <summary>
 Checks is a column is a part of a certain DataTable.
 </summary>
 <param name="dt">The DataTable to check.</param>
 <param name="sColumn">The column to check for.</param>
 <returns>Does the DataTable have the selected column?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.DataTables.EmptyDataTable(System.Data.DataTable@,System.Boolean)">
 <summary>
 Removes all of the rows from the provided DataTable.
 </summary>
 <param name="dtCurrent">The DataTable object to remove rows from.</param>
 <param name="bMaintainColumnType">Maintain the data type in the columns? If false, the column data type is converted to type "String".</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.DataTables.SelectDataTableValue(System.Data.DataTable,System.String,System.String,System.String)">
 <summary>
 Searches through a DataTable to find a specific column with a specific value, and then returns the value in that row for another column.
 </summary>
 <param name="dt"></param>
 <param name="sSearchColumn"></param>
 <param name="sSearchValue"></param>
 <param name="sReturnColumn"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.DataTables.RandomizeDataTable(System.Data.DataTable,System.Int32)">
 <summary>
 Makes a copy of the DataTable, then randomizes it. Uses CopyDataTable(dt), which converts all column data types to strings.
 </summary>
 <param name="dt">The DataTable to randomize.</param>
 <param name="nMinimumRandomizingCycles">The number of times the loop will cycle through the rows randomly selecting and moving rows.</param>
 <returns>A randomized version of the DataTable.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.DataTablesSupplied.#ctor">
 <summary>
 Instantiates the new dtSupplied object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:WhitTools.DataTablesSupplied.AddRow(System.Object,System.Object,System.Object,System.Object,System.Object)">
 <summary>
 Adds a row to the dtSupplied object.
 </summary>
 <param name="sControlName"></param>
 <param name="sActionType">Options include SQLSelect, FillNumbers, FillStates, FillDates, FillTimes</param>
 <param name="sSelect"></param>
 <param name="sDataTextField"></param>
 <param name="sDataValueField"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.InsertInvoice(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String)">
 <summary>
 Inserts an invoice into the database. Returns the transaction key.
 </summary>
 <param name="sLastName">The last name of the client.</param>
 <param name="sFirstName">The first name of the client.</param>
 <param name="sMiddleName">The middle name of the client.</param>
 <param name="sPrefix">The name prefix of the client.</param>
 <param name="sEmail">The email address of the client.</param>
 <param name="sPhoneNumber">The phone number of the client.</param>
 <param name="sPhoneExt">The phone extension provided by the client.</param>
 <param name="sPhoneType">The type of phone provided by the client.</param>
 <param name="sAddress1">The address (line 1) of the client.</param>
 <param name="sAddress2">The address (line 2) of the client.</param>
 <param name="sCity">The city of the client.</param>
 <param name="sState">The state of the client.</param>
 <param name="sZipCode">The zip code of the client.</param>
 <param name="sCountry">The country of the client.</param>
 <param name="sCurrentInvoiceType">The invoice type to apply to the transaction.</param>
 <param name="sCurrentWhitworthID">The Whitworth PLID of the client.</param>
 <param name="sCurrentCouponCode">The coupon code, if any, to apply to the transaction.</param>
 <param name="bSendInvoiceEmail">Send an email with the eCommerce invoice information?</param>
 <param name="sInvoiceEmailCC">The eCommerce invoice email address to CC.</param>
 <returns>The transaction key for this invoice (i.e. the invoice id number).</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.InsertInvoice(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String)">
 <summary>
 Inserts an invoice into the database. Returns the transaction key.
 </summary>
 <param name="sLastName">The last name of the client.</param>
 <param name="sFirstName">The first name of the client.</param>
 <param name="sCurrentInvoiceType">The invoice type to apply to the transaction.</param>
 <param name="sCurrentWhitworthID">The Whitworth PLID of the client.</param>
 <param name="sCurrentCouponCode">The coupon code, if any, to apply to the transaction.</param>
 <param name="sEmail">The email address of the client.</param>
 <param name="sPhoneNumber">The phone number of the client.</param>
 <param name="sAddress1">The address (line 1) of the client.</param>
 <param name="sAddress2">The address (line 2) of the client.</param>
 <param name="sCity">The city of the client.</param>
 <param name="sState">The state of the client.</param>
 <param name="sZipCode">The zip code of the client.</param>
 <param name="sCountry">The country of the client.</param>
 <param name="bSendInvoiceEmail">Send an email with the eCommerce invoice information?</param>
 <param name="sInvoiceEmailCC">The eCommerce invoice email address to CC.</param>
 <returns>The transaction key for this invoice (i.e. the invoice id number).</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.InsertApplicationInvoice(System.Int32,System.Int32,System.String,System.String)">
 <summary>
 Inserts an invoice into the database. Returns the transaction key.
 </summary>
 <param name="nInvoiceItemType">The invoice item type to assign to the application's invoice.</param>
 <param name="nOAID">The application id to pull information from.</param>
 <param name="sCurrentWhitworthID">The Whitworth ID to assign to the eCommerce invoice.</param>
 <param name="sCurrentCouponCode">The coupon code to assign to the invoice transaction.</param>
 <returns>The invoice transaction key.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.InsertSingleItemInvoice(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String)">
 <summary>
 Inserts an invoice into the database based on a single invoice item type. Returns the transaction key.
 </summary>
 <param name="nInvoiceItemType">The invoice item type to assign to the invoice.</param>
 <param name="sLastName">The last name of the client.</param>
 <param name="sFirstName">The first name of the client.</param>
 <param name="sMiddleName">The middle name of the client.</param>
 <param name="sPrefix">The name prefix of the client.</param>
 <param name="sEmail">The email address of the client.</param>
 <param name="sPhoneNumber">The phone number of the client.</param>
 <param name="sPhoneExt">The phone extension provided by the client.</param>
 <param name="sPhoneType">The type of phone provided by the client.</param>
 <param name="sAddress1">The address (line 1) of the client.</param>
 <param name="sAddress2">The address (line 2) of the client.</param>
 <param name="sCity">The city of the client.</param>
 <param name="sState">The state of the client.</param>
 <param name="sZipCode">The zip code of the client.</param>
 <param name="sCountry">The country of the client.</param>
 <param name="sCurrentWhitworthID">The Whitworth PLID of the client.</param>
 <param name="sCurrentCouponCode">The coupon code, if any, to apply to the transaction.</param>
 <param name="bSendInvoiceEmail">Send an email with the eCommerce invoice information?</param>
 <param name="sInvoiceEmailCC">The eCommerce invoice email address to CC.</param>
 <returns>The invoice transaction key.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.InsertSingleItemInvoiceCustomAmount(System.Int32,System.Decimal,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String)">
 <summary>
 Inserts an invoice with a custom amount into the database based on a single invoice item type. 
 Returns the transaction key.
 </summary>
 <param name="nInvoiceItemType">The invoice item type to assign to the invoice. This is not the product type. Product types can have multiple item types, that is the value that should be provided here.</param>
 <param name="nAmount">The custom amount to assign to the invoice.</param>
 <param name="sLastName">The last name of the client.</param>
 <param name="sFirstName">The first name of the client.</param>
 <param name="sMiddleName">The middle name of the client.</param>
 <param name="sPrefix">The name prefix of the client.</param>
 <param name="sEmail">The email address of the client.</param>
 <param name="sPhoneNumber">The phone number of the client.</param>
 <param name="sPhoneExt">The phone extension provided by the client.</param>
 <param name="sPhoneType">The type of phone provided by the client.</param>
 <param name="sAddress1">The address (line 1) of the client.</param>
 <param name="sAddress2">The address (line 2) of the client.</param>
 <param name="sCity">The city of the client.</param>
 <param name="sState">The state of the client.</param>
 <param name="sZipCode">The zip code of the client.</param>
 <param name="sCountry">The country of the client.</param>
 <param name="sCurrentWhitworthID">The Whitworth PLID of the client.</param>
 <param name="sCurrentCouponCode">The coupon code, if any, to apply to the transaction.</param>
 <param name="bSendInvoiceEmail">Send an email with the eCommerce invoice information?</param>
 <param name="sInvoiceEmailCC">The eCommerce invoice email address to CC.</param>
 <returns>The invoice transaction key.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.GetInvoiceProductType(System.Int32)">
 <summary>
 Returns the name of the product type for a given invoice.
 </summary>
 <param name="nInvoiceType"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.GetInvoiceItemType(System.Int32)">
 <summary>
 Gets information about an invoice item type. CreditGL account numbers are saved in CreditGL1, CreditGL2, etc.
 If there is only one GL account, the column Item_GL_Credit is also included to allow old functions to work correctly.
 </summary>
 <param name="nItemTypeID">The item type id to get information for.</param>
 <returns>Information about the specified invoice item type.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.CalculatePageTotal(System.String,System.String,System.String,System.String@,System.Web.UI.WebControls.Label@,System.Web.UI.WebControls.Panel@)">
 <summary>
 Calls the InsertItems method with instructions only to calculate the total and not to record an invoice at this time.
 </summary>
 <param name="sCurrentInvoiceType"></param>
 <param name="sCurrentWhitworthID"></param>
 <param name="sCurrentCouponCode"></param>
 <param name="sCurrentEmailBody"></param>
 <param name="lblCurrentCodeEntered"></param>
 <param name="pnlCurrentCodeEntered"></param>
 <returns>The eCommerce total on the page.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.StoreGlobalValues(System.String,System.String,System.String,System.Web.UI.WebControls.Label@,System.Web.UI.WebControls.Panel@,System.Boolean,System.Web.UI.WebControls.Panel@,System.Int32)">
 <summary>
 Stores the invoice item types associated with the provided invoice type in the dtOptions variable.
 </summary>
 <param name="sCurrentInvoiceType"></param>
 <param name="sCurrentWhitworthID"></param>
 <param name="sCurrentCouponCode"></param>
 <param name="lblCurrentCodeEntered"></param>
 <param name="pnlCurrentCodeEntered"></param>
 <param name="bCurrentCalcOnly"></param>
 <param name="pnlCurrentWhitworthID"></param>
 <param name="nTransactionKey">If provided, the transaction key will be overidden.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.StoreGlobalValuesViaItemType(System.Int32,System.String,System.String,System.Web.UI.WebControls.Label@,System.Web.UI.WebControls.Panel@,System.Boolean,System.Web.UI.WebControls.Panel@,System.Int32)">
 <summary>
 Stores a single invoice item type in the dtOptions variable.
 </summary>
 <param name="nInvoiceItemType"></param>
 <param name="sCurrentWhitworthID"></param>
 <param name="sCurrentCouponCode"></param>
 <param name="lblCurrentCodeEntered"></param>
 <param name="pnlCurrentCodeEntered"></param>
 <param name="bCurrentCalcOnly"></param>
 <param name="pnlCurrentWhitworthID">
 <param name="nTransactionKey">If provided, the transaction key will be overidden.</param></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.FindListReference(System.Web.UI.Control@,System.String,System.Decimal)">
 <summary>
 
 </summary>
 <param name="PassedControl"></param>
 <param name="sItemReference"></param>
 <param name="nItemAmount"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.CheckListReference(System.Web.UI.WebControls.ListControl,System.String,System.Decimal)">
 <summary>
 
 </summary>
 <param name="CurrentControl"></param>
 <param name="sItemReference"></param>
 <param name="nItemAmount"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.InsertItem_ListControl(System.Int32,System.Decimal)">
 <summary>
 
 </summary>
 <param name="nItemID"></param>
 <param name="nItemAmount"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.GetItemTypeReference(System.Data.DataRow@)">
 <summary>
 Generates a unique code to match to an invoice item type to values of listitems found on the page.
 </summary>
 <param name="CurrentRow"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.InsertItem(System.Int32)">
 <summary>
 Inserts a single invoice item into the database.
 </summary>
 <returns>The final amount of the transaction.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.InsertItemCustomAmount(System.Int32,System.Decimal,System.Int32)">
 <summary>
 Inserts a single invoice item into the database with a custom amount. Any coupon discounts should be added
 before the final amount is provided in the parameters. Returns the transaction amount.
 </summary>
 <param name="nItemType">The invoice item type to assign.</param>
 <param name="nAmount">The custom amount to charge.</param>
 <param name="nTransactionKey">The transaction key to assign the item to. Defaults to the globally stored value.</param>
 <returns>The final amount of the transaction. The nAmount parameter multiplied by the nQuantity parameter.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.InsertItem_RadioButton(System.Object@,System.Int32@,System.String)">
 <summary>
 Replaces InsertItem_Radiobutton
 Inserts an e-commerce item associated with a Radiobutton control
 </summary>
 <param name="CurrentContainer"></param>
 <param name="nCounter"></param> 
 <param name="sControlName"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.InsertItem_RadioButtonList(System.Object@,System.Int32@,System.String)">
 <summary>
 Replaces InsertItem_RadioButtonList
 Inserts an e-commerce item associated with a RadiobuttonList control
 </summary>
 <param name="CurrentContainer"></param>
 <param name="nCounter"></param>
 <param name="sControlName"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.InsertItem_CheckBoxList(System.Object@,System.Int32@,System.String)">
 <summary>
 Replaces InsertItem_CheckBoxList
 Inserts an e-commerce item associated with a CheckBoxList control
 </summary>
 <param name="CurrentContainer"></param>
 <param name="nCounter"></param>
 <param name="sControlName"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.InsertItem_CheckBox(System.Object@,System.Int32@,System.String)">
 <summary>
 Replaces InsertItem_CheckBox
 Inserts an e-commerce item associated with a Checkbox control
 </summary>
 <param name="CurrentContainer"></param>
 <param name="nCounter"></param>
 <param name="sControlName"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.InsertItem_TextBox(System.Object@,System.Int32@,System.String)">
 <summary>
 Replaces InsertItem_Textbox
 Inserts an e-commerce item associated with a Textbox control
 </summary>
 <param name="CurrentContainer"></param>
 <param name="nCounter"></param>
 <param name="sControlName"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.InsertItem_Label(System.Object@,System.Int32@,System.String)">
 <summary>
 Replaces InsertItem_Label
 Inserts an e-commerce item associated with a Label control
 </summary>
 <param name="CurrentContainer"></param>
 <param name="nCounter"></param>
 <param name="sControlName"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.InsertItem_DropDownList(System.Object@,System.Int32@,System.String,System.Int32,System.Decimal)">
 <summary>
 Replaces InsertItem_Dropdownlist
 Inserts an e-commerce item associated with a Label control
 </summary>
 <param name="CurrentContainer"></param>
 <param name="nCounter"></param>
 <param name="sControlName"></param>
 <param name="nItemID"></param>
 <param name="nItemAmount"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.GetEmailItems">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.RecordItem(System.Int32,System.Decimal,System.Decimal)">
 <summary>
 Replaces RecordItem
 </summary>
 <param name="nID"></param>
 <param name="nOriginalAmount"></param>
 <param name="nUpdatedAmount"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.AddItemToEmail(System.Int32,System.Decimal)">
 <summary>
 
 </summary>
 <param name="nItemID"></param>
 <param name="nItemAmount"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.FindTopItems(System.Web.UI.Control)">
 <summary>
 Finds the top controls of a page.
 </summary>
 <param name="ctrlCurrent"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.FindRepeaterItems(System.Web.UI.WebControls.Repeater)">
 <summary>
 Replaces FindRepeaterItems
 Finds the controls within a repeater control.
 </summary>
 <param name="rptCurrent"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.AddCouponToEmail(System.Int32,System.Decimal)">
 <summary>
 
 </summary>
 <param name="nItemTypeID"></param>
 <param name="nAmount"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.CheckCouponCode(System.Int32,System.Decimal)">
 <summary>
 Replaces multiple CheckCouponCode functions
 </summary>
 <param name="nItemType"></param>
 <param name="nAmount"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.SetCouponDataTable(System.Int32,System.Int32)">
 <summary>
 Replaces GetCouponDataTable, GetCouponDataTableByItemType,GetCouponDataTableByCouponTypeID
 Retrieves coupon codes based on passed parameters, returns them in a DataTable.
 </summary>
 <param name="nItemType"></param>
 <param name="nCouponTypeID"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.CheckCodeEntered(System.Web.UI.WebControls.Label@,System.Web.UI.WebControls.Panel@,System.Web.UI.WebControls.Panel@)">
 <summary>
 
 </summary>
 <param name="lblCurrentCodeEntered"></param>
 <param name="pnlCurrentCodeEntered"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.GetRedirectURL(System.String,System.Boolean,System.String)">
 <summary>
 Returns the e-payment redirect URL by reading invoice information from the database based on the transaction key.
 </summary>
 <param name="sInvoiceID">The invoice ID.</param>
 <param name="bShowMustBePaidToBeProcessed">Does the invoice need to be paid for a registration to be processed?</param>
 <param name="sFrom">The "From" reference to substitute for the current page.</param>
 <returns>A url string to redirect the user to in order for them to pay their bill.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.GetInvoiceItemTypeAmount(System.Int32)">
 <summary>
 Gets the amount of an invoice item type.
 </summary>
 <param name="nItemTypeID">The item type id to get information for.</param>
 <returns>Amount of the specified invoice item type. Returns N_ERROR (-255) on error, which means the id does not exist.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.GetInvoiceItemTypeGLAccount(System.Int32)">
 <summary>
 Gets the GL Account (Credit) of an invoice item type.
 </summary>
 <param name="nItemTypeID">The item type id to get GL account for.</param>
 <returns>GL Account (Credit) of the specified invoice item type. Returns S_ERROR on error, which means the id does not exist.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.UpdateInvoiceItemTypeAmount(System.Int32,System.Double)">
 <summary>
 Sets the amount of an invoice item type.
 </summary>
 <param name="nItemTypeID">The item type id to update the amount for.</param>
 <param name="nAmount">The amount to assign to the item type.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.InsertSetNumber(System.Int32)">
 <summary>
 Inserts a Set_Number into the eCommerce database for the provided invoice. First checks if one already exists.
 </summary>
 <param name="nInvoice">The invoice to create or retrieve a set number for.</param>
 <returns>The set number for this invoice.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.InsertInvoiceItem(System.Int32,System.Int32,System.Decimal,System.Int32,System.Decimal,System.DateTime,System.String,System.Boolean,System.DateTime,System.Boolean,System.Boolean,System.Int32,System.DateTime,System.Boolean,System.Decimal,System.Decimal,System.Decimal)">
 <summary>
 Inserts a new Invoice Item attached to the provided invoice.
 </summary>
 <param name="nInvoice">The invoice to insert an item for.</param>
 <param name="nItemType">The type of item to insert.</param>
 <param name="nCost">The cost of the individual invoice item. If zero or less, the item type amount will be provided.</param>
 <param name="nQuantity">The number of items to add. Defaults to one.</param>
 <param name="nTotal">The total cost of all items. If zero or less, the value will be nCost * nQuantity.</param>
 <param name="datePurchase">The date the purchase was made.</param>
 <param name="sCouponCode">The coupon code associated with this item.</param>
 <param name="bActive">Is the item active?</param>
 <param name="dateProcess">The date the invoice item was processed. If "Nothing" then it will insert the creation date of the invoice.</param>
 <param name="bImported"></param>
 <param name="bCancel"></param>
 <param name="nCancelSet"></param>
 <param name="dateCancel"></param>
 <param name="bCancelImport"></param>
 <param name="nSalesTax"></param>
 <param name="nBOGoodsTax"></param>
 <param name="nBOServicesTax"></param>
 <returns>The invoice item ID created by this transaction.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.InsertInvoiceItem(System.Int32,System.Int32,System.Int32,System.String,System.Decimal,System.Decimal,System.Decimal)">
 <summary>
 Inserts a new Invoice Item attached to the provided invoice.
 </summary>
 <param name="nInvoice">The invoice to insert an item for.</param>
 <param name="nItemType">The invoice item type to insert.</param>
 <param name="nQuantity">The number of items to add.</param>
 <param name="sCouponCode">The coupon code associated with this item.</param>
 <param name="nSalesTax"></param>
 <param name="nBOGoodsTax"></param>
 <param name="nBOServicesTax"></param>
 <returns>The invoice item ID created by this transaction.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.InsertInvoiceItemCustomAmount(System.Int32,System.Int32,System.Decimal,System.Int32)">
 <summary>
 Inserts a new Invoice Item using a custom amount.
 </summary>
 <param name="nInvoice">The invoice to insert an item for.</param>
 <param name="nItemType">The type of item to insert.</param>
 <param name="nCost">The cost of the individual invoice item. If zero or less, the default item type amount will be provided.</param>
 <param name="nQuantity">The number of items to add. Defaults to one.</param>
 <returns>The invoice item ID.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.InsertPaymentItem(System.Int32,System.Decimal,System.DateTime,System.Int32,System.String)">
 <summary>
 Inserts a payment item into the database.
 </summary>
 <param name="nInvoice">The invoice to insert a payment item for.</param>
 <param name="nTotal">The total amount of the payment.</param>
 <param name="dateData">The date this data was entered.</param>
 <param name="nType">The type of payment being made.</param>
 <param name="sConfirmationNumber">The confirmation # associated with this payment.</param>
 <returns>The new payment item id.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.UpdatePaymentItem(System.Int32,System.Int32)">
 <summary>
 Updates a Web Payment item total for an invoice. If the Web Payment does not exist it is created.
 </summary>
 <param name="nInvoice">The invoice to update/create a Web Payment for.</param>
 <param name="nType">The type of payment being made. Only relevant when a new payment item needs to be created.</param>
 <returns>Was the Web Payment updated/created successfully?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.AddPaymentLinkMessage(System.String)">
 <summary>
 Creates a message providing a link for a user to access their eCommerce payment on the bank's website.
 </summary>
 <param name="sRedirect">The url that will direct the user to complete their eCommerce transaction.</param>
 <returns>A message containing a link to finish an eCommerce transaction.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.AddPaymentLinkMessage(System.Int32)">
 <summary>
 Creates a message providing a link for a user to access their eCommerce payment on the bank's website.
 </summary>
 <param name="nInvoice">The invoice transaction number to get a redirect string for.</param>
 <returns>A message containing a link to finish an eCommerce transaction.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.CreatePaymentLink(System.Int32,System.String,System.String)">
 <summary>
 Creates a url to redirect the user to the eCommerce bank page for their invoice.
 </summary>
 <param name="nInvoice">The invoice transaction key to get a url for.</param>
 <param name="sLinkText">The text to be displayed inside the anchor tag.</param>
 <param name="sBillerPayorId">The Biller Payor ID the user will need.</param>
 <returns>An anchor tag to redirect the user to the eCommerce bank page for their invoice.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.FillInvoiceTypes(System.Web.UI.WebControls.DropDownList@,System.Boolean)">
 <summary>
 Fills a control with invoice types.
 </summary>
 <param name="ddlInvoiceTypes">The control to fill.</param>
 <param name="bIncludeSelect">Include a "Please Select" option?</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.FillCoupons(System.Int32,System.Web.UI.WebControls.DropDownList@)">
 <summary>
 Fills a control with coupon codes associated with an invoice item type.
 </summary>
 <param name="nInvoiceItemType">The Invoice Item Type ID to find coupons for. Note: This is NOT the invoice type.</param>
 <param name="ddlCoupons">The control to fill.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.LoadInitialEcommerceData(System.Web.UI.WebControls.Label@,System.Web.UI.WebControls.Label@,System.Web.UI.WebControls.Label@)">
 <summary>
 Assigns necessary data variables at runtime, including date of the transaction and payor ID.
 </summary>
 <param name="lblBillerPayorID"></param>
 <param name="lblPayorID"></param>
 <param name="lblDateSubmitted"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.LoadInvoiceVariables(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
 <summary>
 Searches the page passed to it for controls related to invoice variables, in order to automatically gather
 the information needed for invoice creation. Keys in on control names. Values passed into the parameters
 are reset to empty strings.
 </summary>
 <param name="sLastName"></param>
 <param name="sFirstName"></param>
 <param name="sMiddleName"></param>
 <param name="sPrefix"></param>
 <param name="sEmail"></param>
 <param name="sPhoneNumber"></param>
 <param name="sPhoneExt"></param>
 <param name="sPhoneType"></param>
 <param name="sAddress1"></param>
 <param name="sAddress2"></param>
 <param name="sCity"></param>
 <param name="sState"></param>
 <param name="sZipCode"></param>
 <param name="sCountry"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.LoadInvoiceVariables(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.Web.UI.WebControls.Panel@,System.String@)">
 <summary>
 
 </summary>
 <param name="sLastName"></param>
 <param name="sFirstName"></param>
 <param name="sMiddleName"></param>
 <param name="sPrefix"></param>
 <param name="sEmail"></param>
 <param name="sPhoneNumber"></param>
 <param name="sPhoneExt"></param>
 <param name="sPhoneType"></param>
 <param name="sAddress1"></param>
 <param name="sAddress2"></param>
 <param name="sCity"></param>
 <param name="sState"></param>
 <param name="sZipCode"></param>
 <param name="sCountry"></param>
 <param name="pnlCurrent"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.GetNewBillerPayorID">
 <summary>
 Generates a new BillerPayorID value.
 </summary>
 <returns>A new BillerPayorID value.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.InsertProductSupervisor(System.String,System.Int32)">
 <summary>
 Inserts a new product supervisor.
 </summary>
 <param name="sSupervisorPLID">The PLID of the supervisor to add.</param>
 <param name="nProductID">The invoice product type to add a supervisor to.</param>
 <returns>Was the supervisor successfully added?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.GetInvoiceTypeFromItemType(System.Int32)">
 <summary>
 Gets the invoice type associated with the provided item type.
 </summary>
 <param name="nItemType">The invoice item type to get the invoice type for.</param>
 <returns>The invoice type associated with the provided item type.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.GetCreditGLs(System.Int32)">
 <summary>
 Gets the list of credit GL's associated with an invoice item type.
 </summary>
 <param name="nItemType"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.RedirectUserToEcommercePaymentPage(System.String,System.Boolean,System.Boolean,System.Boolean,System.Double,System.Web.HttpContextBase)">
 <summary>
 Redirects the user to the eCommerce payment page.
 </summary>
 <param name="sInvoiceID">The invoice ID the user needs to pay.</param>
 <param name="bShowMustBePaidToBeProcessed">Display text that tells the user that their submission cannot be processed until this invoice is paid?</param>
 <param name="bNewWindow">Open the eCommerce page in a new window?</param>
 <param name="bAfterSetTime">Redirect the user after a set amount of time? If bNewWindow is true, this parameter is irrelevant.</param>
 <param name="nSeconds">The number of seconds to wait before redirecting when bAfterSetTime is true.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.CheckIfBankIsClosed(System.Int32)">
 <summary>
 Checks if U.S. Bank's website is down for maintenance. If so, the user is redirected to an alert page.
 </summary>
 <param name="nInvoiceProductType">The eCommerce Product Type relevant to the transaction. Provides more detailed information to the user when provided.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.BankIsOpen">
 <summary>
 Returns if U.S. Bank's website is up and running (True), or is down for maintenance (False).
 </summary>
 <returns>Is U.S. Bank's website running?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.BankIsClosed">
 <summary>
 Returns if U.S. Bank's website is down for maintenance (False), or is up and running (True).
 </summary>
 <returns>Is U.S. Bank's website down for maintenance?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.SetBankIsOpen">
 <summary>
 Sets U.S. Bank's website as up and running.
 </summary>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.SetBankIsClosed">
 <summary>
 Sets U.S. Bank's website as down for maintenance.
 </summary>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.SendEcommerceInvoiceEmail(System.Int32,System.String,System.String)">
 <summary>
 Sends an email with a link to the eCommerce banking site for the provided invoice.
 </summary>
 <param name="nInvoiceID">The invoice to send the link for.</param>
 <param name="sEmail">The email address to send the link to.</param>
 <param name="sCC">The email address to CC.</param>
 <returns>Was the email sent successfully?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.InvoiceContainsGLCharges(System.String)">
 <summary>
 Used to check if a given invoice contains charges that need to be paid for via credit card.  The e-commerce setup as
 it is currently expects that there will not be mixing of credit card charges and student account charges on the same invoice.
 </summary>
 <param name="nInvoice"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.InsertItemTypeGL(System.Int32,System.String,System.Int32,System.String)">
 <summary>
 Adds a GL account number to an Item Type. If there is an error during the process, an Alert() popup will be displayed along with the function returning False.
 </summary>
 <param name="nItemTypeID">The invoice item type to add the GL account number to.</param>
 <param name="sGL">The GL account number to add to the item type.</param>
 <param name="nChargeAmount">The amount to charge for this GL account number.</param>
 <param name="sDivisionType">The division type to assign to this GL account number. (PERCENT/ABSOLUTE)</param>
 <returns>Was the GL successfully added to the item type?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.UpdateItemTypeGL(System.Int32,System.String,System.String,System.Int32,System.String)">
 <summary>
 Updates a GL account number attached to an Item Type. If no sGLToReplace value is provided, the sGLToAdd parameter will still be added.
 If there is an error during the process, an Alert() popup will be displayed along with the function returning False.
 </summary>
 <param name="nItemTypeID">The invoice item type to add the GL account number to.</param>
 <param name="sGLToAdd">The GL account number to add to the item type.</param>
 <param name="sGLToReplace">The GL account number to remove from the item type. If left blank the sGLToAdd parameter will still be added.</param>
 <param name="nChargeAmount">The amount to charge for this GL account number.</param>
 <param name="sDivisionType">The division type to assign to this GL account number. (PERCENT/ABSOLUTE)</param>
 <returns>Was the GL successfully added? Also, was the GL successfully removed (if applicable)?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerce.ReplaceAllItemTypeGLs(System.Int32,System.String,System.Int32,System.String)">
 <summary>
 Removes all GL account numbers attached to an Item Type and adds the one provided in the parameters.
 If there is an error during the process, an Alert() popup will be displayed along with the function returning False.
 </summary>
 <param name="nItemTypeID">The invoice item type to add the GL account number to.</param>
 <param name="sGLToAdd">The GL account number to add to the item type.</param>
 <param name="nChargeAmount">The amount to charge for this GL account number.</param>
 <param name="sDivisionType">The division type to assign to this GL account number. (PERCENT/ABSOLUTE)</param>
 <returns>Was the GL successfully added? Also, were all other GLs successfully removed (if applicable)?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerceCoupons.CheckCouponCode(System.Int32,System.Decimal,System.String,System.Data.DataTable)">
 <summary>
 Gets 
 </summary>
 <param name="nItemType"></param>
 <param name="nAmount"></param>
 <param name="sWhitworthID"></param>
 <param name="dtCoupon"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerceCoupons.CheckCouponCode(System.Int32,System.Decimal,System.String,System.String,System.Int32@)">
 <summary>
 Gets the amount of a transaction after the coupon code has been applied.
 </summary>
 <param name="nItemType">The InvoiceItemID to reference.</param>
 <param name="nAmount">The amount being charged before the coupon is applied.</param>
 <param name="sCouponCode">The coupon code to apply.</param>
 <param name="sWhitworthID">The WhitworthID of the purchaser.</param>
 <param name="nUseCount">The number of uses the provided WhitworthID has used.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerceCoupons.CouponAllowed(System.String,System.Int32,System.String,System.Int32)">
 <summary>
 Checks if coupons are allowed for the provided coupon code, item type, Whitworth user, and number of uses.
 </summary>
 <param name="sCouponCode">The coupon code being requested.</param>
 <param name="nItemType">The Item Type ID to be used.</param>
 <param name="sWhitworthID">The Whitworth ID of the requestor.</param>
 <param name="nUseCount">The number of coupon uses (per WhitworthID) that are needed to fulfill the request.</param>
 <returns>S_YES global enum if the coupon exists and will not exceed the maximum number of uses, N_NO global enum if not.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerceStatusChecks.GetInvoicePaid(System.Object)">
 <summary>
 Returns whether or not the invoice has been fully paid. Returns S_GlobalEnum values. S_YES/S_NO/S_NOT_APPLICABLE
 </summary>
 <param name="nInvoice">The invoice to check.</param>
 <returns>Returns S_YES if the invoice has been paid, S_NO if the invoice has not been paid. Returns S_NOT_APPLICABLE if the invoice is null.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerceStatusChecks.GetInvoiceAmount(System.Object)">
 <summary>
 Returns the original amount of the invoice in the form of ($50.00). 
 </summary>
 <param name="nInvoice">The invoice to check.</param>
 <returns>The original amount of the invoice in the form of ($50.00).</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerceStatusChecks.GetInvoiceAmountPaid(System.Object)">
 <summary>
 Returns how much of the invoice has been paid in the form of ($50.00).
 </summary>
 <param name="nInvoice">The invoice to check.</param>
 <returns>The amount paid into the invoice.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerceStatusChecks.GetAmountPaid(System.Object)">
 <summary>
 Returns how much of the invoice has been paid in the form of ($50.00).
 </summary>
 <param name="nInvoice">The invoice to check.</param>
 <returns>The amount paid into the invoice.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerceStatusChecks.GetInvoiceAmountOwed(System.Object)">
 <summary>
 Returns how much is still owed on an invoice in the form of ($50.00).
 </summary>
 <param name="nInvoice">The invoice to check.</param>
 <returns>The amount still owed on the invoice.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerceStatusChecks.GetAmountOwed(System.Object)">
 <summary>
 Returns how much is still owed on an invoice in the form of ($50.00).
 </summary>
 <param name="nInvoice">The invoice to check.</param>
 <returns>The amount still owed on the invoice.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerceStatusChecks.GetInvoiceProcessed(System.DateTime)">
 <summary>
 Returns if the invoice has been processed. Returns S_ GlobelEnum values. S_YES/S_NO
 </summary>
 <param name="dateProcessed">The date the invoice was processed.</param>
 <returns>Was the invoice processed?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerceStatusChecks.GetItemAmountPaid(System.Decimal,System.String)">
 <summary>
 
 </summary>
 <param name="nCost"></param>
 <param name="sProcessed"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerceStatusChecks.GetItemAmountPaid(System.Decimal,System.DateTime)">
 <summary>
 
 </summary>
 <param name="nCost"></param>
 <param name="dateProcessed"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerceStatusChecks.GetConfirmationNumber(System.Int32)">
 <summary>
 Retrieves the confirmation number for an invoice. Returns S_NONE global enum if the confirmation number cannot be found.
 </summary>
 <param name="nInvoiceID">The invoice to get the confirmation number for.</param>
 <returns>The confirmation number for the transaction. Returns S_NONE global enum if the confirmation number cannot be found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerceStatusChecks.GetInvoice(System.Int32)">
 <summary>
 Retrieves information about an invoice and puts it into a DataTable.
 </summary>
 <param name="nInvoiceID">The invoice to retrieve information for.</param>
 <returns>Information about the invoice.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerceStatusChecks.GetInvoiceAmountDec(System.Object)">
 <summary>
 Returns the original amount of the invoice in decimal form. The formula used is GetAmountOwed(nInvoice) + GetAmountPaid(nInvoice).
 </summary>
 <param name="nInvoice">The invoice to check.</param>
 <returns>The original amount of the invoice in decimal form.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerceStatusChecks.GetInvoiceAmountOwedDec(System.Object)">
 <summary>
 Returns the amount of the invoice still owed, in decimal form.
 </summary>
 <param name="nInvoice">The invoice to check.</param>
 <returns>The amount of the invoice still owed, in decimal form.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.eCommerceStatusChecks.GetInvoiceAmountPaidDec(System.Object)">
 <summary>
 Returns the amount of the invoice already paid, in decimal form.
 </summary>
 <param name="nInvoice">The invoice to check.</param>
 <returns>The amount of the invoice already paid, in decimal form.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Email.SendEmail(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
 <summary>
 Sends an email message according to the parameters passed in.
 </summary>
 <param name="sTo">The email address to send the email to.</param>
 <param name="sSubject">The message subject line.</param>
 <param name="sBody">The message body text. Sends as HTML code.</param>
 <param name="sFrom">The email address to send the email from.</param>
 <param name="sCC">The carbon-copy recipients of the email message.</param>
 <param name="sBCC">The blind-carbon-copy recipients of the email message.</param>
 <param name="nPriority">The priority of the email. (0 - Normal, 1 - Low, 2 - High)</param>
 <param name="nSmtpMethod">The SmtpClient method to apply to sending the email. Defaults to the value provided by GetSmtpClientIntPrimary().</param>
 <returns>Was the email sent successfully?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Email.SendNewEmail(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Int32,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Sends a mail message according to the parameters passed in.
 </summary>
 <param name="sTo">The email address(es) to send to. Should be ; delimited.</param>
 <param name="sBody">The message to send.</param>
 <param name="sFrom">The sender's email address. Default: noreply@whitworth.edu.</param>
 <param name="sSubject">The subject of the message. Default: Blank</param>
 <param name="sCC">The email address(es) that should receive a carbon copy (CC) of the email.</param>
 <param name="bBodyIsHtml">Is the body in html format?</param>
 <param name="sBCC">The email address(es) that should receive a blind carbon copy (BCC) of the email.</param>
 <param name="nPriority">The priority of the email. (0 - Normal, 1 - Low, 2 - High)</param>
 <param name="bBccWebTeam">
 Include a BCC message to the currently logged-in web team member? 
 Intended for tracking emails generated by pages the team member is currently working on. Will not 
 send multiple emails if the team member is already in the email list.
 </param>
 <param name="bIncludeNotification">Include the reply-to notification at the top and bottom of the message? If set to false, this overrides the custom setting within the function.</param>
 <param name="nSmtpMethod">The SmtpClient method to apply to sending the email. Defaults to the value provided by GetSmtpClientIntPrimary().</param>
 <returns>Was the message sent successfully?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Email.SendNewEmail(System.Net.Mail.MailAddress,System.Net.Mail.MailAddress,System.String,System.String,System.Boolean,System.Int32)">
 <summary>
 Sends an email message.
 </summary>
 <param name="maFrom">The email address the message is being sent from.</param>
 <param name="maTo">The email address the message is being sent to.</param>
 <param name="sBody">The body of the message.</param>
 <param name="sSubject">The email subject line.</param>
 <param name="bBodyIsHtml">Is the body written in html?</param>
 <param name="nSmtpMethod">The SmtpClient method to apply to sending the email. Defaults to the value provided by GetSmtpClientIntPrimary().</param>
 <returns>If the email was sent successfully (true) or not (false).</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Email.CreateMailAnchorTag(System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Creates a MailTo html anchor tag with the provided parameters.
 </summary>
 <param name="sEmailAddress">The email address to mail to.</param>
 <param name="sVisibleText">The text that the user sees.</param>
 <param name="sSubject">The email subject line.</param>
 <param name="sMessageBody">The email message body. HTML break tag will be translated to a new line character. Other text (even HTML code) will show up as text, not as code within the email body.</param>
 <param name="sCC">The email carbon copy recipients.</param>
 <returns>A formatted html anchor tag to send emails from.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Email.CreateEmailAnchorTag(System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Creates a MailTo html anchor tag with the provided parameters.
 </summary>
 <param name="sEmailAddress">The email address to mail to.</param>
 <param name="sVisibleText">The text that the user sees.</param>
 <param name="sSubject">The email subject line.</param>
 <param name="sMessageBody">The email message body. HTML break tag will be translated to a new line character.</param>
 <param name="sCC">The email carbon copy recipients.</param>
 <returns>A formatted html anchor tag to send emails from.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Email.SendInvoicePaymentEmail(System.String,System.String,System.Int32,System.String,System.String)">
 <summary>
 Sends an email to assist a user in paying their e-commerce transaction.
 </summary>
 <param name="sName">The name of the person receiving the email.</param>
 <param name="sEmail">The email address to receive the message.</param>
 <param name="nInvoice">The invoice number.</param>
 <param name="sSubject">The subject of the email.</param>
 <param name="sBCC">The email address(es) that should also receive the email.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Email.GetMailFile(System.String)">
 <summary>
 Opens an ASCII mail template and returns it in string form.
 </summary>
 <param name="sFileName"></param>
 <returns></returns>
 <remarks>
 Used for sending emails based on templates.
 
 Example syntax:
 
 Dim sExampleName As String
 sExampleName = "Example Name"
 Dim msgUser As New MailMessage
 msgUser.To = "example@email.com"
 msgUser.From = "example2@email.com"
 msgUser.Subject = "Example Subject"
 msgUser.BodyFormat = MailFormat.Html
 msgUser.UrlContentBase = "http://www.whitworth.edu/"
 msgUser.UrlContentLocation = "Templates/EMail/images/"
 Dim EMailTemplatePath = FILE_PATH_WEB1 + "Templates\EMail\ExampleTemplate.eml"
 Dim sBody As String = GetMailFile(EMailTemplatePath)
 Dim Name As String = txtFirstName.Text
 sBody = MailFieldSubstitute(sBody, "(First Name)", sExampleName)
 msgUser.Body = sBody
 SmtpMail.Send(msgUser)
 </remarks>
</member>
<member name="M:WhitTools.Email.MailFieldSubstitute(System.String,System.String,System.String)">
 <summary>
 Substitutes for a field in a mail message string.
 </summary>
 <param name="sMailMsg">The mail message string.</param>
 <param name="sField">The variable to replace with sValue.</param>
 <param name="sValue">The value to replace sField with.</param>
 <returns>A new mail message with the replaced values.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Email.ConvertInvalidEmails(System.String)">
 <summary>
 Checks the provided email address for invalid entries and returns a valid one.
 </summary>
 <param name="sEmail">The email address to check for invalid entries.</param>
 <returns>A valid version of the email address.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Email.GetSmtpClient(System.Int32)">
 <summary>
 Returns a connection to the SmtpClient method provided in the parameter. Defaults to the primary SmtpClient.
 </summary>
 <param name="nMethod">The SmtpClient type to return.</param>
 <returns>A connection to the selected SmtpClient.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Email.SetSmtpClientPrimary(System.Int32)">
 <summary>
 Sets the primary SmtpClient to use system-wide.
 </summary>
 <param name="nMethod">The SmtpClient method to use. 1=10.21.40.117, 0=exch-a.whitworth.edu</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Email.GetSmtpClientPrimary">
 <summary>
 Gets the primary SmtpClient used system-wide.
 </summary>
 <returns>The primary SmtpClient used system-wide.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Email.GetSmtpClientIntPrimary">
 <summary>
 Gets the primary SmtpClient integer value used system-wide.
 </summary>
 <returns>The primary SmtpClient integer value used system-wide.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Email.SetSmtpClientSecondary(System.Int32)">
 <summary>
 Sets the secondary SmtpClient to use system-wide.
 </summary>
 <param name="nMethod">The SmtpClient method to use.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Email.GetSmtpClientSecondary">
 <summary>
 Gets the secondary SmtpClient used system-wide.
 </summary>
 <returns>The secondary SmtpClient used system-wide.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Email.GetSmtpClientIntSecondary">
 <summary>
 Gets the secondary SmtpClient integer value used system-wide.
 </summary>
 <returns>The secondary SmtpClient integer value used system-wide.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Email.SetSmtpClientTertiary(System.Int32)">
 <summary>
 Sets the tertiary SmtpClient to use system-wide.
 </summary>
 <param name="nMethod">The SmtpClient method to use.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Email.GetSmtpClientTertiary">
 <summary>
 Gets the tertiary SmtpClient used system-wide.
 </summary>
 <returns>The tertiary SmtpClient used system-wide.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Email.GetSmtpClientIntTertiary">
 <summary>
 Gets the tertiary SmtpClient integer value used system-wide.
 </summary>
 <returns>The tertiary SmtpClient integer value used system-wide.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Email.AddAddressToBlacklist(System.String,System.Int32)">
 <summary>
 Adds the email address to the list where blackmailed addresses are tracked.
 </summary>
 <param name="sEmail">The email to check.</param>
 <param name="nBlacklisted">Should the address be blacklisted? Defaults to "No".</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Email.AddEmailToTracking(System.String)">
 <summary>
 Adds the email address to the database where all email addresses used in Whitworth systems are tracked.
 </summary>
 <param name="sEmail">The email to track.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Email.RemoveUnusedTemplateFields(System.String@)">
 <summary>
 
 </summary>
 <param name="sTarget"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmailTemplate.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
 <summary>
 Sets up the initial variables for the message, including from address, to address, template file name.
 </summary>
 <param name="sTo"></param>
 <param name="sFrom"></param>
 <param name="sSubj"></param>
 <param name="sTemplate"></param>
 <param name="sCCList"></param>
 <param name="sBCCList"></param>
 <param name="nPriorityLevel"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmailTemplate.#ctor">
 <summary>
 
 </summary>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmailTemplate.SetUpSubstitutionsTable">
 <summary>
 Defines the substitution table with the appropriate columns.
 </summary>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmailTemplate.AddSubstitution(System.String,System.String)">
 <summary>
 Adds a substitution to the list for this email.  Placeholder names will be searched for
 within the email template and replaced with the corresponding substitution value.  The format of a 
 placeholder within templates is %(Placeholder Name)%, but the methods take this into account and only
 the actual placeholder name should be added to the substitution list.
 </summary>
 <param name="sPlaceHolderName"></param>
 <param name="sSubstitution"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmailTemplate.RemoveSubstitution(System.Int32)">
 <summary>
 
 </summary>
 <param name="nIndex"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmailTemplate.ClearSubstitutions">
 <summary>
 
 </summary>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmailTemplate.SendEmail">
 <summary>
 
 </summary>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmploymentApplication.CheckUnderMaintenance(System.Boolean)">
 <summary>
 
 </summary>
 <param name="bThisPageOnly"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmploymentApplication.IsAdmin">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmploymentApplication.CheckFacultyPosition(System.String)">
 <summary>
 
 </summary>
 <param name="sOpeningID"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmploymentApplication.IsFacultyApplication">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmploymentApplication.IsStaffApplication">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmploymentApplication.CheckPreviousApplication(System.String,System.Web.UI.WebControls.Panel@)">
 <summary>
 
 </summary>
 <param name="sEmail"></param>
 <param name="pnlPreviousApplication"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmploymentApplication.RedirectToNextSection">
 <summary>
 
 </summary>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmploymentApplication.GetSectionType(System.String)">
 <summary>
 
 </summary>
 <param name="sPageName"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmploymentApplication.MarkSection(System.Int32,System.String)">
 <summary>
 
 </summary>
 <param name="nComplete"></param>
 <param name="sSectionType"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmploymentApplication.GetSectionData">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmploymentApplication.GetSectionLink(System.String,System.Int32,System.Int32)">
 <summary>
 
 </summary>
 <param name="sPageName"></param>
 <param name="nComplete"></param>
 <param name="nNumber"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmploymentApplication.GetApplicationID(System.Int32)">
 <summary>
 
 </summary>
 <param name="nPrintable"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmploymentApplication.CheckCurrentApplicationUnfinished(System.String)">
 <summary>
 
 </summary>
 <param name="sID"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmploymentApplication.SetApplicationID(System.String)">
 <summary>
 
 </summary>
 <param name="sApplicationID"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmploymentApplication.CheckCompleted">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmploymentApplication.SetHRView(System.String)">
 <summary>
 
 </summary>
 <param name="sHRView"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmploymentApplication.GetHRView">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmploymentApplication.NewApplication(System.String,System.String)">
 <summary>
 
 </summary>
 <param name="sUsername"></param>
 <param name="sPasswordHash"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmploymentApplication.HashPassword(System.String)">
 <summary>
 
 </summary>
 <param name="sPassword"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmploymentApplication.ContainsErroringAddress(System.String)">
 <summary>
 
 </summary>
 <param name="sEmail"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmploymentApplication.GetErroringAddressesMessage(System.String)">
 <summary>
 
 </summary>
 <param name="sNewPassword"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmploymentApplication.CheckUserAllowed(System.Int32)">
 <summary>
 
 </summary>
 <param name="nOpeningID"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmploymentApplication.AdditionalDocumentsRequired(System.String)">
 <summary>
 
 </summary>
 <param name="sOpeningID"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmploymentApplication.IsSearchCommitteeEmailParticipant">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.EmploymentApplication.GetPositionText(System.String,System.Web.UI.WebControls.Label@,System.Web.UI.WebControls.Label@,System.String@)">
 <summary>
 
 </summary>
 <param name="sOpeningID"></param>
 <param name="lblPosition"></param>
 <param name="lblPosition2"></param>
 <param name="sTitle"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Encryption.EncryptText(System.String)">
 <summary>
 Encrypts a string of text. Equivalent to EncryptInternal().
 </summary>
 <param name="sText">The string to encrypt.</param>
 <returns>An encrypted string.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Encryption.EncryptTextInternal(System.String)">
 <summary>
 Encrypts a string of text meant to be seen by internal users only. Equivalent to EncryptText().
 </summary>
 <param name="sText">The string to encrypt.</param>
 <returns>An encrypted string.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Encryption.EncryptInternal(System.String)">
 <summary>
 Encrypts a string of text meant to be seen by internal users only. Equivalent to EncryptText().
 </summary>
 <param name="sText">The string to encrypt.</param>
 <returns>An encrypted string.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Encryption.DecryptText(System.String)">
 <summary>
 Decrypts an encrypted string of text meant to be viewed by internal users only. Use this encryption
 method for sensitive data the user should not see. Equivalent to DecryptInternal().
 </summary>
 <param name="sText">An encrypted string to decrypt.</param>
 <returns>A decrypted string.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Encryption.DecryptTextInternal(System.String)">
 <summary>
 Decrypts an encrypted string of text meant to be viewed by internal users only. Use this encryption
 method for sensitive data the user should not see. Equivalent to DecryptText().
 </summary>
 <param name="sText">An encrypted string to decrypt.</param>
 <returns>A decrypted string.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Encryption.DecryptInternal(System.String)">
 <summary>
 Decrypts an encrypted string of text meant to be viewed by internal users only. Use this encryption
 method for sensitive data the user should not see. Equivalent to DecryptText().
 </summary>
 <param name="sText">An encrypted string to decrypt.</param>
 <returns>A decrypted string.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Encryption.EncryptText2(System.String)">
 <summary>
 Encrypts a string of text. Equivalent to EncryptExternal().
 </summary>
 <param name="sText">The string to encrypt.</param>
 <returns>An encrypted string.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Encryption.EncryptTextExternal(System.String)">
 <summary>
 Encrypts a string of text so that the encryption can be seen by external viewers. Only use this
 method on non-sensitive, non-personal data. Equivalent to EncryptText2().
 </summary>
 <param name="sText">The string to encrypt.</param>
 <returns>An encrypted string that external viewers can see.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Encryption.EncryptExternal(System.String)">
 <summary>
 Encrypts a string of text so that the encryption can be seen by external viewers. Only use this
 method on non-sensitive, non-personal data. Equivalent to EncryptText2().
 </summary>
 <param name="sText">The string to encrypt.</param>
 <returns>An encrypted string that external viewers can see.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Encryption.DecryptText2(System.String)">
 <summary>
 Decrypts an encrypted string of text. Equivalent to DecryptExternal().
 </summary>
 <param name="sText">An encrypted string to decrypt.</param>
 <returns>A decrypted string.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Encryption.DecryptTextExternal(System.String)">
 <summary>
 Decrypts an encrypted string of text that was meant for external users to view. Equivalent to DecryptText2().
 </summary>
 <param name="sText">An encrypted string to decrypt.</param>
 <returns>A decrypted string.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Encryption.DecryptExternal(System.String)">
 <summary>
 Decrypts an encrypted string of text that was meant for external users to view. Equivalent to DecryptText2().
 </summary>
 <param name="sText">An encrypted string to decrypt.</param>
 <returns>A decrypted string.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Encryption.IsDecryptable(System.String)">
 <summary>
 Tests a string to see if it can be decrypted, either internally or externally.
 </summary>
 <param name="sTest">The string to check if it can be decrypted.</param>
 <returns>Is the string decryptable?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Encryption.IsDecryptableExternal(System.String)">
 <summary>
 Tests a string to see if it can be decrypted externally.
 </summary>
 <param name="sTest">The string to check if it can be decrypted.</param>
 <returns>Is the string decryptable?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Encryption.IsDecryptableInternal(System.String)">
 <summary>
 Tests a string to see if it can be decrypted internally.
 </summary>
 <param name="sTest">The string to check if it can be decrypted.</param>
 <returns>Is the string decryptable?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Encryption.IsEncryptable(System.String)">
 <summary>
 Tests a string to see if it can be encrypted.
 </summary>
 <param name="sTest">The string to check if it can be encrypted.</param>
 <returns>Is the string encryptable?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Encryption.IsEncryptableExternal(System.String)">
 <summary>
 Tests a string to see if it can be encrypted externally.
 </summary>
 <param name="sTest">The string to check if it can be encrypted.</param>
 <returns>Is the string encryptable?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Encryption.IsEncryptableInternal(System.String)">
 <summary>
 Tests a string to see if it can be encrypted internally.
 </summary>
 <param name="sTest">The string to check if it can be encrypted.</param>
 <returns>Is the string encryptable?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Encryption.BasicEncrypt(System.String,System.String,System.Boolean)">
 <summary>
 Encrypts text with a specific encryption key.
 </summary>
 <param name="sText">The text to encrypt.</param>
 <param name="sEncryptionKey">The encryption key to apply.</param>
 <returns>The encrypted text. Returns S_ENCRYPTION_ERROR upon an error.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Encryption.BasicDecrypt(System.String,System.String,System.Boolean)">
 <summary>
 Decrypts text with a specific decryption key.
 </summary>
 <param name="sText">The text to decrypt.</param>
 <param name="sDecryptionKey">The decryption key to apply.</param>
 <returns>The decrypted text. Returns S_DECRYPTION_ERROR upon an error.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Encryption.SpecialDecrypt(System.String,System.String,System.Boolean)">
 <summary>
 Applies special formatting to a basic decryption.
 </summary>
 <param name="sText">The text to decrypt.</param>
 <param name="sDecryptionKey">The decryption key to apply.</param>
 <returns>The decrypted text. Returns S_DECRYPTION_ERROR upon an error.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Encryption.SpecialEncrypt(System.String,System.String)">
 <summary>
 Applies special formatting to a basic encryption.
 </summary>
 <param name="sText">The text to encrypt.</param>
 <param name="sEncryptionKey">The encryption key to apply.</param>
 <returns>The encrypted text. Returns S_ENCRYPTION_ERROR upon an error.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Encryption.EncryptHash(System.String,System.String)">
 <summary>
 Encrypts text with a hash. Defaults to "SHA1"
 </summary>
 <param name="sText">The text to encrypt with a hash.</param>
 <param name="sFormat">The encryption format to use. (SHA1 or MD5)</param>
 <returns>The encrypted hash text.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Encryption.EncryptHashSHA1(System.String)">
 <summary>
 Encrypts text with a SHA1 hash text.
 </summary>
 <param name="sText">The text to encrypt with a hash.</param>
 <returns>The encrypted hash text.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Encryption.EncryptHashMD5(System.String)">
 <summary>
 Encrypts text with a MD5 hash text.
 </summary>
 <param name="sText">The text to encrypt with a hash.</param>
 <returns>The encrypted hash text.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ErrorHandler.ReportError(System.Exception,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Reports an error in a web page to the Web Page Error Report Form Maintenance page.
 </summary>
 <param name="ex">The exception thrown to cause this function to be called.</param>
 <param name="sAssignTo">The username of the web team member to assign this error to.</param>
 <param name="sInPageComment">Developer's comments about the likely causes of this error.</param>
 <param name="nImportance">The importance level of the error. Defaults to N_ERROR_IMPORTANCE_LEVEL_NORMAL global enum value.</param>
 <param name="bShowErrorAlert">Create an alert box with information about the error?</param>
 <param name="bWriteCustomError">Show the error report for web team members when relevant?</param>
 <param name="bSendEmail">Send emails to notify about errors? Needs to be able to be turned off, particularly for email related issues.</param>
 <returns>Was the report successfully written to the database?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ErrorHandler.ReportError(System.String,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Reports an error in a web page to the Web Page Error Report Form Maintenance page.
 </summary>
 <param name="sError">The custom error message explaining what caused this function to be called.</param>
 <param name="sAssignTo">The username of the web team member to assign this error to.</param>
 <param name="sInPageComment">Developer's comments about the likely causes of this error.</param>
 <param name="nImportance">The importance level of the error. Defaults to N_ERROR_IMPORTANCE_LEVEL_NORMAL global enum value.</param>
 <param name="bShowErrorAlert">Create an alert box with information about the error?</param>
 <param name="bWriteCustomError">Show the error report for web team members when relevant?</param>
 <param name="bSendEmail">Send emails to notify about errors? Needs to be able to be turned off, particularly for email related issues.</param>
 <returns>Was the report successfully written to the database?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ErrorHandler.SubmitReport(System.Exception,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Submits a report to the Web Page Error Report Form Maintenance page. Writes the error to the page for web team members only.
 </summary>
 <param name="ex">The exception explaining what caused this function to be called.</param>
 <param name="sAssignTo">The Username or PLID of the web team member to assign this error to.</param>
 <param name="sInPageComment">Developer's comments about the likely causes of this error.</param>
 <param name="nImportance">The importance level of the error. Defaults to N_ERROR_IMPORTANCE_LEVEL_NORMAL global enum value.</param>
 <param name="bShowErrorAlert">Create an alert box with information about the error?</param>
 <param name="bWriteCustomError">Show the error report for web team members when relevant?</param>
 <param name="bSendEmail">Send emails to notify about errors? Needs to be able to be turned off, particularly for email related issues.</param>
 <returns>Was the report successfully written to the database?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ErrorHandler.ReportErrorDebug(System.String,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Reports an error to a specific developer via email instead of to the error report database. Intended for use on
 projects still in the testing phase. When testing is complete this function should be replaced by the reportErrors() function.
 </summary>
 <param name="sError">The custom error message explaining what caused this function to be called.</param>
 <param name="sAssignTo">The Username or PLID of the web team member to assign this error to.</param>
 <param name="sInPageComment">Developer's comments about the likely causes of this error.</param>
 <param name="nImportance">The importance level of the error. Defaults to N_ERROR_IMPORTANCE_LEVEL_NORMAL global enum value.</param>
 <param name="bShowErrorAlert">Create an alert box with information about the error?</param>
 <param name="bWriteCustomError">Show the error report for web team members when relevant?</param>
 <param name="bSendEmail">Send emails to notify about errors? Needs to be able to be turned off, particularly for email related issues.</param>
 <returns>Was the email successfully sent to the developer?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ErrorHandler.ReportErrorDebug(System.Exception,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Reports an error to a specific developer instead of to the error report database. Intended for use on
 projects still in the testing phase where not all developers need to be made aware of issues. When testing
 is complete this function should be replaced by the reportErrors() function.
 </summary>
 <param name="ex">The exception thrown to cause this function to be called.</param>
 <param name="sAssignTo">The Username or PLID of the web team member to assign this error to.</param>
 <param name="sInPageComment">Developer's comments about the likely causes of this error.</param>
 <param name="nImportance">The importance level of the error. Defaults to N_ERROR_IMPORTANCE_LEVEL_NORMAL global enum value.</param>
 <param name="bShowErrorAlert">Create an alert box with information about the error?</param>
 <param name="bWriteCustomError">Show the error report for web team members when relevant?</param>
 <param name="bSendEmail">Send emails to notify about errors? Needs to be able to be turned off, particularly for email related issues.</param>
 <returns>Was the email successfully sent to the developer?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ErrorHandler.SubmitDebugReport(System.Exception,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Reports an error to a specific developer via email instead of to the error report database. Intended for use on
 projects still in the testing phase. When testing is complete this function should be replaced by the reportErrors() function.
 </summary>
 <param name="ex">The exception explaining what caused this function to be called.</param>
 <param name="sAssignTo">The Username or PLID of the web team member to assign this error to.</param>
 <param name="sInPageComment">Developer's comments about the likely causes of this error.</param>
 <param name="nImportance">The importance level of the error. Defaults to N_ERROR_IMPORTANCE_LEVEL_NORMAL global enum value.</param>
 <param name="bShowErrorAlert">Create an alert box with information about the error?</param>
 <param name="bWriteCustomError">Show the error report for web team members when relevant?</param>
 <param name="bSendEmail">Send emails to notify about errors? Needs to be able to be turned off, particularly for email related issues.</param>
 <returns>Was the email successfully sent to the developer?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ErrorHandler.BreakThis(System.Boolean)">
 <summary>
 This function is used to intentionally cause an error in a web page.
 </summary>
 <param name="bAlways">When "True", ensures that a unique error is thrown every time.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ErrorHandler.CustomizeError(System.String)">
 <summary>
 Edits an error message to show in a customized way.
 </summary>
 <param name="sError">The error message to customize</param>
 <returns>A customized version of the error message.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ErrorHandler.CustomizeError(System.Exception)">
 <summary>
 Edits an error message to show in a customized way.
 </summary>
 <param name="ex">The error message to customize</param>
 <returns>A customized version of the error message.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ErrorHandler.GetErrorSummary(System.Int32,System.Boolean)">
 <summary>
 Creates a common message to display on error reports.
 </summary>
 <param name="nErrorID">The id number of the error report.</param>
 <param name="bExtendedSummary">Retrieve the extended summary?</param>
 <returns>A readable description of the error report.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ErrorHandler.ConvertErrorImportance(System.Int32)">
 <summary>
 Converts an error importance level to a string value.
 </summary>
 <param name="nImportance">The error importance level integer to convert.</param>
 <returns>A string version of an error importance level integer.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ErrorHandler.ConvertErrorDelay(System.Int32)">
 <summary>
 Converts an error delay level to a string value.
 </summary>
 <param name="nDelay">The error delay level integer to convert.</param>
 <returns>A string version of an error delay level integer.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.ErrorHandler.CheckExceptionMatch(System.String,System.Boolean,System.String@,System.String)">
 <summary>
 Checks an exception message for common errors.
 </summary>
 <param name="sException">The exception to check.</param>
 <param name="bShowErrorAlert">Show an alert on the page for a matching error?</param>
 <param name="sInPageComment">A string to attach messages to when appropriate.</param>
 <param name="sPageURL">The page URL the exception occurred on. Relevant to certain checks.</param>
 <returns>Was a match found?</returns>
 <remarks>'TODO: Create a DataTable that tracks common errors and common fixes</remarks>
</member>
<member name="M:WhitTools.FacilitiesServices.IsFSAdmin(System.String,System.Boolean,System.Boolean)">
 <summary>
 Checks if the user is a Facilities Services web admin or a Web Team member.
 </summary>
 <param name="sUsername">The username to check.</param>
 <param name="bIncludeWebTeam">Include the web team as admins?</param>
 <returns>Is the user an admin?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.FacilitiesServices.IsFSStudentWorker(System.String,System.Boolean)">
 <summary>
 Checks if the user is a Facilities Services student worker or a Web Team member.
 </summary>
 <param name="sUsername">The username to check.</param>
 <param name="bIncludeWebTeam">Include the web team as student workers?</param>
 <returns>Is the user a facilities services student worker?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.FacilitiesServices.GetFacilitiesServicesDirectorName">
 <summary>
 Gets the Facilities Services Director's name.
 </summary>
 <returns>The Facilities Services Director's name.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.FacilitiesServices.GetFacilitiesServicesDirectorUsername">
 <summary>
 Gets the Facilities Services Director's username.
 </summary>
 <returns>The Facilities Services Director's username.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.FacilitiesServices.GetFacilitiesServicesDirectorEmail">
 <summary>
 Gets the Facilities Services Director's email address.
 </summary>
 <returns>The Facilities Services Director's email address.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.FacilitiesServices.GetFacilitiesServicesDirectorPhone">
 <summary>
 Gets the Facilities Services Director's phone number.
 </summary>
 <returns>The Facilities Services Director's phone number.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.FacilitiesServices.GetFacilitiesServicesMainContactName">
 <summary>
 Gets the Facilities Services Main Contact's name.
 </summary>
 <returns>The Facilities Services Main Contact's name.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.FacilitiesServices.GetFacilitiesServicesMainContactUsername">
 <summary>
 Gets the Facilities Services Main Contact's username.
 </summary>
 <returns>The Facilities Services Main Contact's username.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.FacilitiesServices.GetFacilitiesServicesMainContactEmail">
 <summary>
 Gets the Facilities Services Main Contact's email address.
 </summary>
 <returns>The Facilities Services Main Contact's email address.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.FacilitiesServices.GetFacilitiesServicesMainContactPhone">
 <summary>
 Gets the Facilities Services Main Contact's phone number.
 </summary>
 <returns>The Facilities Services Main Contact's phone number.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.FacilitiesServices.GetUserVehicleRegistrationType(System.String)">
 <summary>
 Gets the vehicle registration type the provided PLID qualifies for. Returns N_ERROR (-255) if the user does not exist.
 </summary>
 <param name="sPLID">The Whitworth ID to get the qualifying vehicle registration type for.</param>
 <returns>The vehicle registration type the Whitworth ID qualifies for. Returns N_ERROR (-255) if the user does not exist.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.FacilitiesServices.AddFSAdmin(System.String)">
 <summary>
 Adds a facilities services web admin.
 </summary>
 <param name="sAdmin">The admin to add (accepts PLID/Username/email).</param>
 <returns>Was the admin added successfully?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.FacilitiesServices.AddFSStudentWorker(System.String)">
 <summary>
 Adds a facilities services student worker web admin.
 </summary>
 <param name="sStudentWorker">The student worker admin to add (accepts PLID/Username/email).</param>
 <returns>Was the student worker admin added successfully?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.FacilitiesServices.AddSecurity(System.String)">
 <summary>
 Adds a security web admin.
 </summary>
 <param name="sSecurity">The security admin to add (accepts PLID/Username/email).</param>
 <returns>Was the security admin added successfully?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.FacilitiesServices.RemoveFSAdmin(System.String)">
 <summary>
 Removes a facilities services web admin.
 </summary>
 <param name="sAdmin">The admin to remove (accepts PLID/Username/email).</param>
 <returns>Was the admin removed successfully?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.FacilitiesServices.RemoveFSStudentWorker(System.String)">
 <summary>
 Removes a facilities services student worker web admin.
 </summary>
 <param name="sStudentWorker">The student worker admin to remove (accepts PLID/Username/email).</param>
 <returns>Was the student worker admin removed successfully?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.FacilitiesServices.RemoveSecurity(System.String)">
 <summary>
 Removes a security web admin.
 </summary>
 <param name="sSecurity">The security admin to remove (accepts PLID/Username/email).</param>
 <returns>Was the security admin removed successfully?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.File.FileExists(System.String,System.String,System.String@)">
 <summary>
 Checks if a file exists at the specified path. Cannot check for the existence of .htm or .html files.
 </summary>
 <param name="sFileName">The name of the file to check for.</param>
 <param name="sFilePath">The path to the folder where the file should exist.. "LocalPath" will set 
 the physical path where the file will be saved to the current project folder. To save to a 
 sub-folder within the current project folder structure, set this value to "LocalPath\" followed 
 by the path to the folder the file should be saved in (LocalPath\Docs\). Otherwise 
 this is the physical path to the folder where the file will be saved. Does not include the name of 
 the file. (Typically starts with C:\inetpub\~Whitworth\ or FILE_PATH_WEB1)
 </param>
 <param name="sError">A string that will contain the error if there is one, otherwise will be empty.</param>
 <returns>Does the file exist at the specified location?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.File.VerifyDirectory(System.String,System.String,System.String@)">
 <summary>
 
 </summary>
 <param name="sFilePath"></param>
 <param name="sFileName"></param>
 <param name="sError"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.File.GetUploadedFileName(System.String,System.String,System.Boolean)">
 <summary>
 Returns the formatted version of the file name that was saved to the server.
 </summary>
 <param name="sFileName">The name of the file to check for.</param>
 <param name="sFilePath">The path to the folder where the file should exist.. "LocalPath" will set 
 the physical path where the file will be saved to the current project folder. To save to a 
 sub-folder within the current project folder structure, set this value to "LocalPath\" followed 
 by the path to the folder the file should be saved in (LocalPath\Docs\). Otherwise 
 this is the physical path to the folder where the file will be saved. Does not include the name of 
 the file. (Typically starts with C:\inetpub\~Whitworth\ or FILE_PATH_WEB1)
 </param>
 <param name="bCheckAllExtensions">Check for matching file names with different extensions?</param>
 <returns>The formatted version of the file name that was saved to the server.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.File.GetUploadedFileExtension(System.String,System.String,System.Boolean)">
 <summary>
 Returns the extension of the formatted file name that was saved to the server. Checks for files with
 matching file names, but not neccessarily the same file extension.
 </summary>
 <param name="sFileName">The name of the file to check for.</param>
 <param name="sFilePath">The path to the folder where the file should exist.. "LocalPath" will set 
 the physical path where the file will be saved to the current project folder. To save to a 
 sub-folder within the current project folder structure, set this value to "LocalPath\" followed 
 by the path to the folder the file should be saved in (LocalPath\Docs\). Otherwise 
 this is the physical path to the folder where the file will be saved. Does not include the name of 
 the file. (Typically starts with C:\inetpub\~Whitworth\ or FILE_PATH_WEB1)
 </param>
 <param name="bIncludeDot">Include the dot in the extension?</param>
 <returns>The extension of the formatted version of the file name that was saved to the server.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.File.GetUploadFileName(System.Object@)">
 <summary>
 Returns the file name of the file to be uploaded.
 </summary>
 <param name="fileToUpload">The file to get the name from.</param>
 <returns>The name of the file. Returns an empty string for invalid or non-existent files.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.File.GetUploadFileExtension(System.Object@,System.Boolean)">
 <summary>
 Returns the file extension of the file to be uploaded.
 </summary>
 <param name="fileToUpload">The file to get the extension from.</param>
 <param name="bIncludeDot">Include the dot in the extension?</param>
 <returns>The extension of the file. Returns an empty string for invalid or non-existent files.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.File.RunExport(System.Data.DataTable,System.String@,System.Web.HttpServerUtility,System.String,System.Boolean,System.Data.DataTable,System.Data.SqlClient.SqlConnection,System.Boolean)">
 <summary>
 This is an obsolete function maintained to allow old uses of this function to persist.
 </summary>
 <param name="dtData"></param>
 <param name="sFileName"></param>
 <param name="serverReference"></param>
 <param name="sColumnNames"></param>
 <param name="nPrintHeadings"></param>
 <param name="dtTables"></param>
 <param name="cnx"></param>
 <param name="bFormatPhone"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.File.RunExport(System.Data.DataTable,System.String@,System.String,System.Boolean,System.Data.DataTable,System.Data.SqlClient.SqlConnection,System.Boolean)">
 <summary>
 RunExport will take a DataTable and the name of the file
 you want to create for an export so it knows where to create the file.
 With these variables it will create a CSV spreadsheet containing the data you passed to it
 in the DataTable. It will optionally accept a comma-delimited list of column names in case you want
 to use something other than the column names existing in the actual database.
 The list of column names must match the ordering of the columns in the
 DataTable if you want the spreadsheet to look right.  
 </summary>
 <param name="dtData">The table containing the data to be exported.</param>
 <param name="sFileName">The name of the file to create and insert the data into. Files saved in sub-folders should use a forward slash "\" (i.e. "Exports\Filename.csv").</param>
 <param name="sColumnNames">The list of column names, optionally included.</param>
 <param name="nPrintHeadings">A boolean value, true by default, which determines whether or not the column headings are actually included in the export file.</param>
 <param name="dtTables">If this parameter is passed, it should include as its first row 
 the main table for the data, and any additional rows should include tables of ancillary data.  
 In addition to the table name, the foreign keys are passed as a part of dtTables in IDColumn.  
 The original primary key should be included in IDColumn in first row of dtTables.</param>
 <param name="cnx">The SQLConnection object that can be used to grab data from multiple tables.</param>
 <param name="bFormatPhone">Format phone columns?</param>
 <returns>Was the data successfully exported?</returns>
 <remarks>
 IIS_IUSRS must have permissions in the folder.
 </remarks>
</member>
<member name="M:WhitTools.File.RunExportCSV(System.Data.DataTable,System.String@,System.String,System.Boolean,System.Data.DataTable,System.Data.SqlClient.SqlConnection,System.Boolean)">
 <summary>
 RunExport will take a DataTable and the name of the file
 you want to create for an export so it knows where to create the file.
 With these variables it will create a CSV spreadsheet containing the data you passed to it
 in the DataTable. It will optionally accept a comma-delimited list of column names in case you want
 to use something other than the column names existing in the actual database.
 The list of column names must match the ordering of the columns in the
 DataTable if you want the spreadsheet to look right.  
 </summary>
 <param name="dtData">The table containing the data to be exported.</param>
 <param name="sFileName">The name of the file to create and insert the data into. Files saved in sub-folders should use a forward slash "\" (i.e. "Exports\Filename.csv").</param>
 <param name="sColumnNames">The list of column names, optionally included.</param>
 <param name="nPrintHeadings">A boolean value, true by default, which determines whether or not the column headings are actually included in the export file.</param>
 <param name="dtTables">If this parameter is passed, it should include as its first row 
 the main table for the data, and any additional rows should include tables of ancillary data.  
 In addition to the table name, the foreign keys are passed as a part of dtTables in IDColumn.  
 The original primary key should be included in IDColumn in first row of dtTables.</param>
 <param name="cnx">The SQLConnection object that can be used to grab data from multiple tables.</param>
 <param name="bFormatPhone">Format phone columns?</param>
 <returns>Was the data successfully exported?</returns>
 <remarks>
 IIS_IUSRS must have permissions in the folder.
 </remarks>
</member>
<member name="M:WhitTools.File.CopyFileFolder(System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 Copies versions of files in a folder between web1 and web2.
 </summary>
 <param name="sWeb1File">The path to the file/folder to copy to/from on web1. (Example: "\Administration\FinancialAid\NetPriceCalculator\")</param>
 <param name="sWeb2File">The path to the file/folder to copy to/from on web2. (Example: "\Administration\FinancialAid\NetPriceCalculatorMaintenence\")</param>
 <param name="bWeb1ToWeb2">Is the file getting copied from Web1 to Web2? If false, file is copied from Web2 to Web1.</param>
 <returns>Was the copy successful?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.File.CheckFilePathSlashes(System.String@)">
 <summary>
 Removes the ending slash character from the file path and adds one to the beginning if needed.
 </summary>
 <param name="sFilePath">The file path to check.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.File.CreateFolder(System.String,System.Int32)">
 <summary>
 Creates a folder at the specified location.
 </summary>
 <param name="sFolder">The path to the folder to create. Starts with "\Administration\...".</param>
 <param name="nLocation">The server to create the folder on (1=Web1, 2=Web2). Defaults to Web1.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.File.UploadFile(System.String,System.Object@,System.DateTime,System.String)">
 <summary>
 Uploads the provided file to the provided folder path. Returns if the upload was successful.
 </summary>
 <param name="sFilePath">"LocalPath" will set the physical path where the file will be saved to the 
 current project folder. To save to a sub-folder within the current project folder structure, set 
 this value to "LocalPath\" followed by the path to the folder the file should be saved in (LocalPath\Docs\). Otherwise 
 this is the physical path to the folder where the file will be saved. Does not include the name of 
 the file. (Typically starts with C:\inetpub\~Whitworth\ or FILE_PATH_WEB1)
 </param>
 <param name="fileToUpload">The file to upload.</param>
 <param name="dateTimeStamp">The optional datetime stamp to append to the front of the file name.</param>
 <param name="sSaveAs">The filename to save the file as (exclude file extension). Overrides the provided 
 file's name. The extension will be read from the input data and added to the save as file name.</param>
 <returns>Was the upload successful?</returns>
 <remarks>
 IIS_IUSRS must have write permissions in the folder where you want to upload the file.
 Web1 Path = C:\inetpub\~whitworth\ or FILE_PATH_WEB1 in GlobalEnum
 Web2 Path = F:\inetpub\~whitworth\ or FILE_PATH_WEB2 in GlobalEnum
 </remarks>
</member>
<member name="M:WhitTools.File.UploadFile(System.Object@,System.String,System.DateTime,System.String@)">
 <summary>
 Uploads the provided file to the current folder path. A different file path can be provided. Returns if the upload was successful.
 </summary>
 <param name="fileToUpload">The file to upload.</param>
 <param name="sFilePath">"LocalPath" will set the physical path where the file will be saved to the 
 current project folder. To save to a sub-folder within the current project folder structure, set 
 this value to "LocalPath\" followed by the path to the folder the file should be saved in (LocalPath\Docs\). Otherwise 
 this is the physical path to the folder where the file will be saved. Does not include the name of 
 the file. (Typically starts with C:\inetpub\~Whitworth\ or FILE_PATH_WEB1)
 </param>
 <param name="dateTimeStamp">The optional datetime stamp to append to the front of the file name.</param>
 <param name="sSaveAs">The filename to save the file as (exclude file extension). Overrides the provided 
 file's name. The extension will be read from the input data and added to the save as file name.</param>
 <returns>Was the upload successful?</returns>
 <remarks>
 IIS_IUSRS must have write permissions in the folder where you want to upload the file.
 Web1 Path = C:\inetpub\~whitworth\ or FILE_PATH_WEB1 in GlobalEnum
 Web2 Path = F:\inetpub\~whitworth\ or FILE_PATH_WEB2 in GlobalEnum
 </remarks>
</member>
<member name="M:WhitTools.File.ConvertDataTableRowColumnValue2(System.Data.DataTable@,System.String,System.String,System.String)">
 <summary>
 Converts all row values of a specific column from one value to another. To convert the value in the column
 to its GlobalEnum value, leave the sConvertFrom and sConvertTo parameters blank.
 </summary>
 <param name="dt">The DataTable to convert values for.</param>
 <param name="sColumn">The column to convert values for.</param>
 <param name="sConvertFrom">The column value to convert from. If the value in the row column matches this value then it is replaced with the sConvertTo value. If this field is left blank then the value in the column is converted to its GlobalEnum value.</param>
 <param name="sConvertTo">The column value to convert to. If the value in the row column matches sConvertFrom then it is replaced with this value. If this field is left blank then the value in the column is converted to its GlobalEnum value.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.File.ValidateUploadedFile(System.Object@,System.String,System.Web.UI.WebControls.CustomValidator@,System.Boolean,System.Web.UI.WebControls.ServerValidateEventArgs@,System.Int32,System.Boolean,System.Boolean)">
 <summary>
 Validates an uploaded file.
 </summary>
 <param name="fileToUpload">The file to upload.</param>
 <param name="sFilePath">"LocalPath" will set the physical path where the file will be saved to the 
 current project folder. To save to a sub-folder within the current project folder structure, set 
 this value to "LocalPath\" followed by the path to the folder the file should be saved in (LocalPath\Docs\). Otherwise 
 this is the physical path to the folder where the file will be saved. Does not include the name of 
 the file. (Typically starts with C:\inetpub\~Whitworth\ or FILE_PATH_WEB1)
 </param>
 <param name="cvUploadFile">The custom validator to let the user know why the file may be invalid.</param>
 <param name="bFileIsRequired">Is the file required?</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="nMaxFileSizeInBytes">The maximum size of a valid file in bytes. Defaults to 10000000 bytes (10 MB).</param>
 <returns>Is the uploaded file valid?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.File.FormatUploadFileName(System.Object,System.DateTime,System.String@)">
 <summary>
 Removes any invalid characters from the uploaded filename. Replaces spaces and invalid characters with dashes. 
 Optionally appends the date to the front of the name of a file to be uploaded. 
 </summary>
 <param name="fileToUpload">The file to be uploaded.</param>
 <param name="dateTimeStamp">The datetime stamp to add to the front of the file name.</param>
 <param name="sSaveAs">The new name to save the file as. After the file name is formatted, this variable is assigned the file name, including the extension.</param>
 <returns>The formatted name of the file to be uploaded.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.File.FormatUploadFileName(System.String,System.DateTime)">
 <summary>
 Removes any invalid characters from the uploaded filename. Replaces spaces and invalid characters with dashes. 
 Optionally appends the date to the front of the name of a file to be uploaded. 
 </summary>
 <param name="sFileName">The name of the file to be uploaded.</param>
 <returns>The formatted name of the file to be uploaded.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.File.RemoveFileExtension(System.String)">
 <summary>
 Removes the file extension from a file name. If there is no extension and the file name contains 
 a period (.), then the part of the file name following the period will be stripped.
 </summary>
 <param name="sFileName">The file name to remove the extension from.</param>
 <returns>The file name without its extension.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.File.GetListOfFilesInFolder(System.String,System.String,System.String)">
 <summary>
 Gets a list of the files stored in a passed folder name. Requires "Imports System.IO". Returned is an array of FileInfo objects which should be accessed like so:
   For Each fi As FileInfo In files
        (Do something with fi.Name or other fileInfo property here)
   Next
 
 To capture what this function returns, use code like this:
 Dim fis() As FileInfo = GetListOfFilesInFolder("")
 </summary>
 <param name="sDirectoryPath">The path to the folder.</param>
 <param name="sSortBy">How the list should be sorted.</param>
 <param name="sOrderBy">How the list should be ordered (ascending or descending)</param>
 <returns>An array of files that can be captured with code like this: Dim fis() As FileInfo = GetListOfFilesInFolder("")</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.File.GetListOfDirectoryInfo(System.String,System.String,System.String,System.String)">
 <summary>
 
 </summary>
 <param name="sDirectoryPath"></param>
 <param name="sType"></param>
 <param name="sSortBy"></param>
 <param name="sOrderBy"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.File.ImpersonateAsUser">
 <summary>
 
 </summary>
 <remarks></remarks>
</member>
<member name="M:WhitTools.File.UndoImpersonateAsUser">
 <summary>
 
 </summary>
 <remarks></remarks>
</member>
<member name="M:WhitTools.File.WriteTextFile(System.String,System.String,System.String)">
 <summary>
 Creates a text-based file such as .txt, .htm or .html with the provided sTextToWrite text.
 </summary>
 <param name="sTextToWrite">The text that makes up the text-based file.</param>
 <param name="sFileName">The name of the file. Must include extension, otherwise .html is added to it.</param>
 <param name="sPhysicalPathToFile">The physical path to the folder to save the file in.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.File.CreateTextFile(System.String,System.String,System.String)">
 <summary>
 Creates a text-based file such as .txt, .htm or .html with the provided sTextToWrite text.
 </summary>
 <param name="sTextToWrite">The text that makes up the text-based file.</param>
 <param name="sFileName">The name of the file. Must include extension, otherwise .html is added to it.</param>
 <param name="sPhysicalPathToFile">The physical path to the folder to save the file in.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.File.CreateHtmlAndPdf(System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Creates a HTML file with the provided sHtmlText, then creates a PDF file with the same text. Returns if the process was successful.
 </summary>
 <param name="sHtmlText">The HTML text to use to create the .html file.</param>
 <param name="sHTMLFilename">The name of the HTML file. Must contain the .html file extension.</param>
 <param name="sPdfFileName">The name of the PDF file. Must contain the .pdf file extension.</param>
 <param name="sPhysicalHtmlFilePath">The location of the folder to save the HTML file in. Defaults to LocalPath, which is the same folder as the current page. Can access subfolders like this: "LocalPath\Files\"</param>
 <param name="sPhysicalPdfFilePath">The location of the folder to save the PDF file in. Defaults to the same location as the HTML file.</param>
 <returns>Was the PDF file created successfully?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.File.ConvertHtmlToPdf(System.String,System.String,System.String,System.String)">
 <summary>
 Converts an existing .html file to a .pdf version of that file. Returns if the process was successful.
 </summary>
 <param name="sHtmlFileName">The name of the HTML file to convert.</param>
 <param name="sPdfFileName">The name to assign to the .pdf file once it is created. Defaults to the same name as the provided HTML file.</param>
 <param name="sPhysicalLocationOfHtmlFile">The location of the HTML file to convert. Defaults to LocalPath, which is the same folder as the current page. Can access subfolders like this: "LocalPath\Files\"</param>
 <param name="sPhysicalLocationOfPdfFile">The location to place the PDF file once it is created. Defaults to the same location as the HTML file.</param>
 <returns>Was the .pdf file created successfully?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.File.CheckLocalPath(System.String@)">
 <summary>
 Checks if the physical path parameter contains S_LOCAL_PATH. If so, it replaces the parameter with the actual path to the file.
 </summary>
 <param name="sPhysicalPathToFile">The variable to fill with the physical path to the file.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.FileCompare.#ctor(System.String,System.String)">
 <summary>
 Initializes the FileCompare object.
 </summary>
 <param name="sSort"></param>
 <param name="sOrder"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.FileCompare.Compare(System.Object,System.Object)">
 <summary>
 Compares the two files passed in.
 </summary>
 <param name="oFile1">The first file to compare.</param>
 <param name="oFile2">The second file to compare.</param>
 <returns>The compare result for the two files. Returns N_ERROR (-255) if something fails within the function.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillCountries(System.Web.UI.WebControls.DropDownList@,System.Boolean)">
 <summary>
 Adds country list items to the provided dropdownlist.
 </summary>
 <param name="ddlCountry">The DDL to add countries to.</param>
 <param name="bIncludePleaseSelect">Add a "Please Select" value.</param>
 <remarks>Example: FillCountries(ddlCountry, True)</remarks>
</member>
<member name="M:WhitTools.Filler.FillStates(System.Web.UI.WebControls.DropDownList@)">
 <summary>
 Adds state list items to the provided dropdownlist. Includes Canadian provinces and military "state" designations.
 </summary>
 <param name="ddlStates">The DDL to add states to.</param>
 <remarks>Example: FillStates(ddlState)</remarks>
</member>
<member name="M:WhitTools.Filler.FillYears(System.Web.UI.WebControls.DropDownList@,System.Int32,System.Int32,System.String,System.Boolean,System.Int32)">
 <summary>
 Adds a range of year list items to the provided dropdownlist.
 </summary>
 <param name="ddlYears">The control to fill.</param>
 <param name="nStartingYear">The year to start with.</param>
 <param name="nEndingYear">The year to end with.</param>
 <param name="bIncludeSelect">Include a "Please Select" option?</param>
 <param name="nTextType">The way the text is displayed. 0 = Years, 1 = Academic Year (2012-13), 2 = Academic Year (2012/13)</param>
 <remarks>
 Example: FillYears(ddlEnrollmentYear, 2000, 2006)
 If the starting year is higher than the ending year, then the starting year will be presented first 
 in the list, otherwise ending year will be presented first.
 </remarks>
</member>
<member name="M:WhitTools.Filler.FillMonths(System.Web.UI.WebControls.DropDownList@,System.Boolean)">
 <summary>
 Adds month list items to the provided dropdownlist.
 </summary>
 <param name="ddlMonths">The ddl to fill with months.</param>
 <param name="bIncludeSelect">Include the 'Please Select Month' option?</param>
 <remarks>Example: FillMonths(ddlMonth)</remarks>
</member>
<member name="M:WhitTools.Filler.FillShortMonths(System.Web.UI.WebControls.DropDownList@,System.Boolean)">
 <summary>
 Adds shortened month list items to the provided dropdownlist.
 </summary>
 <param name="ddlMonths">The ddl to fill with months.</param>
 <param name="bIncludeSelect">Include the 'Please Select Month' option?</param>
 <remarks>Example: FillShortMonths(ddlMonth)</remarks>
</member>
<member name="M:WhitTools.Filler.FillDays(System.Web.UI.WebControls.DropDownList@,System.Boolean)">
 <summary>
 Adds day list items to the provided dropdownlist.
 </summary>
 <param name="ddlDays">The ddl to fill with days.</param>
 <param name="bIncludeSelect">Include the 'Please Select Day' option?</param>
 <remarks>Example: FillDays(ddlDays)</remarks>
</member>
<member name="M:WhitTools.Filler.FillDates(System.Web.UI.WebControls.DropDownList@,System.Web.UI.WebControls.DropDownList@,System.Web.UI.WebControls.DropDownList@,System.Int32,System.Int32)">
 <summary>
 Fills the day, month and year dropdownlist controls passed to it.
 </summary>
 <param name="ddlMonth">The ddl to fill with months.</param>
 <param name="ddlDay">The ddl to fill with days.</param>
 <param name="ddlYear">The ddl to fill with years.</param>
 <param name="nYearStart">The first year in the list.</param>
 <param name="nYearEnd">The last year in the list.</param>
 <remarks>SetDates</remarks>
</member>
<member name="M:WhitTools.Filler.FillMajors(System.Web.UI.WebControls.ListControl@,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Adds major list items to the provided dropdownlist.
 </summary>
 <param name="control">The dropdownlist to add majors to.</param>
 <param name="bFullList">Full list(true) or simple list(false).</param>
 <param name="bIncludeCode">Include the Major code in the description?</param>
 <param name="bIncludePleaseSelect">Include a "Please Select" option?</param>
 <remarks>
 Example: FillMajors(ddlMajors)
 Example: FillMajors(ddlMajors, False)
 Example: FillMajors(ddlMajors, True, False)
 </remarks>
 
</member>
<member name="M:WhitTools.Filler.FillProspectMajors(System.Web.UI.WebControls.ListControl@,System.Boolean,System.Int32)">
 <summary>
 
 </summary>
 <param name="CurrentList"></param>
 <param name="bIncludePleaseSelect"></param>
 <param name="nValueField"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillResidenceHalls(System.Web.UI.WebControls.ListControl@,System.Boolean,System.Int32)">
 <summary>
 
 </summary>
 <param name="CurrentList"></param>
 <param name="bIncludePleaseSelect"></param>
 <param name="nValueField"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillFreshmanMajors(System.Web.UI.WebControls.DropDownList@,System.Boolean,System.Boolean)">
 <summary>
 Adds freshman program major list items to the provided dropdownlist.
 </summary>
 <param name="ddlMajors">The dropdownlist to add majors to.</param>
 <param name="bIncludeCode">Include the Major code in the description?</param>
 <param name="bIncludePleaseSelect">Include a "Please Select" option?</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillFreshmanMajors(System.Web.UI.WebControls.ListBox@,System.Boolean)">
 <summary>
 Adds freshman program major list items to the provided listbox.
 </summary>
 <param name="lsbMajors">The listbox to add majors to.</param>
 <param name="bIncludeCode">Include the Major code in the description?</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillTimes(System.Web.UI.WebControls.DropDownList@,System.String,System.String,System.Double,System.Int32)">
 <summary>
 Loads a DDL with a specified time range in the specified increments.
 
 SetTimes3 in TomsLibrary is equivalent to FillTimes(ddlTimes, "8:00 AM", "8:00 PM", 0.5, 2)
 </summary>
 <param name="ddlTimes">The ddl to add the time items to.</param>
 <param name="sStartTime">The earliest time in the range. ("9:00 AM")</param>
 <param name="sEndTime">The latest time in the range. ("8:00 PM")</param>
 <param name="nIncrementBy">The number of hours to increment list items by. Default: 0.25 (15 minutes)</param>
 <param name="nIndex0Type">Determines how the first index option(s) are organized. Default: 0. 0=Please Select(""); 1=Anytime("12:00 AM"); 2=Please Select(""), Anytime("12:00 AM"); 3=Please Select(""); 4=Anytime("Anytime"); 5=All Day("AllDay"); 6=No Items Added)</param>
 <remarks>Example: FillTimes(ddlTime, "9:00 AM", "8:00 PM")</remarks>
</member>
<member name="M:WhitTools.Filler.FillNumericHours(System.Web.UI.WebControls.DropDownList@,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Fills a dropdownlist with hours.
 </summary>
 <param name="ddlHours">The control to fill.</param>
 <param name="bIncludeSelect">Include a select option?</param>
 <param name="b24Hour">Fill all 24 hours?</param>
 <param name="nSelectType">The way to display the select option: 0 - "Please Select", 1 - "HR"</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillNumericMinutes(System.Web.UI.WebControls.DropDownList@,System.Boolean,System.Int32)">
 <summary>
 Fills a dropdownlist with minutes.
 </summary>
 <param name="ddlMinutes">The control to fill.</param>
 <param name="bIncludeSelect">Include a select option?</param>
 <param name="nSelectType">The way to display the select option: 0 - "Please Select", 1 - "MM"</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillNumericAmPm(System.Web.UI.WebControls.DropDownList@,System.Boolean,System.Int32,System.Int32)">
 <summary>
 Fills a dropdownlist with am/pm options.
 </summary>
 <param name="ddlAmPm">The control to fill.</param>
 <param name="bIncludeSelect">Include a select option?</param>
 <param name="nValueType">The type of value to insert into the list items: 0 - (AM, PM), 1 - (a.m., p.m.), 2 - (am, pm)</param>
 <param name="nSelectType">The way to display the select option: 0 - "Please Select", 1 - "Slct"</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillClass(System.Web.UI.WebControls.DropDownList@,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Loads a DDL with a list of class standings.
 </summary>
 <param name="ddlClass">The ddl to add the classes to.</param>
 <param name="bIncludeGrad">Include Grad as a class standing?</param>
 <param name="bUseValueCodes">Use value codes (true) or the class itself (false)?</param>
 <param name="bIncludeSelect">Include the select option?</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillClassStanding(System.Web.UI.WebControls.DropDownList@,System.Int32,System.Boolean,System.Boolean)">
 <summary>
 Fills a control with class standing values.
 </summary>
 <param name="ddlClassStanding">The control to fill.</param>
 <param name="nFilterType">Filters the .Value field of the control. 1 = integer values, 2 = use full class name (i.e. Freshmans), else uses codes (i.e. FR, SO, JU, SE, GR)</param>
 <param name="bIncludeSelect">Include a "Please Select" value in the control?</param>
 <param name="bIncludeGraduate">Include "Graduate" as a class standing option?</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillSemester(System.Web.UI.WebControls.DropDownList@)">
 <summary>
 Loads a DDL with a list of whitworth university semester options.
 </summary>
 <param name="ddlSemesters">The ddl to add semesters to.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillYesNo(System.Web.UI.WebControls.DropDownList@,System.Int32,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
 <summary>
 Fills a ddl with yes and no items.
 </summary>
 <param name="ddlYesNo">The ddl to fill.</param>
 <param name="nIndexToSelect">The index to set as selected.</param>
 <param name="bIncludeMaybe">Include a "Maybe" option?</param>
 <param name="bIncludeEither">Include an "Either" option?</param>
 <param name="bIncludeNeither">Include a "Neither" option?</param>
 <param name="bIncludeAbstain">Include an "Abstain" option?</param>
 <param name="bIncludeInclude">Include an "Include" option?</param>
 <param name="bIncludeExclude">Include an "Exclude" option?</param>
 <param name="bIncludeUnknown">Include an "Unknown" option?</param>
 <param name="bIncludeUndecided">Include an "Undecided" option?</param>
 <param name="bIncludeNA">Include a "N/A" option?</param>
 <param name="bIncludeNotSelected">Include a "Not Selected" option?</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillYesNo(System.Web.UI.WebControls.RadioButtonList@,System.Int32,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
 <summary>
 Fills a rbl with yes and no items.
 </summary>
 <param name="rblYesNo">The rbl to fill.</param>
 <param name="nIndexToSelect">The index to set as selected.</param>
 <param name="bIncludeMaybe">Include a "Maybe" option?</param>
 <param name="bIncludeEither">Include an "Either" option?</param>
 <param name="bIncludeNeither">Include a "Neither" option?</param>
 <param name="bIncludeAbstain">Include an "Abstain" option?</param>
 <param name="bIncludeInclude">Include an "Include" option?</param>
 <param name="bIncludeExclude">Include an "Exclude" option?</param>
 <param name="bIncludeUnknown">Include an "Unknown" option?</param>
 <param name="bIncludeUndecided">Include an "Undecided" option?</param>
 <param name="bIncludeNA">Include a "N/A" option?</param>
 <param name="bIncludeNotSelected">Include a "Not Selected" option?</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillJobCategories(System.Web.UI.WebControls.ListBox@)">
 <summary>
 Fills a listbox with job category items from Web3.Jobs.dbo.JobCategories.
 </summary>
 <param name="lsbJobCategories">The listbox to fill.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillBlanks(System.Object@,System.Object)">
 <summary>
 Replaces null or empty values of a variable with acceptable fill values. Does nothing if the value being checked is not null or empty.
 </summary>
 <param name="oCheck">The variable to check for null or empty values.</param>
 <param name="oFill">The value to assign in place of null or empty values.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillNumbers(System.Object@,System.Int32,System.Int32,System.Boolean,System.Decimal)">
 <summary>
 Fills a control with numeric list items from the starting value to the ending value.
 </summary>
 <param name="oFill">The control to fill.</param>
 <param name="nStartValue">The starting fill value.</param>
 <param name="nEndValue">The ending fill value.</param>
 <param name="bIncludeSelect">Include the "Please Select" list item?</param>
 <param name="nStep">The amount to increment each step.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillListData(System.Object@,System.Data.DataTable,System.String,System.String,System.Boolean,System.String)">
 <summary>
 Takes a DataTable and designates it as the 
 datasource for a list type control (dropdownlist, radiobuttonlist, listbox, etc.).  
 Accepts datatextfield and datavaluefield arguments.
 </summary>
 <param name="oControl">The control to put the data into.</param>
 <param name="sDataTextField">The value of the 'Text' field in the control.</param>
 <param name="sDataValueField">The value of the 'Value' field in the control.</param>
 <param name="bIncludePleaseSelect">Determines whether or not to include a Please Select option at the top of the list.</param>
 <param name="sPleaseSelectText">Optional text which can be substituted for the default text in the Please Select option.</param>
 <remarks>Equivalent to: LoadListData() in TomsLibrary</remarks>
</member>
<member name="M:WhitTools.Filler.FillListData(System.Object@,System.Data.SqlClient.SqlConnection@,System.String,System.String,System.String,System.Boolean,System.String)">
 <summary>
 This version accepts a SQL selection string and a SQL Connection object instead of a 
 DataTable, creates the DataTable and then passes it on to the main version.
 </summary>
 <param name="oControl"></param>
 <param name="cnx"></param>
 <param name="sSelect"></param>
 <param name="sDataTextField"></param>
 <param name="sDataValueField"></param>
 <param name="nIncludePleaseSelect"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillRatingList(System.Web.UI.WebControls.RadioButtonList@,System.Int32,System.Int32)">
 <summary>
 
 </summary>
 <param name="rblRatings"></param>
 <param name="nLowRating"></param>
 <param name="nHighRating"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillDepartments(System.Web.UI.Control@,System.Int32,System.Boolean)">
 <summary>
 Fills a control with a list of departments from the Web3.Communications.dbo.ARA_Departments DataTable.
 </summary>
 <param name="oDepartments">The control to fill.</param>
 <param name="nFilterType">Filter the departments. (
 0 = All common, active departments, 
 1 = Only common, active departments with department chairs assigned, 
 2 = Only common, active departments with cabinet members assigned, 
 3 = Only common, active departments with VPs assigned, 
 4 = Only common, active departments with department chairs and cabinet members assigned, 
 5 = All active departments with department chairs and cabinet members assigned, 
 6 = All departments,
 7 = Copy Job Ticket list
 )</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillDepartmentsQuery(System.Int32)">
 <summary>
 Returns a query string that retrieves a list of departments based off of the provided filter.
 </summary>
 <param name="nFilterType">Filter the departments. (
 0 = All common, active departments, 
 1 = Only common, active departments with department chairs assigned, 
 2 = Only common, active departments with cabinet members assigned, 
 3 = Only common, active departments with VPs assigned, 
 4 = Only common, active departments with department chairs and cabinet members assigned, 
 5 = All active departments with department chairs and cabinet members assigned, 
 6 = All departments,
 7 = Copy Job Ticket list
 )</param>
 <returns>A query string that retrieves a list of filtered departments. Filters according to the following: (
 0 = All common, active departments, 
 1 = Only common, active departments with department chairs assigned, 
 2 = Only common, active departments with cabinet members assigned, 
 3 = Only common, active departments with VPs assigned, 
 4 = Only common, active departments with department chairs and cabinet members assigned, 
 5 = All active departments with department chairs and cabinet members assigned, 
 6 = All departments,
 7 = Copy Job Ticket list
 )</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillDepartmentChairs(System.Web.UI.WebControls.DropDownList@)">
 <summary>
 Fills a dropdownlist with a list of department chairs from the Web3.Communications.dbo.ARA_DepChairList DataTable. The DataValueField contains the department chair's PLID.
 </summary>
 <param name="ddlDepChairs">The control to fill.</param>
 <remarks>There could be multiple departments for a particular PLID, therefore we do not want to make the DataValueField reference the DepartmentChairID value because it would either result in duplicate names in the list or department ids being left off the list.</remarks>
</member>
<member name="M:WhitTools.Filler.FillCabinetMembers(System.Web.UI.WebControls.DropDownList@,System.String)">
 <summary>
 Fills a dropdownlist with a list of cabinet members from the Web3.Communications.dbo.ARA_CabinetList DataTable.
 </summary>
 <param name="ddlCabinetMembers">The control to fill.</param>
 <param name="sDataValueField">The column to assign to the DataValueField. Can be "ID" for the cabinet member ID number, or any column in DT_PEOPLE_LISTING.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillBuildings(System.Web.UI.WebControls.DropDownList@,System.Int32,System.String)">
 <summary>
 Fills a dropdownlist with a list of buildings from the Web3.Facilities.dbo.Buildings DataTable.
 </summary>
 <param name="ddlBuildings">The control to fill.</param>
 <param name="nFilter">The filter to place on the building list. 0 = all active, 1 = on-campus, 2 = full search</param>
 <param name="sDataValueField">The column to assign to the DataValueField.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillRooms(System.Web.UI.WebControls.DropDownList@,System.String,System.String)">
 <summary>
 Fills a dropdownlist with a list of a building's rooms from the Web3.Facilities.dbo.Buildings_Rooms DataTable.
 </summary>
 <param name="ddlRooms">The control to fill.</param>
 <param name="sBuildingID">The building to get rooms for.</param>
 <param name="sDataValueField">The column to assign to the DataValueField.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillLocks(System.Web.UI.WebControls.DropDownList@,System.String,System.String)">
 <summary>
 Fills a dropdownlist with a list of a room's locks from the Web3.Facilities.dbo.Buildings_Rooms_Locks DataTable.
 </summary>
 <param name="ddlLocks">The control to fill.</param>
 <param name="sRoomID">The room to get locks for.</param>
 <param name="sDataValueField">The column to assign to the DataValueField.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillPleaseSelectIntValue(System.String)">
 <summary>
 Returns a ListItem with Text="Please Select" (S_PLEASE_SELECT) and Value=-1 (N_NOT_SELECTED).
 </summary>
 <param name="sPleaseSelectText">The text to put in place of "Please Select".</param>
 <returns>A ListItem with Text="Please Select" (S_PLEASE_SELECT) and Value=-1 (N_NOT_SELECTED).</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillPleaseSelectStringValue(System.String)">
 <summary>
 Returns a ListItem with text="Please Select" and value="".
 </summary>
 <param name="sPleaseSelectText">The text to put in place of "Please Select".</param>
 <returns>A ListItem with Text="Please Select" and Value="".</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillGlobalEnums(System.Web.UI.WebControls.DropDownList@,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Fills a ddl with global enum items.
 </summary>
 <param name="ddl">The ddl to fill.</param>
 <param name="nIndexToSelect">The index to set as selected.</param>
 <param name="bIncludeNo">Include a "No" option?</param>
 <param name="bIncludeYes">Include a "Yes" options?</param>
 <param name="bIncludeMaybe">Include a "Maybe" option?</param>
 <param name="bIncludeEither">Include an "Either" option?</param>
 <param name="bIncludeNeither">Include a "Neither" option?</param>
 <param name="bIncludeAbstain">Include an "Abstain" option?</param>
 <param name="bIncludeInclude">Include an "Include" option?</param>
 <param name="bIncludeExclude">Include an "Exclude" option?</param>
 <param name="bIncludeApproved">Include an "Approved" option?</param>
 <param name="bIncludeDeclined">Include an "Declined" option?</param>
 <param name="bIncludeOpen">Include an "Open" option?</param>
 <param name="bIncludeClosed">Include a "Closed" option?</param>
 <param name="bIncludeUnknown">Include an "Unknown" option?</param>
 <param name="bIncludeUndecided">Include an "Undecided" option?</param>
 <param name="bIncludeNA">Include a "N/A" option?</param>
 <param name="bIncludeNotSelected">Include a "Not Selected" option?</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillGlobalEnums(System.Web.UI.WebControls.RadioButtonList@,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Fills a rbl with global enum items.
 </summary>
 <param name="rbl">The rbl to fill.</param>
 <param name="nIndexToSelect">The index to set as selected.</param>
 <param name="bIncludeNo">Include a "No" option?</param>
 <param name="bIncludeYes">Include a "Yes" options?</param>
 <param name="bIncludeMaybe">Include a "Maybe" option?</param>
 <param name="bIncludeEither">Include an "Either" option?</param>
 <param name="bIncludeNeither">Include a "Neither" option?</param>
 <param name="bIncludeAbstain">Include an "Abstain" option?</param>
 <param name="bIncludeInclude">Include an "Include" option?</param>
 <param name="bIncludeExclude">Include an "Exclude" option?</param>
 <param name="bIncludeApproved">Include an "Approved" option?</param>
 <param name="bIncludeDeclined">Include an "Declined" option?</param>
 <param name="bIncludeOpen">Include an "Open" option?</param>
 <param name="bIncludeClosed">Include a "Closed" option?</param>
 <param name="bIncludeUnknown">Include an "Unknown" option?</param>
 <param name="bIncludeUndecided">Include an "Undecided" option?</param>
 <param name="bIncludeNA">Include a "N/A" option?</param>
 <param name="bIncludeNotSelected">Include a "Not Selected" option?</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillGender(System.Web.UI.WebControls.RadioButtonList@,System.Int32)">
 <summary>
 Fills a control with gender options.
 </summary>
 <param name="rblGender">The control to fill.</param>
 <param name="nIndexToSelect">The index to select. Default is none selected. Can use N_MALE or N_FEMALE to set selected value.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillGender(System.Web.UI.WebControls.DropDownList@,System.Int32,System.Boolean)">
 <summary>
 Fills a control with gender options.
 </summary>
 <param name="ddlGender">The control to fill.</param>
 <param name="nIndexToSelect">The index to select. Default is none selected. Can use N_MALE or N_FEMALE to set selected value.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillTShirtSize(System.Web.UI.WebControls.DropDownList@,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Fills a ddl with T-Shirt sizes.
 </summary>
 <param name="ddlTShirtSize">The control to fill with T-Shirt sizes.</param>
 <param name="bChildXSmall">Include the size Child X-Small?</param>
 <param name="bChildSmall">Include the size Child Small?</param>
 <param name="bChildMedium">Include the size Child Medium?</param>
 <param name="bChildLarge">Include the size Child Large?</param>
 <param name="bAdultSmall">Include the size Adult Small?</param>
 <param name="bAdultMedium">Include the size Adult Medium?</param>
 <param name="bAdultLarge">Include the size Adult Large?</param>
 <param name="bAdultXLarge">Include the size Adult X-Large?</param>
 <param name="bAdultXXLarge">Include the size Adult XX-Large?</param>
 <param name="bChildXLarge">Include the size Adult X-Large</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillColors(System.Web.UI.WebControls.ListControl@,System.Boolean,System.Boolean)">
 <summary>
 Fills a dropdownlist with colors. The value is the color's ARGB value.
 </summary>
 <param name="lcColors">The control to fill.</param>
 <param name="bIncludeSelect">Include a "Please Select" option?</param>
 <param name="bBasicsOnly">Only include basic, common colors?</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillDaysOfWeek(System.Object@,System.Boolean)">
 <summary>
 Fills a dropdownlist control with days of the week.
 </summary>
 <param name="oDaysOfWeek">The control to add days of the week to.</param>
 <remarks>Example: FillDaysOfWeek(ddlDaysOfWeek)</remarks>
</member>
<member name="M:WhitTools.Filler.FillVehicleList(System.Web.UI.WebControls.DropDownList@,System.Boolean,System.Boolean)">
 <summary>
 Fills a dropdownlist with vehicles available in Facilities Services. Web3.Facilities.dbo.Vehicles.
 </summary>
 <param name="ddlVehicles">The control to fill with vehicles.</param>
 <param name="bIncludeSelect">Include a "Please Select" option.</param>
 <param name="bUseShort">Use the short vehicle description value instead of the longer description.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillPhoneTypes(System.Web.UI.WebControls.DropDownList@,System.Boolean,System.Int32,System.Boolean)">
 <summary>
 Fills a dropdownlist with types of phone numbers.
 </summary>
 <param name="ddlPhoneTypes">The control to fill.</param>
 <param name="bIncludeSelect">Include "Please Select" option?</param>
 <param name="nValueType">Determines the way the .Value field is populated. (1=Integer, 2=String, 3=Char, 4=All Phone Types)</param>
 <param name="bIncludeOther">Include "Other" as an option? N/A for nValueType=4.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillPrefixes(System.Web.UI.WebControls.DropDownList@,System.Boolean,System.Int32)">
 <summary>
 Fills a control with name prefixes.
 </summary>
 <param name="ddlPrefix">The control to fill.</param>
 <param name="bIncludeSelect">Include a "Please Select" option?</param>
 <param name="nValueType">The type of the value field. 1=ID, 2=Prefix.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillSuffixes(System.Web.UI.WebControls.DropDownList@,System.Boolean,System.Int32)">
 <summary>
 Fills a control with name suffixes.
 </summary>
 <param name="ddlSuffix">The control to fill.</param>
 <param name="bIncludeSelect">Include a "Please Select" option?</param>
 <param name="nValueType">The type of the value field. 1=ID, 2=Suffix.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillEthnicity(System.Web.UI.WebControls.RadioButtonList@,System.Int32,System.Int32)">
 <summary>
 Fills a control with ethnicities.
 </summary>
 <param name="rblEthnicity">The control to fill.</param>
 <param name="nSelectedIndex">The index to set as selected.</param>
 <param name="nEthnicityType">The type of ethnicity to display. 1=Hispanic/Non-Hispanic, 2=Common, 3=DataWarehouse.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillEthnicity(System.Web.UI.WebControls.ListBox@,System.Int32,System.Int32)">
 <summary>
 Fills a control with ethnicities.
 </summary>
 <param name="lsbEthnicity">The control to fill.</param>
 <param name="nSelectedIndex">The index to set as selected.</param>
 <param name="nEthnicityType">The type of ethnicity to display. 1=Hispanic/Non-Hispanic, 2=Common, 3=DataWarehouse.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillEthnicity(System.Web.UI.WebControls.DropDownList@,System.Boolean,System.Int32,System.Int32)">
 <summary>
 Fills a control with ethnicities.
 </summary>
 <param name="ddlEthnicity">The control to fill.</param>
 <param name="nSelectedIndex">The index to set as selected.</param>
 <param name="nEthnicityType">The type of ethnicity to display. 1=Hispanic/Non-Hispanic, 2=Common, 3=DataWarehouse.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillEthnicityTypes(System.Web.UI.WebControls.DropDownList@,System.Boolean,System.Boolean)">
 <summary>
 Fills a control with ethnicity types.
 </summary>
 <param name="ddlEthnicityTypes">The control to fill.</param>
 <param name="bIncludeSelect">Include a "Please Select" option?</param>
 <param name="bExcludeDataWarehouse">Exclude the DataWarehouse option?</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillBlankDataTable(System.Int32,System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Creates a DataTable with the provided column names and the indicated number of rows.
 </summary>
 <param name="nRows">The number of blank rows to add to the DataTable. Must be >= 1.</param>
 <param name="sColumn1">The name of the column. Defaults to "PLID" if a blank string is passed.</param>
 <param name="sColumn2">The name of the column.</param>
 <param name="sColumn3">The name of the column.</param>
 <param name="sColumn4">The name of the column.</param>
 <param name="sColumn5">The name of the column.</param>
 <returns>A DataTable with blank rows and columns with the names provided.</returns>
 <remarks>Does the exact same thing as GetBlankDataTable().</remarks>
</member>
<member name="M:WhitTools.Filler.FillSchoolTypes(System.Web.UI.WebControls.DropDownList@,System.Int32,System.Boolean)">
 <summary>
 Fills a control with school level types.
 </summary>
 <param name="ddlSchoolTypes">The control to fill.</param>
 <param name="nSelectedIndex">The index to select.</param>
 <param name="bIncludePleaseSelect">Include a "Please Select" option?</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillSchools(System.Web.UI.WebControls.DropDownList@,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Fills a control with schools from the database based on the provided filter.
 </summary>
 <param name="ddlSchools">The control to fill.</param>
 <param name="bIncludeElementarySchools">Include elementary schools?</param>
 <param name="bIncludeMiddleSchools">Include middle schools?</param>
 <param name="bIncludeHighSchools">Include high schools?</param>
 <param name="bIncludeColleges">Include colleges/universities?</param>
 <param name="sDataTextField">The DataTable column to show in the dropdownlist's DataTextField value. The options are: School, Description</param>
 <param name="bIncludePleaseSelect">Include a "Please Select" option?</param>
 <param name="bIncludeLocalElementarySchools">Include local elementary schools in the list?</param>
 <param name="bIncludeLocalMiddleSchools">Include local middle schools in the list?</param>
 <param name="bIncludeLocalHighSchools">Include local high schools in the list?</param>
 <param name="bIncludeLocalColleges">Include local colleges/universities in the list?</param>
 <param name="bIncludeRedirectedSchools">Include schools that are redirected to other school IDs?</param>
 <remarks>
 Related functions:
     FillElementarySchools()
     FillMiddleSchools()
     FillHighSchools()
     FillUniversities()
 </remarks>
</member>
<member name="M:WhitTools.Filler.FillElementarySchools(System.Web.UI.WebControls.DropDownList@,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Fills a control with elementary schools from the database.
 </summary>
 <param name="ddlSchools">The control to fill.</param>
 <param name="sDataTextField">The DataTable column to show in the dropdownlist's DataTextField value.</param>
 <param name="bIncludePleaseSelect">Include a "Please Select" option?</param>
 <param name="bIncludeLocalElementarySchools">Include local elementary schools in the list?</param>
 <param name="bIncludeLocalMiddleSchools">Include local middle schools in the list?</param>
 <param name="bIncludeLocalHighSchools">Include local high schools in the list?</param>
 <param name="bIncludeLocalColleges">Include local colleges/universities in the list?</param>
 <param name="bIncludeRedirectedSchools">Include schools that are redirected to other school IDs?</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillMiddleSchools(System.Web.UI.WebControls.DropDownList@,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Fills a control with middle schools from the database.
 </summary>
 <param name="ddlSchools">The control to fill.</param>
 <param name="sDataTextField">The DataTable column to show in the dropdownlist's DataTextField value.</param>
 <param name="bIncludePleaseSelect">Include a "Please Select" option?</param>
 <param name="bIncludeLocalElementarySchools">Include local elementary schools in the list?</param>
 <param name="bIncludeLocalMiddleSchools">Include local middle schools in the list?</param>
 <param name="bIncludeLocalHighSchools">Include local high schools in the list?</param>
 <param name="bIncludeLocalColleges">Include local colleges/universities in the list?</param>
 <param name="bIncludeRedirectedSchools">Include schools that are redirected to other school IDs?</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillHighSchools(System.Web.UI.WebControls.DropDownList@,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Fills a control with high schools from the database.
 </summary>
 <param name="ddlSchools">The control to fill.</param>
 <param name="sDataTextField">The DataTable column to show in the dropdownlist's DataTextField value.</param>
 <param name="bIncludePleaseSelect">Include a "Please Select" option?</param>
 <param name="bIncludeLocalElementarySchools">Include local elementary schools in the list?</param>
 <param name="bIncludeLocalMiddleSchools">Include local middle schools in the list?</param>
 <param name="bIncludeLocalHighSchools">Include local high schools in the list?</param>
 <param name="bIncludeLocalColleges">Include local colleges/universities in the list?</param>
 <param name="bIncludeRedirectedSchools">Include schools that are redirected to other school IDs?</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillUniversities(System.Web.UI.WebControls.DropDownList@,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Fills a control with colleges and universities from the database.
 </summary>
 <param name="ddlSchools">The control to fill.</param>
 <param name="sDataTextField">The DataTable column to show in the dropdownlist's DataTextField value.</param>
 <param name="bIncludePleaseSelect">Include a "Please Select" option?</param>
 <param name="bIncludeLocalElementarySchools">Include local elementary schools in the list?</param>
 <param name="bIncludeLocalMiddleSchools">Include local middle schools in the list?</param>
 <param name="bIncludeLocalHighSchools">Include local high schools in the list?</param>
 <param name="bIncludeLocalColleges">Include local colleges/universities in the list?</param>
 <param name="bIncludeRedirectedSchools">Include schools that are redirected to other school IDs?</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillTimeOfDay(System.Object@,System.Boolean)">
 <summary>
 Fills a control with time of day options.
 </summary>
 <param name="oTimeOfDay">The control to add the time of day options to.</param>
 <remarks>Example: FillTimeOfDay(rblTimeOfDay)</remarks>
</member>
<member name="M:WhitTools.Filler.FillMaritalStatus(System.Web.UI.WebControls.RadioButtonList@,System.Int32,System.Int32)">
 <summary>
 Fills a control with marital status options.
 </summary>
 <param name="rblMaritalStatus">The control to fill.</param>
 <param name="nIndexToSelect">The index to set initially selected. Can use N_MARRIED or N_SINGLE to set selected index.</param>
 <param name="nDisplayType">The way the values are displayed. 1=All Options, 2=Basic Options (Divorced, Married, Married to Alum, Single, Widowed)</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillMaritalStatus(System.Web.UI.WebControls.DropDownList@,System.Int32,System.Boolean,System.Int32)">
 <summary>
 Fills a control with marital status options.
 </summary>
 <param name="ddlMaritalStatus">The control to fill.</param>
 <param name="nIndexToSelect">The index to set initially selected. Can use N_MARRIED or N_SINGLE to set selected index.</param>
 <param name="nDisplayType">The way the values are displayed. 1=All Options, 2=Basic Options (Divorced, Married, Married to Alum, Single, Widowed)</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillApproveDecline(System.Web.UI.WebControls.RadioButtonList@,System.Int32,System.Boolean)">
 <summary>
 Fills a control with Approve, Decline and an optional Undecided option.
 </summary>
 <param name="rbl">The control to fill.</param>
 <param name="nIndexToSelect">The index to default as selected.</param>
 <param name="bIncludeUndecided">Include an "Undecided" option?</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillMilitaryStatus(System.Web.UI.WebControls.RadioButtonList@)">
 <summary>
 Fills a control with military status options.
 </summary>
 <param name="rblMilitaryStatus">The control to fill.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillArmedServicesStatus(System.Web.UI.WebControls.RadioButtonList@)">
 <summary>
 Fills a control with armed services status options.
 </summary>
 <param name="rblArmedServicesStatus">The control to fill.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillPosition(System.Web.UI.WebControls.DropDownList@,System.Int32,System.Boolean)">
 <summary>
 Fills a control with employment positions.
 </summary>
 <param name="ddlPositions">The control to fill.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillReligions(System.Web.UI.WebControls.DropDownList@,System.Int32,System.Boolean)">
 <summary>
 Fills a control with religions.
 </summary>
 <param name="ddlReligions">The control to fill.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillChristianDenominations(System.Web.UI.WebControls.DropDownList@,System.Int32,System.Boolean)">
 <summary>
 Fills a control with Christian denominations.
 </summary>
 <param name="ddlDenominations">The control to fill.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillVehicleRegistrationTypes(System.Web.UI.WebControls.RadioButtonList@,System.Boolean)">
 <summary>
 Fills a control with vehicle registration types.
 </summary>
 <param name="rbl">The control to fill.</param>
 <param name="bShort">Use the short version?</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillVehicleRegistrationTypes(System.Web.UI.WebControls.DropDownList@,System.Boolean)">
 <summary>
 Fills a control with vehicle registration types.
 </summary>
 <param name="ddl">The control to fill.</param>
 <param name="bShort">Use the short version?</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillOccupations(System.Web.UI.Control@,System.Boolean,System.Int32)">
 <summary>
 Fills a control with occupations.
 </summary>
 <param name="ctrl">The control to fill.</param>
 <param name="bIncludeSelect">Include a "Please Select" option?</param>
 <param name="nFilter">The way to filter the occupations. 1=All, 2=Alumni Only.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillCurrentUsers(System.Web.UI.Control@,System.Boolean,System.Int32,System.String,System.String,System.String)">
 <summary>
 Gets the list of current active users found in the PeopleListing table in adTelephone.
 </summary>
 <param name="ctrl">The control to fill.</param>
 <param name="bIncludeSelect">Include "Please Select" as an option?</param>
 <param name="nFilter">1 = All, 2 = Faculty/Staff Only, 3 = Students Only</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Filler.FillPageControlsWithValues(System.Web.UI.ControlCollection,System.Int32)">
 <summary>
 Fills controls on the page with values to speed up web team testing.
 </summary>
 <param name="ctrlCollection">The control collection to fill values in for. Defaults to the current page.</param>
 <param name="nDepth">A variable to keep track of depth to avoid infinite loops. Sends an error report after the maximum depth is reached.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Formatter.FormatUsername(System.String)">
 <summary>
 Formats a sUsername entered via NTFS, removes the NT and internet domains from it.
 </summary>
 <param name="sUsername">The sUsername to format.</param>
 <returns>The shortened, formatted version of the sUsername.</returns>
 <remarks>Example: sUsername = FormatUsername(sUsername)</remarks>
</member>
<member name="M:WhitTools.Formatter.FormatPrintableText(System.String)">
 <summary>
 Replaces Chr(13) characters from a string and replaces it with the html <br />.
 This function is sometimes necessary when displaying data pulled from SQL.
 </summary>
 <param name="sFormat">The string to format.</param>
 <returns>The formatted version of the input string.</returns>
 <remarks>Example: sText = FormatPrintableText(sText)</remarks>
</member>
<member name="M:WhitTools.Formatter.FormatForSQL(System.String)">
 <summary>
 Escapes any apostrophe characters for direct insertion into a SQL database.
 </summary>
 <param name="sFormat"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Formatter.FormatPhone(System.Object,System.Boolean)">
 <summary>
 Formats a phone number string into a standard display syntax. (509.777.1000)
 </summary>
 <param name="sFormatPhone">The phone number to format.</param>
 <param name="bIncludeExtensionX">If the phone number is returned as an extension (ex: x1000), should the preceding "x" be included?</param>
 <returns>The formatted version of the phone number. (509.777.1000)</returns>
 <remarks>Example: lblPhone.text = FormatPhone(dt.rows(nCounter).item("Phone"))</remarks>
</member>
<member name="M:WhitTools.Formatter.FormatPhoneExt(System.Object,System.Boolean)">
 <summary>
 Formats a phone number string into a standard extension display syntax. (x1000)
 </summary>
 <param name="sFormatPhone">The phone number to format into an extension.</param>
 <param name="bIncludeX">Include an x before the extension? (ex: x1000)</param>
 <returns>The formatted version of the phone number extension. (x1000)</returns>
 <remarks>Example: lblPhone.text = FormatPhoneExt(dt.rows(nCounter).item("Phone"))</remarks>
</member>
<member name="M:WhitTools.Formatter.FormatGLAccount(System.String,System.String)">
 <summary>
 Formats an account number string into a standard display syntax.
 </summary>
 <param name="sAccount">The account number to format.</param>
 <param name="sReturnNonAccount">The value to return if the account number is not a 12-digit number, is not blank and is not null.</param>
 <returns>The formatted version of the account number. If sAccount is null or blank then S_NONE is returned. If there is no match then the parameter sReturnNonAccount is returned, which defaults to returning the original sAccount parameter unless otherwise specified.</returns>
 <remarks>Example: lblAccount.text = FormatPhone(dt.rows(nCounter).item("Account"))</remarks>
</member>
<member name="M:WhitTools.Formatter.FormatSSN(System.String)">
 <summary>
 Formats a SSN in the typical manner using dashes.
 </summary>
 <param name="sSSN">The SSN to format.</param>
 <returns>The formatted version of the SSN.</returns>
 <remarks>Example: lblSSN.text = FormatSSN(dt.rows(nCounter).item("SSN"))</remarks>
</member>
<member name="M:WhitTools.Formatter.FormatTime(System.String,System.Boolean,System.Boolean)">
 <summary>
 Formats a string with the shortened version of a time stamp.
 </summary>
 <param name="sTime">The string to format.</param>
 <param name="bLongToShort">Format long version to short(true)? Or short version to long(false)?</param>
 <returns>The formatted version of the string.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Formatter.FormatNoBlanks(System.Object,System.Object)">
 <summary>
 Checks for null or empty values and returns a replacement value if found.
 </summary>
 <param name="oInput">The variable to check for null or empty values.</param>
 <param name="oFill">The value to return if input is null or empty.</param>
 <returns>A non-null, non-empty value in the same type as input.</returns>
 <remarks>Assumes oInput and oFill are valid values to return.</remarks>
</member>
<member name="M:WhitTools.Formatter.FormatWebLink(System.String)">
 <summary>
 Take a website URL, makes sure it includes the appropriate prefix (http://), returns a string
 containing HTML code for displaying an anchor link to that URL.
 </summary>
 <param name="URL">The URL string being operated on.</param>
 <returns>A non-null value in the same type as input.</returns>
</member>
<member name="M:WhitTools.Formatter.FormatYesNo(System.Object)">
 <summary>
 Checks if an passed value can be successfully evaluated as Yes or No and returns the appropriate value.
 </summary>
 <param name="sYesNo">The value being operated on.</param>
 <returns>Either "Yes" or "No".</returns>
</member>
<member name="M:WhitTools.Formatter.FormatDateLeadingZeroes(System.DateTime,System.Int32)">
 <summary>
 Formats a datetime string into a version where single digit values have a leading zero. This helps to keep all datetime strings the same length regardless of what the date/time actually is.
 </summary>
 <param name="dateTarget">The datetime object to format.</param>
 <param name="nFormat">The way to format the datetime object. 1 = '01/01/1900 01:01 AM', 2 = '01:01 AM', 3 = '01/01/1900 01:01:001', 4 = '01/01/1900', 5 = '01/01/00', 6 = January 1, 7 = January 1st, 8 = 19000101 (use for file names), 9 = 1900_01_01 (use for file names)</param>
 <returns>A formatted datetime string where single digit values have a leading zero.</returns>
 <remarks>
 nFormat=1 | 01/01/1900 01:01 AM
 nFormat=2 | 01:01 AM
 nFormat=3 | 01/01/1900 01:01:001
 nFormat=4 | 01/01/1900
 nFormat=5 | 01/01/00
 nFormat=6 | January 1
 nFormat=7 | January 1st
 nFormat=8 | 19000101 (Year/Month/Day, use for file names)
 nFormat=9 | 1900_01_01 (Year/Month/Day, use for file names)
 </remarks>
</member>
<member name="M:WhitTools.Formatter.FormatStudentID(System.String)">
 <summary>
 Makes sure that a StudentID # is 7 characters long and is actually a number.
 </summary>
 <param name="sStudentID">The student id to format.</param>
 <returns>A valid student id number or an error message.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Formatter.FormatDateTimeframe(System.DateTime,System.DateTime,System.Boolean,System.Boolean)">
 <summary>
 Returns a formatted timeframe string.
 </summary>
 <param name="dateStart">The beginning of the timeframe.</param>
 <param name="dateEnd">The end of the timeframe.</param>
 <param name="bUseLeadingZeroes">Format the times with leading zeroes?</param>
 <param name="bUseFullDateString">Show the full time string?</param>
 <returns>A formatted timeframe string.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Formatter.FormatStringStripNumbers(System.String)">
 <summary>
 Removes all digits 0-9 from a string.
 </summary>
 <param name="sTarget">The string to strip numbers from.</param>
 <returns>A copy of the string without numbers in it.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Formatter.FormatStringStripCarriageReturn(System.String)">
 <summary>
 Removes all carriage returns from a string.
 </summary>
 <param name="sTarget"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Formatter.FormatStringForStringInclusion(System.String)">
 <summary>
 Formats a string so that it can be enclosed as a string object in code.  Removes " and replaces with "" to work with such string objects.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Formatter.FormatStringStripNonNumbers(System.String,System.Boolean)">
 <summary>
 Removes all characters except the digits 0-9 from a string.
 </summary>
 <param name="sTarget">The string to strip characters from.</param>
 <param name="bStripDecimal">Leave the decimal in the string?</param>
 <returns>A copy of the string with only numbers in it.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Formatter.FormatStringStripCharacters(System.String,System.String)">
 <summary>
 Removes all provided characters in the strip list from a string.
 </summary>
 <param name="sTarget">The string to strip characters from.</param>
 <param name="sStripList">A string of characters to strip from the target string.</param>
 <returns>A copy of the string with the stripped characters no longer in it.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Formatter.FormatStringStripNonAlphabet(System.String)">
 <summary>
 Removes all non-letter characters from a string.
 </summary>
 <param name="sTarget">The string to strip non-letter characters from.</param>
 <returns>A copy of the string with the stripped characters no longer in it.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Formatter.FormatStringStripNonAlphaNumeric(System.String,System.Boolean)">
 <summary>
 Removes all non-letter, non-number characters from a string.
 </summary>
 <param name="sTarget">The string to strip non-letter, non-number characters from.</param>
 <param name="bStripSpaces">Strip spaces as well?</param>
 <returns>A copy of the string with the stripped characters no longer in it.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Formatter.FormatStringStripAnchorTag(System.String)">
 <summary>
 Strips any HTML anchor tags in the string.
 </summary>
 <param name="sHTML">The html string to strip anchor tags from.</param>
 <returns>An html string with all anchor tags stripped.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Formatter.FormatMoney(System.String,System.Boolean)">
 <summary>
 Takes a string and formats it into currency format.
 </summary>
 <param name="sMoneyValue">The string to convert into currency format.</param>
 <returns>A string formatted into currency.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Formatter.WhitworthFormat(System.String,System.Int32,System.Int32,System.Int32)">
 <summary>
 Formats a date/time string to fit Whitworth's style and content standards.
 </summary>
 <param name="sTarget">The date/time string to be formatted</param>
 <returns>The Whitworth-formatted version of the string.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Formatter.WhitworthFormat1(System.String)">
 <summary>
 Formats a date/time string to fit Whitworth's style and content standards.
 </summary>
 <param name="sTarget">The date/time string to be formatted</param>
 <returns>The Whitworth-formatted version of the string.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Formatter.WhitworthFormat(System.DateTime,System.Boolean,System.Boolean)">
 <summary>
 Formats a date/time string to fit Whitworth's style and content standards.
 </summary>
 <param name="dateTarget">The date/time to be formatted</param>
 <param name="bIncludeTime">Include the .ToShortTimeString() portion of the date?</param>
 <param name="bIncludeYear">Include the .Year portion of the date?</param>
 <returns>The Whitworth-formatted version of the string.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Formatter.FormatHeading(System.String,System.Int32,System.Int32)">
 <summary>
 Formats a DataTable heading string value. FormatType 1=Add a space between two letters where the first is lowercase and the second is uppercase (i.e. WhitworthUniversity becomes Whitworth University).
 </summary>
 <param name="sHeading">The heading text to format.</param>
 <param name="nFormatType">The type of format to apply to the text.</param>
 <param name="nStartIndex">The index within the heading string to start the formatting at.</param>
 <returns>A formatted heading string.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Formatter.FormatNumberLeadingZeroes(System.String,System.Int32)">
 <summary>
 Adds leading zeroes to a number to match the minimum number of digits.
 </summary>
 <param name="sFormat">The number to format.</param>
 <param name="nMinimumDigits">The number of digits to guarantee.</param>
 <returns>The formatted version of the number as a string.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Formatter.FormatStringAddSpaces(System.String,System.Boolean,System.Boolean)">
 <summary>
 Adds spaces to a string between lowercase letters (or digits) followed by uppercase letters.
 </summary>
 <param name="sTarget">The string to format.</param>
 <param name="bSpaceAfterNumber">Add a space after numbers?</param>
 <returns>The formatted version of the string.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Formatter.FormatStringUpperFirstChar(System.String,System.Boolean)">
 <summary>
 Sets the first character of the words in a string to their uppercase value.
 </summary>
 <param name="sTarget">The string to format.</param>
 <param name="bAllWords">Format all words?</param>
 <returns>The formatted version of the string.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Formatter.FormatReadableQuery(System.String)">
 <summary>
 Takes a query and returns a more readable version of the query string.
 </summary>
 <param name="sQuery">The query to format.</param>
 <returns>A more readable version of the query.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetAcademicYear(System.Int32)">
 <summary>
 Used for displaying years on forms which correspond to the academic year. These displays may need to change, depending on what time of the year it is.
 </summary>
 <param name="nMonth">The month to check.</param>
 <returns>The academic year in relation to the given month.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetAcademicYear(System.DateTime)">
 <summary>
 Used for displaying years on forms which correspond to the academic year. These displays may need to change, depending on what time of the year it is.
 </summary>
 <param name="dateTime">The date to check.</param>
 <returns>The first academic year in relation to the given month. (Example: Jan 7, 2011 returns 2010 for the 2010/11 academic year)</returns>
 <remarks>
 Examples: 
 Jan 7th, 2011 returns 2010 for the 2010/11 academic year
 August 12th, 2011 returns 2011 for the 2011/12 academic year
 </remarks>
</member>
<member name="M:WhitTools.Getter.GetCharCodes(System.Int32,System.Int32,System.String)">
 <summary>
 Returns a string of all of the char codes within the provided code values.
 </summary>
 <remarks>If sDelimeter="table" then the results will be placed in a table.</remarks>
</member>
<member name="M:WhitTools.Getter.GetCharCodes(System.String,System.String)">
 <summary>
 Returns a string of the char codes of the provided string.
 </summary>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetDataTableValues(System.Data.DataTable,System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
 <summary>
 Returns a string of the values in a DataTable.
 </summary>
 <param name="dtValues">The DataTable to see the values of.</param>
 <param name="sDelimeter">How to separate values.</param>
 <param name="nRowCutoff">The row to stop finding values at.</param>
 <param name="nDisplayType">The way the data is displayed.</param>
 <param name="nColumnCutOff">The number of characters to display in the column fields.</param>
 <returns>A string to display the table values.</returns>
 <remarks>Display types: 1=vertical, 2=horizontal</remarks>
</member>
<member name="M:WhitTools.Getter.GetDataRowValues(System.Data.DataRow,System.String,System.Int32,System.Int32)">
 <summary>
 Returns a string of the values in a DataRow.
 </summary>
 <param name="dr">The DataRow to see the values of.</param>
 <param name="sDelimeter">How to separate values.</param>
 <param name="nDisplayType">The way the data is displayed. 1=vertical, 2=horizontal</param>
 <param name="nColumnCutOff">The number of characters to display in the column fields.</param>
 <returns>A string to display the table values.</returns>
 <remarks>Display types: 1=vertical, 2=horizontal</remarks>
</member>
<member name="M:WhitTools.Getter.GetDataTableColumnsHTML(System.Data.DataTable,System.String)">
 <summary>
 Returns the list of columns and their datatypes found in a DataTable.
 </summary>
 <param name="dtValues">The target DataTable.</param>
 <param name="sDelimeter">The string which will be used to separate the columns displayed.</param>
 <returns>A string to display the table column values.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetListofValues(System.String,System.String,System.String,System.String,System.Data.SqlClient.SqlConnection)">
 <summary>
 Returns a string of the values retrieved by a SQL select string in a comma-delimited list format.
 </summary>
 <param name="cnx">The SQL connection to be used for retrieving the data.</param>
 <param name="sSelect">The SQL string to be used to specify which data is retrieved.</param>
 <param name="sTarget">The single SQL column which is to be used as the basis for creating the list.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetListOfSelectedValues(System.Object@,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Returns a delimited list of the values selected in a list control.
 </summary>
 <param name="oTarget"></param>
 <param name="sSelectionType"></param>
 <param name="sDelimiter"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetStudentInfo(System.String)">
 <summary>
 Returns a DataTable filled with a student's information.
 </summary>
 <param name="sPLID">The PLID # to search on.</param>
 <returns>A DataTable with the student's information.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetUserInfo(System.String,System.String)">
 <summary>
 
 </summary>
 <param name="sValue"></param>
 <param name="sColumn"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetStudentName(System.String)">
 <summary>
 Returns the name of the student.
 </summary>
 <param name="sStudentID">The student id # to search on.</param>
 <returns>The full name of the student.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetStudentFirstName(System.String)">
 <summary>
 Returns the first name of the student.
 </summary>
 <param name="sStudentID">The student id # to search on.</param>
 <returns>The first name of the student.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetStudentLastName(System.String)">
 <summary>
 Returns the last name of the student.
 </summary>
 <param name="sStudentID">The student id # to search on.</param>
 <returns>The last name of the student.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetStudentEmail(System.String)">
 <summary>
 Returns the email address of the student.
 </summary>
 <param name="sStudentID">The student id # to search on.</param>
 <returns>The email address of the student.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetStudentInfo(System.String,System.String)">
 <summary>
 Gets a student's information based on their student id # and the column to pull from the DataTable.
 </summary>
 <param name="sStudentID">The student's ID #.</param>
 <param name="sColumn">The DataTable column to pull from.</param>
 <returns>The selected information for the student.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetStudentIDByUsername(System.String)">
 <summary>
 Returns the student id # for the provided username.
 </summary>
 <param name="sUsername">The username to search on. Formatting is handled within the function.</param>
 <returns>The user's student id #.</returns>
 <remarks>GetCurrentUsername() can be used to get the current user's username.</remarks>
</member>
<member name="M:WhitTools.Getter.GetStudentInfoByUsername(System.String,System.String)">
 <summary>
 Gets a student's information based on their username and the column to pull from the DataTable.
 </summary>
 <param name="sUsername">The username to use. Formatting is taken care of within the function.</param>
 <param name="sInfoToGet">The DataTable column to pull from.</param>
 <returns>The selected information for the student.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetStudentInfoByUsername(System.String)">
 <summary>
 Gets all of a student's information based on their username.
 </summary>
 <param name="sUsername">The username to use.</param>
 <returns>A DataTable with the student's information.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetStudentIDByEmail(System.String)">
 <summary>
 Returns the student id # for the provided email address.
 </summary>
 <param name="sEmail">The email address to search on.</param>
 <returns>The user's student id #.</returns>
 <remarks>Request.Servervariables.LOGON_USER.ToString() can be used to get the current user's username.</remarks>
</member>
<member name="M:WhitTools.Getter.GetStudentInfoByEmail(System.String,System.String)">
 <summary>
 Gets a student's information based on their email address and the column to pull from the DataTable.
 </summary>
 <param name="sEmail">The email address to use. Formatting is taken care of within the function.</param>
 <param name="sInfoToGet">The DataTable column to pull from.</param>
 <returns>The selected information for the student.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetStudentInfoByEmail(System.String)">
 <summary>
 Gets a student's information based on their email address.
 </summary>
 <param name="sEmail">The email address to use. Formatting is taken care of within the function.</param>
 <returns>The selected information for the student.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetStudentInfoByName(System.String,System.String)">
 <summary>
 Gets a student's information by matching their name.
 </summary>
 <param name="sFirstName">The student's first name as it appears in DT_PEOPLE_LISTING.</param>
 <param name="sLastName">The student's last name as it appears in DT_PEOPLE_LISTING.</param>
 <returns>The student's information.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetStudentInfoByName(System.String,System.String,System.String)">
 <summary>
 Gets a student's information by matching their name.
 </summary>
 <param name="sFirstName">The student's first name as it appears in DT_PEOPLE_LISTING.</param>
 <param name="sLastName">The student's last name as it appears in DT_PEOPLE_LISTING.</param>
 <param name="sColumn">The specific column to retrieve.</param>
 <returns>The student's information.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetStudentInfoByFullName(System.String)">
 <summary>
 Gets a student's information by matching their name.
 </summary>
 <param name="sName">The student's name as it appears in DT_PEOPLE_LISTING.</param>
 <returns>The student's information.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetStudentInfoByFullName(System.String,System.String)">
 <summary>
 Gets a student's information by matching their name.
 </summary>
 <param name="sName">The student's name as it appears in DT_PEOPLE_LISTING.</param>
 <param name="sColumn">The specific column of information to retrieve.</param>
 <returns>The student's information.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetUserUndergraduate(System.String)">
 <summary>
 
 </summary>
 <param name="sUsername"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetUserEmail(System.String)">
 <summary>
 Returns the email address associated with the provided username.
 </summary>
 <param name="sUsername">The username of the person to retrieve the email address for.</param>
 <returns>The email address associated with the provided username.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetDateTime(System.Web.UI.WebControls.DropDownList,System.Web.UI.WebControls.DropDownList,System.Web.UI.WebControls.DropDownList,System.Web.UI.WebControls.DropDownList)">
 <summary>
 Gets a DateTime object from the controls provided in the parameters.
 </summary>
 <param name="ddlMonth">The month ddl.</param>
 <param name="ddlDay">The day ddl.</param>
 <param name="ddlYear">The year ddl.</param>
 <param name="ddlTime">The time ddl.</param>
 <returns>A datetime object with the combined datetime values.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetDateTime(System.Web.UI.WebControls.DropDownList,System.Web.UI.WebControls.DropDownList,System.Web.UI.WebControls.DropDownList,System.Web.UI.WebControls.DropDownList,System.Web.UI.WebControls.DropDownList,System.Web.UI.WebControls.DropDownList)">
 <summary>
 Gets a DateTime object from the controls provided in the parameters.
 </summary>
 <param name="ddlMonth">The month ddl.</param>
 <param name="ddlDay">The day ddl.</param>
 <param name="ddlYear">The year ddl.</param>
 <param name="ddlHour">The hour portion of the time stamp.</param>
 <param name="ddlMinute">The minute portion of the time stamp.</param>
 <param name="ddlAmPm">The am/pm portion of the time stamp.</param>
 <returns>A datetime object with the combined datetime values.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetWordCount(System.String)">
 <summary>
 Uses a regular expression to count the number of individual words present in the target string.
 </summary>
 <param name="sTarget">The word string.</param>
 <returns>The number of words found in the string.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetTwitterFeed(System.Int32,System.String)">
 <summary>
 
 </summary>
 <param name="nTweetNumber"></param>
 <param name="sTwitterName"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetTwitterJSON(System.String)">
 <summary>
 
 </summary>
 <param name="sTwitterName"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetTwitterAuthentication(System.String,System.String@,System.String@,System.String@,System.String@)">
 <summary>
 
 </summary>
 <param name="sTwitterName"></param>
 <param name="oauth_token"></param>
 <param name="oauth_token_secret"></param>
 <param name="oauth_consumer_key"></param>
 <param name="oauth_consumer_secret"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetSpotlights(System.String)">
 <summary>
 
 </summary>
 <param name="sDepartment"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetBuildingInfo(System.String)">
 <summary>
 Returns a building's information in a DataTable.
 </summary>
 <param name="sBuildingID">Accepts two values, 1)The building ID number or 2)The building name.</param>
 <returns>The building's information in a DataTable.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetBuildingName(System.String)">
 <summary>
 Gets a building name by the building info provided. Returns S_UNAVAILABLE if no match is found.
 </summary>
 <param name="sBuilding">The building to get the name for.</param>
 <returns>The name of the building. Returns S_UNAVAILABLE if no match is found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetBuildingShortName(System.Int32)">
 <summary>
 Gets a building name by the building id. Returns S_UNAVAILABLE if no match is found.
 </summary>
 <param name="nBuildingID">The building id to get the name for.</param>
 <returns>The name of the building. Returns S_UNAVAILABLE if no match is found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetBuildingID(System.String)">
 <summary>
 Gets a building id by the building ID or name. Ensures the building ID is the most up-to-date version.
 </summary>
 <param name="sBuilding">The building to get the id for. Accepts the building ID, name, short name or code.</param>
 <returns>The building id.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetBuildingIDByRoomID(System.Int32)">
 <summary>
 Returns the building/location id the room/sub-location is associated with. Returns N_ERROR (-255) if no match is found.
 </summary>
 <param name="nRoomID">The room/sub-location to get the building/location id for.</param>
 <returns>The building/location id the room/sub-location is associated with. Returns N_ERROR (-255) if no match is found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetBuildingIDByDwBuilding(System.String)">
 <summary>
 Gets the building/location id by comparing the DataWarehouse building name. Returns N_ERROR (-255) if no match is found.
 </summary>
 <param name="sDwBuilding">The building/location name as it is found in the DataWarehouse.</param>
 <returns>The building/location id the DataWarehouse version is associated with. Returns N_ERROR (-255) if no match is found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetBuildingByDwBuilding(System.String)">
 <summary>
 Gets the building/location name by comparing the DataWarehouse building name. Returns S_UNAVAILABLE if no match is found.
 </summary>
 <param name="sDwBuilding">The building/location name as it is found in the DataWarehouse.</param>
 <returns>The building/location name the DataWarehouse version is associated with. Returns S_UNAVAILABLE if no match is found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetBuildingByID(System.Int32)">
 <summary>
 Returns the name of the building/location for the provided building/location id. Returns S_UNAVAILABLE if no match is found.
 </summary>
 <param name="nBuildingID">The building/location to get the name of.</param>
 <returns>The name of the building/location. Returns S_UNAVAILABLE if no match is found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetBuildingIDsFromDepartment(System.String)">
 <summary>
 Returns the building/location information for all buildings associated with the provided department.
 </summary>
 <param name="sDepIDCode">Accepts three values, 1)The department id number or 2)The department code or 3)The department name as it appears in the DataTable or DataWarehouse.</param>
 <returns>A DataTable containing the building/location information for all buildings associated with the provided department.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetBuildings(System.Int32)">
 <summary>
 Gets all buildings in a DataTable. Active and most up-to-date buildings only. Building names are under the column "Name".
 </summary>
 <param name="nFilter">The way to filter the building list. 0 = Active Buildings, 1 = Full Search (everything that is not redirected, regardless of active status)</param>
 <returns>A DataTable with all buildings' information.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetRoomByID(System.String)">
 <summary>
 Returns the name of the room/sub-location for the provided room id. Returns N_ERROR (-255) if no match is found.
 </summary>
 <param name="sRoomID">The room/sub-location to get the name of.</param>
 <returns>The name of the room/sub-location. Returns N_ERROR (-255) if no match is found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetRoomID(System.String,System.String)">
 <summary>
 Returns the name of the room/sub-location for the provided room id. Returns N_ERROR (-255) if no match is found.
 </summary>
 <param name="sRoomID">The room/sub-location to get the name of.</param>
 <returns>The name of the room/sub-location. Returns N_ERROR (-255) if no match is found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetCmdValues(System.Data.SqlClient.SqlCommand,System.Boolean)">
 <summary>
 Returns a string of the values in an SQLCommand.
 </summary>
 <param name="cmd">The SQLCommand object to see the parameters of.</param>
 <param name="bReportErrors">Report any errors that occur?</param>
 <returns>A string to display the SQLCommand values.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetSqlCmdValues(System.Data.SqlClient.SqlCommand,System.Boolean)">
 <summary>
 Returns a string of the values in an SQLCommand.
 </summary>
 <param name="cmd">The SQLCommand object to see the parameters of.</param>
 <param name="bReportErrors">Report any errors that occur?</param>
 <returns>A string to display the SQLCommand values.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetSqlDataAdapterValues(System.Data.SqlClient.SqlDataAdapter,System.String,System.Boolean)">
 <summary>
 Returns a string of the values in an sql data adapter.
 </summary>
 <param name="sqlDataAdapter">The SqlDataAdapter object to get values for.</param>
 <param name="sDelimeter">The delimiter for the list of values.</param>
 <param name="bReportErrors">Report any errors that occur?</param>
 <returns>A list of SqlDataAdapter values.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetCurrentPage">
 <summary>
 Retrieves the current html page the function is called in.
 </summary>
 <returns>The current html page.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetCurrentUsername(System.String)">
 <summary>
 Retrieves the formatted username of the currently logged in user. Only works when ssl is required. Returns S_UNAVAILABLE if the username is "Unavailable".
 </summary>
 <param name="sUsername">A username to substitute. Only works if a web team member is logged in.</param>
 <returns>The formatted username of the currently logged in user.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetCurrentUsernameFormatted(System.String@)">
 <summary>
 Retrieves the formatted username of the currently logged in user. Only works when ssl is required. Returns S_UNAVAILABLE if the username is "Unavailable".
 </summary>
 <param name="sUsername">A username to substitute. Only works if a Whitworth user is logged in.</param>
 <returns>The formatted username of the currently logged in user. Returns S_UNAVAILABLE if ssl is not available.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetCurrentPLID">
 <summary>
 Retrieves the PLID of the currently logged in user. Only works when ssl is required. Returns S_STUDENT_ID_BLANK if the PLID cannot be found.
 </summary>
 <returns>The PLID of the currently logged in user. Returns S_STUDENT_ID_BLANK (0000000) if not found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetCurrentIsFacultyStaff">
 <summary>
 Retrieves the Faculty/Staff status of the currently logged in user. Only works when ssl is required. Returns False if the user cannot be found.
 </summary>
 <returns>Is the current user a faculty/staff member?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetCurrentIsStudent">
 <summary>
 Retrieves the student status of the currently logged in user. Only works when ssl is required. Returns False if the user cannot be found.
 </summary>
 <returns>Is the current user a student?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetCurrentUserEmail">
 <summary>
 Retrieves the email address of the currently logged in user. Only works when ssl is required. Returns S_UNAVAILABLE if the email address cannot be found.
 </summary>
 <returns>The email address of the currently logged in user.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetCurrentUserPhone">
 <summary>
 Retrieves the 10 digit phone number of the currently logged in user. Only works when ssl is required. Returns S_NONE if the phone number cannot be found.
 </summary>
 <returns>The 10 digit phone number of the currently logged in user.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetCurrentUserPhoneExt(System.Boolean)">
 <summary>
 Retrieves the 4 digit phone number extension of the currently logged in user. Only works when ssl is required. Returns S_NONE if the phone number cannot be found.
 </summary>
 <param name="bIncludeX">Include the x in front of the extension? (Ex: x4647)</param>
 <returns>The 4 digit phone number extension of the currently logged in user.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetCurrentStudentInfo">
 <summary>
 Retrieves the PeopleListing information of the currently logged in user. Only works when ssl is required. Returns a blank DataTable if the user cannot be found.
 </summary>
 <returns>The PeopleListing information of the currently logged in user.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetCurrentStudentInfo(System.String)">
 <summary>
 Retrieves the PeopleListing column information of the currently logged in user. Only works when ssl is required. Returns a blank DataTable if the user cannot be found.
 </summary>
 <returns>The PeopleListing column information of the currently logged in user.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetCurrentStudentName">
 <summary>
 Retrieves the name of the currently logged in user. Only works when ssl is required. Returns an empty value if the user cannot be found.
 </summary>
 <returns>The name of the currently logged in user.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetViewInvoiceLink(System.Int32)">
 <summary>
 Returns a link to the e-commerce invoice viewing page with the invoice number appended to the link.
 </summary>
 <param name="nInvoice"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetSessionVariable(System.String)">
 <summary>
 Returns the value of the provided session variable. Returns S_EMPTY_VALUE if no value is found.
 </summary>
 <param name="sSession">The name of the session variable to get a value for.</param>
 <returns>The value of the provided session variable. Returns S_EMPTY_VALUE if no value is found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetSessionVariableInt(System.String)">
 <summary>
 Returns the integer value of the provided session variable. Returns 0 if no value is found.
 </summary>
 <param name="sSession">The name of the session variable to get an integer value for.</param>
 <returns>The integer value of the provided session variable. Returns 0 if no value is found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetSessionVariableDate(System.String)">
 <summary>
 Returns the date value of the provided session variable. Returns CDate(S_NULL_DATE) if no value is found.
 </summary>
 <param name="sSession">The name of the session variable to get a date value for.</param>
 <returns>The date value of the provided session variable. Returns CDate(S_NULL_DATE) if no value is found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetQueryString(System.String,System.Boolean,System.Boolean)">
 <summary>
 Returns the value of the provided QueryString variable. Returns S_EMPTY_VALUE if no value is found.
 </summary>
 <param name="sQueryString">The name of the QueryString variable to get a value for.</param>
 <param name="bCleanSQL">Use the CleanSQL() function on the query string value?</param>
 <param name="bIncludeSpecialCharacters">Convert special characters to their special form? If false, the strict form will be used.</param>
 <returns>The value of the provided QueryString variable.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetQuickPLIDSearchLink(System.String,System.Boolean,System.String)">
 <summary>
 Creates an anchor tag for linking the user to the quick PLID search page.
 </summary>
 <param name="sText">The html text displayed in the hyperlink.</param>
 <param name="bLinkOnlyForWebTeam">Only web team members get to access the link?</param>
 <param name="sNonWebTeamText">If bLinkOnlyForWebTeam is true, then this is the text non-web team users will see.</param>
 <returns>The anchor tag linking to the quick PLID search page.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetListControlSelectedItems(System.Web.UI.Control@)">
 <summary>
 Gets the number of selected items in a control.
 </summary>
 <param name="cTarget">The control to check the number of selected items of.</param>
 <returns>The number of selected items in the control.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetMaintenanceSetValue(System.Boolean)">
 <summary>
 Gets the value that bypasses the redirect to the maintenance page when a page is set as "Under Maintenance".
 </summary>
 <param name="bWebTeamOnly">Should only web team members be able to see this? Also displays if the maintenance QueryString is set.</param>
 <returns>The Request.QueryString("Maintenance") value that should be set to bypass the maintenance page redirect.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetPageURL(System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Gets the current page url.
 </summary>
 <param name="bShortVersion">The page name of the url only. Still includes QueryString variables.</param>
 <param name="bIncludeQueryStrings">Include query strings in the url?</param>
 <returns>A string with the current page url.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetPagePhysicalPath(System.Boolean,System.Boolean)">
 <summary>
 Gets the physical path to the current page. Defaults to not include the name of the page itself, just 
 the path to the current folder. Includes the "\" at the end of the path.
 </summary>
 <param name="bIncludeCurrentPageInPath">Include the name of the current page in the path?</param>
 <returns>The physical path to the current page.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetControlName(System.Web.UI.Control)">
 <summary>
 Used by the UpdateRepeaterItems method, this method parses a control object that is passed to it
 and, after determining what its data type is, returns the name of the control, sans any prefixes
 attached to it (e.g. "ddl" for dropdownlist).
 </summary>
 <param name="ctlCurrent">The control which you would like to get an ID from.</param>
 <returns></returns>
</member>
<member name="M:WhitTools.Getter.GetControlValue(System.Web.UI.Control)">
 <summary>
 This method will retrieve the selected value from a control that is passed to it.
 The value which is selected is based on the type of control that is passed.
 </summary>
 <param name="ctlCurrent">The control for which you would like to retrieve the selected value.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetDistinctYearsFromDataTable(System.String,System.String,System.Data.SqlClient.SqlConnection,System.String)">
 <summary>
 Gets a unique set of years found in a datetime column from the provided DataTable. Returns the columns as "Year".
 </summary>
 <param name="sDataTable">The DataTable to get distinct years from.</param>
 <param name="sColumn">The column containing the datetime object to query.</param>
 <param name="cnx">The SQLConnection object to use if the full path to the DataTable is not provided.</param>
 <param name="sOrderByDirection">The direction to order the years in. DESC or ASC are the options. Defaults to DESC.</param>
 <returns>A DataTable containing the distinct years found in the column.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetShowIndex(System.String,System.String)">
 <summary>
 Gets the .SelectedIndex value to assign to the ddlShow control on maintenance pages.
 </summary>
 <param name="sCookie">The cookie to check for a value to assign. Overrides sQueryString if provided.</param>
 <param name="sQueryString">The QueryString value to check. Defaults to "Show".</param>
 <returns>The index to assign to the ddlShow control on the page.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetSortIndex(System.String,System.String)">
 <summary>
 Gets the .SelectedIndex value to assign to the ddlSortBy control on maintenance pages.
 </summary>
 <param name="sCookie">The cookie to check for a value to assign. Overrides sQueryString if provided.</param>
 <param name="sQueryString">The QueryString value to check. Defaults to "Sort".</param>
 <returns>The index to assign to the ddlSortBy control on the page.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetQueryStringInt(System.String)">
 <summary>
 Gets the integer value of a QueryString. Returns N_ERROR (-255) if the QueryString is not an integer value.
 </summary>
 <param name="sQueryString">The QueryString value to check. Defaults to "ID".</param>
 <returns>The integer value of the QueryString. Returns N_ERROR (-255) if the QueryString is not an integer value.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetQueryStringDate(System.String)">
 <summary>
 Gets the DateTime value of a QueryString. Returns S_NULL_DATE (1/1/1900) if the QueryString is not a DateTime value.
 </summary>
 <param name="sQueryString">The QueryString value to check.</param>
 <returns>Tthe DateTime value of a QueryString. Returns S_NULL_DATE (1/1/1900) if the QueryString is not a DateTime value.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetStack(System.Exception)">
 <summary>
 Gets the current process stack in a DataTable. Table columns are FileName, LineNumber, ColumnNumber, Frame.
 </summary>
 <param name="ex">The optional exception to pull the stack from.</param>
 <returns>A DataTable filled with the current call stack.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetGuaranteedDate(System.String)">
 <summary>
 Returns a DateTime value no matter what kind of value is passed in. If a DateTime object can be
 created from the provided value then that DateTime is returned, otherwise a null DateTime value is
 returned (1/1/1900 12:00:00 AM).
 </summary>
 <param name="sDate">The string to try to convert to a DateTime object.</param>
 <returns>A DateTime value from the provided date parameter. Returns 1/1/1900 12:00:00 AM upon a failure.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetUniqueNumber(System.Boolean)">
 <summary>
 Returns a unique number based off of the current time.
 </summary>
 <param name="bIncludeMilliseconds">Include milliseconds as a unique identifier.</param>
 <returns>A unique number value based off of the current DateTime.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetAlphabet">
 <summary>
 Returns a DataTable filled with the English alphabet, one letter per row. Column name is "Letter".
 </summary>
 <returns>A DataTable filled with the English alphabet, one letter per row. Column name is "Letter".</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetMajorDescription(System.String)">
 <summary>
 Returns a description of a major value, checking up to three different tables to find a description that matches the passed value.
 </summary>
 <param name="sMajor"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetFacultyStaffOfficeBuilding(System.String)">
 <summary>
 Gets the building/location ID for the Faculty/Staff member provided.
 </summary>
 <param name="sPLID">The Whitworth ID number to get the employee's office building/location id for.</param>
 <returns>The building/location ID of the employee's office. Returns N_ERROR (-255) if no building match is found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetFacultyStaffInfo(System.String)">
 <summary>
 Returns a DataTable filled with an employee's information.
 </summary>
 <param name="sPLID">The PLID # to search on.</param>
 <returns>A DataTable with the employee's information.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetFacultyStaffInfo(System.String,System.String)">
 <summary>
 Returns the employee's information for the given column.
 </summary>
 <param name="sPLID">The PLID # to search on.</param>
 <param name="sColumn">The DataTable column to return the value of.</param>
 <returns>The employee's information for the given column.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetMasterFormsLink(System.Int32)">
 <summary>
 Get the link for the master forms list.
 </summary>
 <param name="nFormID">The form ID.</param>
 <returns>A link to the form url.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetNearestDayOfWeek(System.DateTime,System.String,System.Boolean)">
 <summary>
 Gets the nearest day of the week (DateTime) to the provided date.
 </summary>
 <param name="dateReference">The date to reference to get the nearest day of the week to.</param>
 <param name="sDayOfWeek">The day of the week to find that is nearest to the reference date. Defaults to Sunday. Accepts DayOfWeek.Monday, S_TUESDAY, N_WEDNESDAY, "Thur", etc.</param>
 <param name="bRoundDayDown">If true, look to the nearest date before the reference date. Otherwise, look for the nearest date after the reference date.</param>
 <returns>The nearest day of the week DateTime value to the reference date.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetCurrentYear(System.Int32)">
 <summary>
 Returns the current year based on a month value passed to it.  If the current month is later in the year than the month passed to it, the current year will be considered to be the following year.
 </summary>
 <param name="nMonth"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetEndOfMonth(System.DateTime)">
 <summary>
 Returns the end of the month DateTime value of the provided DateTime parameter. Retains the same 
 timestamp as the parameter DateTime value. Adjusts for leap years.
 </summary>
 <param name="dateReference">The date to get the end of the month for. Defaults to the current date.</param>
 <returns>The date of the last day of the month with the timestamp the same as the passed in value.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetStartOfMonth(System.DateTime)">
 <summary>
 Returns the start of the month DateTime value of the provided DateTime parameter. Retains the same 
 timestamp as the parameter DateTime value.
 </summary>
 <param name="dateReference">The date to get the start of the month for.</param>
 <returns>The date of the first day of the month with the timestamp the same as the passed in value.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetRandomInt(System.Int32,System.Int32)">
 <summary>
 Returns a random number between -2147483648 (Integer.MinValue) and 2147483647 (Integer.MaxValue).
 </summary>
 <param name="nMin">The minimum random integer to return.</param>
 <param name="nMax">The maximum random integer to return.</param>
 <returns>A random number between -2147483648 and 2147483647 (or other provided parameters).</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetRandomIntPositive(System.Int32,System.Int32)">
 <summary>
 Returns a random number between 0 and 2147483647 (Integer.MaxValue).
 </summary>
 <param name="nMax">The maximum random integer to return.</param>
 <param name="nMin">The minimum random integer to return.</param>
 <returns>A random number between 0 and 2147483647 (or other provided parameters).</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetGuaranteedPLID(System.String,System.Boolean)">
 <summary>
 Returns the provide sPLID parameter, unless that PLID does not exist. Otherwise Whitworth University's 
 emergency contact PLID is returned. This function is intended to always provide at least one contact 
 person's PLID for a given purpose.
 </summary>
 <param name="sPLID">If this PLID exists, then it is returned. Otherwise the emergency contact's PLID is returned.</param>
 <param name="bOnlyStaffPLIDs">Only return a Faculty/Staff person's PLID? Even if an existing PLID is provided in the sPLID parameter?</param>
 <returns>If a PLID is provided in the parameters, then that PLID is returned. Otherwise the emergency contact's PLID is returned.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetEmergencyContactPLID(System.String,System.Boolean)">
 <summary>
 Returns the provide sPLID parameter, unless that PLID does not exist. Otherwise Whitworth University's 
 emergency contact PLID is returned. This function is intended to always provide at least one contact 
 person's PLID for a given purpose.
 </summary>
 <param name="sPLID">If this PLID exists, then it is returned. Otherwise the emergency contact's PLID is returned.</param>
 <param name="bOnlyStaffPLIDs">Only return a Faculty/Staff person's PLID? Even if an existing PLID is provided in the sPLID parameter?</param>
 <returns>If a PLID is provided in the parameters, then that PLID is returned. Otherwise the emergency contact's PLID is returned.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetConnectionDatabase(System.Data.SqlClient.SqlConnection)">
 <summary>
 Returns the database the SqlConnection object is connected to.
 </summary>
 <param name="cnx">The SqlConnection object to check.</param>
 <returns>The database the SqlConnection object is associated with.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetSQLTableColumnNames(System.String,System.String,System.String,System.Boolean)">
 <summary>
 Gets the column names for a table.
 </summary>
 <param name="sTableName">The DataTable to pull from.</param>
 <param name="sDatabaseName">The Database to pull from.</param>
 <param name="sDelimiter">The way to delimit columns.</param>
 <param name="bIncludeID">Include ID in the list?</param>
 <returns>A list of a DataTable's column names.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetPictureLinkByUsername(System.String)">
 <summary>
 Get a link to the image for a username.
 </summary>
 <param name="sUsername">The username to get the image for.</param>
 <returns>A link to the image for a username.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetPictureLinkByPLID(System.String)">
 <summary>
 Get a link to the image for a PLID.
 </summary>
 <param name="sPLID">The PLID to get the image for.</param>
 <returns>A link to the image for a PLID.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetBlacklistedEmails">
 <summary>
 Gets a list of blacklisted email addresses where Blacklisted=Yes.
 </summary>
 <returns>A list of blacklisted email addresses.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetEmailBlacklist">
 <summary>
 Gets a list of blacklisted email addresses where Blacklisted=Yes.
 </summary>
 <returns>A list of blacklisted email addresses.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetBlacklistedEmailsFullList(System.Boolean)">
 <summary>
 Gets a ful list of email addresses that are in the blacklist database.
 </summary>
 <param name="bMustBeBlacklisted">Only return email addresses that are listed as Blacklisted=Yes? If false, then all email addresses are returned.</param>
 <returns>A list of blacklisted email addresses.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetDataTableColumnValue(System.String,System.String,System.String,System.String)">
 <summary>
 Gets the column value for a column in a DataTable.
 </summary>
 <param name="sDataTable">The DataTable to check the column in.</param>
 <param name="sColumn">The column to get a value for.</param>
 <param name="sColumnValue">The column value to get. Defaults to "MaxLength"</param>
 <param name="sDatabase">The Database the DataTable is in.</param>
 <returns>The column value for the column in the DataTable</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetDataTableColumnMaxLength(System.String,System.String,System.String)">
 <summary>
 Gets the max length value for a column in a DataTable.
 </summary>
 <param name="sDataTable">The DataTable to check the column in.</param>
 <param name="sColumn">The column to get the max length value for.</param>
 <param name="sDatabase">The Database the DataTable is in.</param>
 <returns>The max length value for the column in the DataTable</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetSubDepartments(System.String@)">
 <summary>
 
 </summary>
 <param name="sDepartmentCode"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetEmailIssuesOccurring">
 <summary>
 Checks if their are any email issues currently happening.
 </summary>
 <returns>Are there email issues occurring?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetDepartmentMembership(System.String,System.String)">
 <summary>
 Checks to see if username belongs to a specified department.
 </summary>
 <param name="sDepartment"></param>
 <param name="sUsername"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Getter.GetWebConfigVariable(System.String)">
 <summary>
 Checks the web.config file for the given variable
 </summary>
 <param name="sVariable"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Local.GetUserLocalInfoSummary">
 <summary>
 Returns a summary of the local user's information.
 </summary>
 <returns>A summary of the local user's information.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Local.PhysicalPathToPage">
 <summary>
 Returns the physical path to the folder the current page is located in. (F:\inetpub\~Whitworth\Administration\)
 </summary>
 <returns>The physical path to the folder the current page is located in.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Local.AuthenticationType">
 <summary>
 The authentication type.
 </summary>
 <returns>The authentication type.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Local.HttpsIsOn">
 <summary>
 Returns if the HTTPS setting is on.
 </summary>
 <returns>Is the HTTPS setting on?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Local.HttpsIsOff">
 <summary>
 Returns if the HTTPS setting is off.
 </summary>
 <returns>Is the HTTPS setting off?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Local.SSLIsOn">
 <summary>
 Returns if the SSL setting is on.
 </summary>
 <returns>Is the SSL setting on?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Local.SSLIsOff">
 <summary>
 Returns if the SSL setting is off.
 </summary>
 <returns>Is the SSL setting off?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Local.LocalIP">
 <summary>
 Returns the local IP address of the user.
 </summary>
 <returns>The local IP address of the user.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Local.RemoteIP">
 <summary>
 Returns the remote user's IP address.
 </summary>
 <returns>The remote user's IP address.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Local.RemoteHostIP">
 <summary>
 Returns the remote host's IP address.
 </summary>
 <returns>The remote host's IP address.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Local.RemotePort">
 <summary>
 The remote port address.
 </summary>
 <returns>The remote port address.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Local.LocalServerName">
 <summary>
 The name of the server. (web2.whitworth.edu)
 </summary>
 <returns>The name of the server.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Local.LocalServerPort">
 <summary>
 The server port.
 </summary>
 <returns>The server port.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Local.LocalServerPortSecure">
 <summary>
 Returns if the server port is secured.
 </summary>
 <returns>Is the server port secured?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Local.LocalServerProtocol">
 <summary>
 The server protocol.
 </summary>
 <returns>The server protocol.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Local.LocalServerSoftware">
 <summary>
 The software that is running on the server.
 </summary>
 <returns>The software that is running on the server.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Local.HttpConnection">
 <summary>
 The http connection state.
 </summary>
 <returns>The http connection state.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Local.HttpAccept">
 <summary>
 The http acceptance string.
 </summary>
 <returns>The http acceptance string.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Local.HttpAcceptEncoding">
 <summary>
 The http acceptance encoding.
 </summary>
 <returns>The http acceptance encoding.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Local.HttpAcceptLanguage">
 <summary>
 The server language setting.
 </summary>
 <returns>The server language setting.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Local.HttpAuthorization">
 <summary>
 The HTTP authorization string.
 </summary>
 <returns>The HTTP authorization string.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Local.HttpHost">
 <summary>
 The HTTP host server.
 </summary>
 <returns>The HTTP host server.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Local.UserBrowser">
 <summary>
 The browser the current user is using.
 </summary>
 <returns>The browser the current user is using.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Maintenance.WritePageNumbers(System.Data.DataTable,System.Web.UI.WebControls.Label@,System.Web.UI.WebControls.DropDownList@,System.String,System.String,System.Int32)">
 <summary>
 Writes the page numbers as links to access the data in chunks instead of all at once.
 </summary>
 <param name="dtResults">The data to sort into pages.</param>
 <param name="lblPageNumbers">The label to display the page links on.</param>
 <param name="sPage">The current page to display.</param>
 <param name="sRedirectURL">The name of the web page calling this function. (Ex: maintenance.aspx)</param>
 <param name="nPageLimit">The number of results to show per page.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Maintenance.CreateResultSet(System.Data.DataTable,System.Web.UI.WebControls.Repeater@,System.String,System.Int32)">
 <summary>
 Binds the data in the provided page to the given repeater.
 </summary>
 <param name="dtResults">The data to separate into chunks.</param>
 <param name="rptTarget">The repeater to display the page results in.</param>
 <param name="sPage">The current page to display.</param>
 <param name="nPageLimit">The number of results to display per page.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Maintenance.ShowPageResults(System.Data.DataTable,System.Web.UI.WebControls.Repeater@,System.Web.UI.WebControls.Label@,System.String,System.String,System.Int32)">
 <summary>
 Breaks a DataTable into chunks to display as pages.
 </summary>
 <param name="dtResults">The data set to separate into chunks.</param>
 <param name="rptTarget">The repeater to display the page data in.</param>
 <param name="lblPageNumbers">The label to display the page links in.</param>
 <param name="sPage">The page of results to display, Request.QueryString("Page").</param>
 <param name="sRedirectURL">The web page calling this function. (Ex: maintenance.aspx)</param>
 <param name="nPageLimit">The number of results to display per page.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Maintenance.ShowFilteredPageResults(System.Data.SqlClient.SqlConnection@,System.String,System.Web.UI.WebControls.Repeater@,System.Web.UI.WebControls.DropDownList@,System.Web.UI.WebControls.Label@,System.String,System.String,System.String,System.Int32,System.Boolean)">
 <summary>
 Filters and breaks a DataTable into chunks to display as pages.
 </summary>
 <param name="cnx">The SQL Connection to use.</param>
 <param name="sSelect">The sql select string to use to find results.</param>
 <param name="rptTarget">The repeater to display the page data in.</param>
 <param name="ddlShow">The dropdownlist to set as a filter. The values of this object's items must be complete, valid sql query strings.</param>
 <param name="lblPageNumbers">The label to display the page links in.</param>
 <param name="sShowIndex">The selected ddlShow index, Request.QueryString("Show").</param>
 <param name="sPage">The page of results to display, Request.QueryString("Page").</param>
 <param name="sRedirectURL">The web page calling this function. (Ex: maintenance.aspx)</param>
 <param name="nPageLimit">The number of results to display per page.</param>
 <param name="bEliminateNull">Eliminate null values from the data set?</param>
 <remarks>The values of all items inside the ddlShow object must be full, valid sql query strings.</remarks>
</member>
<member name="M:WhitTools.Maintenance.ShowFilteredPageResults(System.String,System.Web.UI.WebControls.Repeater@,System.Web.UI.WebControls.DropDownList@,System.Web.UI.WebControls.Label@,System.String,System.String,System.String,System.Int32,System.Boolean,System.Data.SqlClient.SqlConnection@)">
 <summary>
 Filters and breaks a DataTable into chunks to display as pages.
 </summary>
 <param name="sSelect">The sql select string to use to find results.</param>
 <param name="rptTarget">The repeater to display the page data in.</param>
 <param name="ddlShow">The dropdownlist to set as a filter. The values of this object's items must be complete, valid sql query strings.</param>
 <param name="lblPageNumbers">The label to display the page links in.</param>
 <param name="sShowIndex">The selected ddlShow index, Request.QueryString("Show").</param>
 <param name="sPage">The page of results to display, Request.QueryString("Page").</param>
 <param name="sRedirectURL">The web page calling this function. (Ex: maintenance.aspx)</param>
 <param name="nPageLimit">The number of results to display per page.</param>
 <param name="bEliminateNull">Eliminate null values from the data set?</param>
 <param name="cnx">The SQL Connection to use.</param>
 <remarks>The values of all items inside the ddlShow object must be full, valid sql query strings.</remarks>
</member>
<member name="M:WhitTools.Maintenance.GetAdminInfo(System.String)">
 <summary>
 Returns the name associated with the PLID number.
 </summary>
 <param name="sPLID">The PLID to get a name for.</param>
 <returns>The name associated with the PLID number.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Maintenance.CheckAll(System.Web.UI.WebControls.Repeater@,System.Boolean,System.String)">
 <summary>
 Checks or unchecks all repeater CheckBox controls.
 </summary>
 <param name="rptItems">The repeater to check the CheckBoxes for.</param>
 <param name="bChecked">Should the checkbox be checked?</param>
 <param name="sControlName">The name of the control to check/uncheck.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Maintenance.ShowFilteredPageResults(System.Int32,System.String,System.String,System.String,System.Boolean,System.Data.SqlClient.SqlConnection@,System.Boolean)">
 <summary>
 Filters and breaks a DataTable into chunks to display as pages.
 </summary>
 <param name="nPageLimit">The number of results to show per page.</param>
 <param name="sRepeaterControl">The name of the repeater control on the page.</param>
 <param name="sShowControl">The name of the show ddl control on the page.</param>
 <param name="sPageNumbersControl">The name of the page numbers label control on the page.</param>
 <param name="bEliminateNull">Eliminate null values from the DataTable?</param>
 <param name="cnx">The SqlConnection object to use.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Maintenance.GetMaintenanceDate(System.DateTime,System.String)">
 <summary>
 Returns the date in a formatted version. If the date does not exist, returns "Unavailable" or some other provided text.
 </summary>
 <param name="dateMaintenance">The date to format for the maintenance page.</param>
 <param name="sUnavailableText">The text to use when the date is null or "1/1/1900".</param>
 <returns>A formatted date. Returns "Unavailable" if the date does not exist.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Maintenance.MaintenanceLeft(System.String,System.Int32,System.Boolean,System.String)">
 <summary>
 Ensures only a certain number of characters will be displayed for the parameter sValue.
 </summary>
 <param name="sValue">The value to check the length of.</param>
 <param name="nCharLength">The maximum number of characters to show.</param>
 <param name="bReplaceSpace">Replace space characters with non-breaking-space characters?</param>
 <param name="sExtension">The string to append to the end if sValue goes over nCharLength.</param>
 <returns>A string sValue no longer than nCharLength characters in length. If the length is exceeded, then sExtension is appended to the end of the shortened sValue.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.LoadDefaultFolders(System.Web.UI.WebControls.ListBox@,System.Web.UI.WebControls.Label@)">
 <summary>
 
 </summary>
 <param name="lsbFolders"></param>
 <param name="lblSelectedfolder"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.UpdateFolders(System.Web.UI.WebControls.ListBox@,System.Web.UI.WebControls.Label@,System.Web.UI.WebControls.Panel@,System.Web.UI.WebControls.TextBox@,System.String)">
 <summary>
 
 </summary>
 <param name="lsbFolder"></param>
 <param name="lblSelectedFolder"></param>
 <param name="pnlFolder"></param>
 <param name="txtLink"></param>
 <param name="sFolder"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.SetLinkBasedOnFolder(System.Web.UI.WebControls.TextBox@,System.String)">
 <summary>
 
 </summary>
 <param name="txtLink"></param>
 <param name="sSelectedfolder"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.ProjectDetailsComplete(System.String)">
 <summary>
 
 </summary>
 <param name="sProjectID"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.CheckControlsComplete(System.String)">
 <summary>
 
 </summary>
 <param name="sProjectID"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetProjectLink(System.String,System.String)">
 <summary>
 
 </summary>
 <param name="sPath"></param>
 <param name="sLink"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.FormatProjectLink(System.String)">
 <summary>
 
 </summary>
 <param name="sLink"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.FormatProjectNameForFolder(System.String)">
 <summary>
 
 </summary>
 <param name="sPageTitle"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.SameServerPath(System.String,System.String)">
 <summary>
 
 </summary>
 <param name="sFrontendPath"></param>
 <param name="sBackendPath"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetFilePath(System.String)">
 <summary>
 
 </summary>
 <param name="sPath"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetFormattedLink(System.String,System.String,System.String)">
 <summary>
 
 </summary>
 <param name="sProjectLocation"></param>
 <param name="sLink"></param>
 <param name="sText"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetDataTypeDescription(System.Int32)">
 <summary>
 
 </summary>
 <param name="nDataType"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetChildControls(System.Int32)">
 <summary>
 
 </summary>
 <param name="nControlID"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.IsPhoneControl(System.Int32)">
 <summary>
 
 </summary>
 <param name="nControlType"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.IsLiteralControlType(System.Int32)">
 <summary>
 
 </summary>
 <param name="nControlType"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.IsDateControl(System.Int32)">
 <summary>
 
 </summary>
 <param name="nControlType"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.IsGLAccountControl(System.Int32)">
 <summary>
 
 </summary>
 <param name="nControlType"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.IsYesNoControl(System.Int32)">
 <summary>
 
 </summary>
 <param name="nControlType"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.IsFirstAdminControl(System.Int32)">
 <summary>
 
 </summary>
 <param name="nControlID"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.CheckSavedStatus(System.String,System.String)">
 <summary>
 
 </summary>
 <param name="currentstatus"></param>
 <param name="savedstatus"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.ActionRequiresListItems(System.String)">
 <summary>
 
 </summary>
 <param name="nActionType"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.ActionRequiresValueSelection(System.String)">
 <summary>
 
 </summary>
 <param name="nActionType"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetSQLDataTypeName(System.Int32,System.Int32,System.String)">
 <summary>
 
 </summary>
 <param name="nSQLDataType"></param>
 <param name="nID"></param>
 <param name="sLocation"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetSQLNullValue(System.Int32)">
 <summary>
 
 </summary>
 <param name="nDataType"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetSQLDatabaseName(System.Int32,System.String)">
 <summary>
 
 </summary>
 <param name="nSQLDatabase"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.IsRepeaterControl(System.Int32)">
 <summary>
 
 </summary>
 <param name="nControlType"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.IsFileUploadControl(System.Int32)">
 <summary>
 
 </summary>
 <param name="nControlType"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.IsImageUploadControl(System.Int32)">
 <summary>
 
 </summary>
 <param name="nControlType"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.ParentIsRepeaterControl(System.String,System.String,System.Int32@,System.String@,System.String@,System.String@,System.Boolean)">
 <summary>
 
 </summary>
 <param name="sControlID"></param>
 <param name="sRepeaterID"></param>
 <param name="nLayers"></param>
 <param name="sNextParentControlID"></param>
 <param name="sNextSQLInsertItemTable"></param>
 <param name="sNextForeignID"></param>
 <param name="bSearchAll"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.NoParentControl(System.String)">
 <summary>
 
 </summary>
 <param name="sParentControlID"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.ParentIsControlType(System.String,System.String,System.String,System.Int32@,System.String@,System.String@,System.Boolean,System.Boolean)">
 <summary>
 
 </summary>
 <param name="sControlID"></param>
 <param name="sParentControlType"></param>
 <param name="sParentControlID"></param>
 <param name="nLayers"></param>
 <param name="sNextParentControlID"></param>
 <param name="sNextSQLInsertItemTable"></param>
 <param name="bSearchAll"></param>
 <param name="bSearchParentRepeaters"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.IsDataType(System.Int32,System.String)">
 <summary>
 
 </summary>
 <param name="nControlTypeID"></param>
 <param name="sDataType"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.ControlDisplayRequiresJoin(System.Data.DataRow@)">
 <summary>
 
 </summary>
 <param name="CurrentRow"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetControlDataType(System.Int32)">
 <summary>
 
 </summary>
 <param name="nControlTypeID"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.IsControlType(System.Int32,System.String)">
 <summary>
 
 </summary>
 <param name="nControlTypeID"></param>
 <param name="sControlTypeName"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetControlTypesWithValues">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.IsListControlType(System.Int32)">
 <summary>
 
 </summary>
 <param name="ncontroltypeid"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetFirstPage(System.Int32)">
 <summary>
 Checks to see if a page has already been created for this project.  If no pages exist, creates a page.  Then returns the first page's ID.
 </summary>
 <param name="nProjectID"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.CheckLastPage(System.Int32)">
 <summary>
 
 </summary>
 <param name="nPageID"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetPreviousPage(System.Int32)">
 <summary>
 
 </summary>
 <param name="nPageID"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetSectionLinks">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetChangePasswordLink">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetPagecount">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetPageInfo(System.Int32,System.String)">
 <summary>
 
 </summary>
 <param name="nPageNumber"></param>
 <param name="sColumn"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.BelongsToPage(System.Int32,System.Int32)">
 <summary>
 
 </summary>
 <param name="nPageNumber"></param>
 <param name="nPageID"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetSelectCertification(System.Boolean,System.String)">
 <summary>
 
 </summary>
 <param name="bSearch"></param>
 <param name="sFilterStatement"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetSectionTitle(System.Int32)">
 <summary>
 
 </summary>
 <param name="nPageNumber"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetMainStoredProcedure(System.String@,System.String,System.String,System.Int32)">
 <summary>
 
 </summary>
 <param name="sMainStoredProcedure"></param>
 <param name="sMainStoredProcedureParameters"></param>
 <param name="sSQLInsertStoredProcedureName"></param>
 <param name="nPageNumber"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetCertificationText">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.AssembleIndexPage(System.String@,System.String,System.String)">
 <summary>
 
 </summary>
 <param name="sPageBody"></param>
 <param name="sProjectLocation"></param>
 <param name="sEcommerce"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.AssembleInfoMessagePage(System.String@,System.String)">
 <summary>
 
 </summary>
 <param name="sPageBody"></param>
 <param name="sProjectLocation"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetNotFinishedText">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetAlreadySubmittedText">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetAvailableControls(WhitTools.DataTablesSupplied@)">
 <summary>
 
 </summary>
 <param name="dtSupplied"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetHeadData(System.Data.DataTable@)">
 <summary>
 
 </summary>
 <param name="ControlsDT"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetCheckApplicationFinishedMethod(System.String,System.String)">
 <summary>
 
 </summary>
 <param name="sSQLMainTable"></param>
 <param name="sRequireLogin"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetCheckAlreadySubmittedMethod(System.String,System.String,System.String)">
 <summary>
 
 </summary>
 <param name="sSQLMainTable"></param>
 <param name="sMultipleSubmissions"></param>
 <param name="sSQLAdditionalCertificationStatement"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetInsertRetainedColumns(System.Int32,System.String,System.String@,System.String,System.String,System.Int32,System.String,System.String)">
 <summary>
 
 </summary>
 <param name="nTableControlID"></param>
 <param name="sSQLTable"></param>
 <param name="sCheckApplicationAlreadySubmitted"></param>
 <param name="sSQLMainTableName"></param>
 <param name="sForeignID"></param>
 <param name="nCounter"></param>
 <param name="sPreviousID"></param>
 <param name="sCurrentID"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetRetainedColumns(System.Int32)">
 <summary>
 
 </summary>
 <param name="nTableControlID"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetRepeaterIdentityReference(System.Int32,System.String,System.String,System.String,System.String@)">
 <summary>
 
 </summary>
 <param name="nParentControlID"></param>
 <param name="sIdentity"></param>
 <param name="sForeignID"></param>
 <param name="sSQLMainTableName"></param>
 <param name="sGetArchiveAncillaryData"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetCommonFunctions(System.String,System.String,System.String,System.String,System.String)">
 <summary>
 
 </summary>
 <param name="sSQLMainTable"></param>
 <param name="sRequireLogin"></param>
 <param name="sMultipleSubmissions"></param>
 <param name="sSQLAdditionalCertificationStatement"></param>
 <param name="sCheckClosedMethod"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetCheckReviewInformationMethod(System.String)">
 <summary>
 
 </summary>
 <param name="sSQLMainTable"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetCertificationLoadDDLsContent(System.String)">
 <summary>
 
 </summary>
 <param name="sRequireLogin"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetUsernameReference(System.String)">
 <summary>
 
 </summary>
 <param name="sRequireLogin"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetColumnSelectTable(System.Boolean)">
 <summary>
 
 </summary>
 <param name="bIncludeLogin"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetDateColumnReference">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetExportColumns(System.Int32,System.Boolean,System.Boolean)">
 <summary>
 
 </summary>
 <param name="nParentControlID"></param>
 <param name="bIncludeMulti"></param>
 <param name="bIncludeLogin"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetAdditionalExportColumns(System.Web.UI.WebControls.Repeater@)">
 <summary>
 
 </summary>
 <param name="rptTables"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetLoginColumns(System.Boolean)">
 <summary>
 
 </summary>
 <param name="bInline"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.ValidateLink(System.Web.UI.WebControls.CustomValidator@,System.Web.UI.WebControls.TextBox@,System.Web.UI.WebControls.ServerValidateEventArgs)">
 <summary>
 
 </summary>
 <param name="cvLink"></param>
 <param name="txtLinkText"></param>
 <param name="args"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetAdditionalButtons(System.Int32,System.String@,System.String@)">
 <summary>
 
 </summary>
 <param name="nPageNumber"></param>
 <param name="sAdditionalButtons"></param>
 <param name="sAdditionalButtonsMethods"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetSQLServerName(System.String)">
 <summary>
 
 </summary>
 <param name="sSQLServerName"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.FormatControlHeading(System.String)">
 <summary>
 
 </summary>
 <param name="sHeading"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetBackendOption(System.String)">
 <summary>
 
 </summary>
 <param name="sOptionName"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetControlColumnValue(System.String,System.String,System.Data.DataTable@,System.String)">
 <summary>
 
 </summary>
 <param name="sControlID"></param>
 <param name="sColumn"></param>
 <param name="ControlsDT"></param>
 <param name="sTable"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetListItemDefaultSelected(System.Boolean,System.Int32,System.String,System.String)">
 <summary>
 
 </summary>
 <param name="bInsert"></param>
 <param name="nRequired"></param>
 <param name="sItemText"></param>
 <param name="sItemValue"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetQueryVariable(System.Boolean)">
 <summary>
 
 </summary>
 <param name="bSearch"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.RepeaterHasColumns(System.String)">
 <summary>
 
 </summary>
 <param name="sRepeaterColumns"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetErrorMessage(System.String,System.String,System.Boolean)">
 <summary>
 
 </summary>
 <param name="sMessage"></param>
 <param name="sHeading"></param>
 <param name="bInMethod"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetDataSource(System.Data.DataRow)">
 <summary>
 
 </summary>
 <param name="CurrentRow"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.ShowDataSource(System.Web.UI.UserControl@)">
 <summary>
 
 </summary>
 <param name="ucDataSource"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetSetValueDataTypes">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetSelectStatement(System.Data.DataRow@)">
 <summary>
 
 </summary>
 <param name="CurrentRow"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.SaveColumnsInfo(System.String,System.Web.UI.WebControls.ListBox@,System.Web.UI.WebControls.Panel@,System.Web.UI.WebControls.Repeater@,System.Int32)">
 <summary>
 
 </summary>
 <param name="sType"></param>
 <param name="lsbMainColumns"></param>
 <param name="pnlCurrent"></param>
 <param name="rptTables"></param>
 <param name="nTypeID"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.SaveColumn(System.Web.UI.WebControls.ListBox@,System.Data.SqlClient.SqlCommand@)">
 <summary>
 
 </summary>
 <param name="lsbCurrent"></param>
 <param name="cmd"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetProjectID">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.SaveAncillaryContent(System.String,System.Int32,System.String,System.String,System.Data.SqlClient.SqlConnection@,System.String)">
 <summary>
 
 </summary>
 <param name="storedProcedureName"></param>
 <param name="ID"></param>
 <param name="prefix"></param>
 <param name="name"></param>
 <param name="cnx"></param>
 <param name="foreignID"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.SaveAncillaryRepeaterContent(System.String,System.Int32,System.Data.SqlClient.SqlConnection@)">
 <summary>
 
 </summary>
 <param name="sCurrentStoredProcedure"></param>
 <param name="nCurrentID"></param>
 <param name="cnx"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetCurrentUsernameOverload(System.Int32,System.Boolean)">
 <summary>
 
 </summary>
 <param name="nRequireLogin"></param>
 <param name="bInsert"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetCurrentUsernameOverload">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetCertificationCondition">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.DefaultCertificationPage">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RAD.GetPathLink(System.String,System.String,System.String)">
 <summary>
 
 </summary>
 <param name="sCurrent"></param>
 <param name="sProjectType"></param>
 <param name="sCurrentType"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Repeaters.CreateRepeaterData(System.Web.UI.Control@,System.String,System.Data.SqlClient.SqlConnection,System.String,System.Int32)">
 <summary>
 CreateRepeaterData makes a copy of the data existing in the repeater control passed to it, leaving out any 
 items as specified by the sRemoveIndex parameter
 </summary>
 <param name="ctlLister"></param>
 <param name="sItemCount"></param>
 <param name="cnx"></param>
 <param name="sRemoveIndex">
 If a single item is being removed, this should be passed as an integer. If multiple items are being passed, 
 this should be a comma-delimited list of integers with each item surrounded by single quotes (e.g. "'0','1','2'").
 This kind of output can be produced automatically using the GetListOfSelectedValues in the Getter class.
 </param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Repeaters.AddRepeaterItem(System.Web.UI.WebControls.Repeater@,System.Data.DataTable@,System.Int32,System.Web.UI.WebControls.RepeaterItem,System.Data.SqlClient.SqlConnection)">
 <summary>
 
 </summary>
 <param name="rpt"></param>
 <param name="dl"></param>
 <param name="dtItems"></param>
 <param name="nCurrentPosition"></param>
 <param name="rpiCopyItem"></param>
 <param name="dlCopyItem"></param>
 <param name="cnx"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Repeaters.SelectRepeaterData(System.Web.UI.Control@,System.Data.DataTable,System.Data.SqlClient.SqlConnection,System.String)">
 <summary>
 This method will bind data in a DataTable to a Repeater that has been passed to it.
 The option for a supplied data string is provided.
 </summary>
 <param name="ctlLister">The Repeater which is to have data bound to it.</param>
 <param name="dt">The DataTable holding the data to be bound.</param>
 <param name="sSuppliedData">The list of parameters for programatically supplying data to list controls.</param>
 <remarks>It should be noted that control names being bound to should match up with data column names.
 For example, if you wish to bind the datacolumn MealPlan to dropdownlist control, that control
 should be named ddlMealPlan, not ddlMealPlans or ddlMeal.</remarks>
</member>
<member name="M:WhitTools.Repeaters.SelectRepeaterData(System.Web.UI.Control@,System.Data.DataTable,System.Data.DataTable,System.Data.SqlClient.SqlConnection)">
 <summary>
 
 </summary>
 <param name="ctlLister"></param>
 <param name="dt"></param>
 <param name="dtSuppliedData"></param>
 <param name="cnx"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Repeaters.SelectRepeaterDataPageNumbers(System.Web.UI.Control@,System.Data.DataTable,System.Int32,System.Web.UI.WebControls.Label@,System.String,System.Data.SqlClient.SqlConnection,System.Web.UI.WebControls.DropDownList@,System.String,System.String,System.Int32,System.String)">
 <summary>
 
 </summary>
 <param name="ctlLister"></param>
 <param name="dt"></param>
 <param name="nPageLimit"></param>
 <param name="lblPageNumbers"></param>
 <param name="sRequestPage"></param>
 <param name="cnx"></param>
 <param name="ddlSort"></param>
 <param name="sSuppliedData"></param>
 <param name="sPageURL"></param>
 <param name="nPagingType"></param>
 <param name="sSortColumn"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Repeaters.WritePageNumbers(System.Web.UI.WebControls.Label@,System.Int32,System.String,System.String,System.Int32,System.String)">
 <summary>
 
 </summary>
 <param name="lblPageNumbers"></param>
 <param name="nCounter2"></param>
 <param name="sRequestPage"></param>
 <param name="sPageURL"></param>
 <param name="nPagingType"></param>
 <param name="sSortString"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Repeaters.SelectRepeaterDataPageNumbers(System.Web.UI.Control@,System.String,System.Int32,System.Web.UI.WebControls.Label@,System.String,System.Web.UI.WebControls.DropDownList@,System.String,System.Data.SqlClient.SqlConnection,System.String,System.String)">
 <summary>
 Overloaded version used for passing a selection string along with sort criteria.
 </summary>
 <param name="ctlLister"></param>
 <param name="sSelect"></param>
 <param name="nPageLimit"></param>
 <param name="lblPageNumbers"></param>
 <param name="sRequestPage"></param>
 <param name="ddlSort"></param>
 <param name="sRequestSort"></param>
 <param name="cnx"></param>
 <param name="sSuppliedData"></param>
 <param name="sPageURL"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Repeaters.GetRepeaterItemViaCustomValidator(System.Object@,System.String,System.String)">
 <summary>
 Gets access to a repeater item by matching a repeater's CustomValidator control to the source object.
 Intended to be called using the With command. Example: With GetRepeaterItemViaCustomValidator(source, "cvExample", "rpt")
 </summary>
 <param name="source">The object sending the function call.</param>
 <param name="sCustomValidatorControl">The name of the CustomValidator control to match.</param>
 <param name="sRepeaterControl">The name of the Repeater control to search through.</param>
 <returns>The repeater item the CustomValidator was matched in.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Repeaters.GetRepeaterItemViaDropDownList(System.Object@,System.String,System.String)">
 <summary>
 Gets access to a repeater item by matching a repeater's DropDownList control to the source object.
 Intended to be called using the With command. Example: With GetRepeaterItemViaDropDownList(sender, "ddlOrderIndex", "rpt")
 </summary>
 <param name="sender">The object sending the function call.</param>
 <param name="sDropDownListControl">The name of the CustomValidator control to match.</param>
 <param name="sRepeaterControl">The name of the Repeater control to search through.</param>
 <returns>The repeater item the DropDownList was matched in.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Repeaters.GetRepeaterItemViaCheckBox(System.Object@,System.String,System.String)">
 <summary>
 Gets access to a repeater item by matching a repeater's CheckBox control to the source object.
 Intended to be called using the With command. Example: With GetRepeaterItemViaCustomValidator(source, "cvExample", "rpt")
 </summary>
 <param name="source">The object sending the function call.</param>
 <param name="sCheckBoxControl">The name of the CheckBox control to match.</param>
 <param name="sRepeaterControl">The name of the Repeater control to search through.</param>
 <returns>The repeater item the CheckBox was matched in.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Repeaters.GetRepeaterItemViaControl(System.String@,System.Object@,System.String)">
 <summary>
 Gets access to a repeater item by matching a repeater's control to the source object.
 Intended to be called using the With command. Example: With GetRepeaterItemViaControl("rpt", source, "lblControl")
 </summary>
 <param name="sRepeater">The name of the repeater to search.</param>
 <param name="oSourceSender">The source/sender object sending the function call.</param>
 <param name="sControlName">The name of the control to match.</param>
 <returns>The repeater item the control was matched in.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Repeaters.GetRepeater(System.String,System.Object@,System.Int32,System.Int32@)">
 <summary>
 Gets a reference the the first control to appear with the provided sControlName. Searches nested control hierarchies.
 </summary>
 <param name="sControlName">The name of the control to find.</param>
 <param name="oHasControls">The control to begin the search from. Defaults to the entire page structure.</param>
 <param name="nIndex">In the case of nested controls, their may be multiple controls with the same sControlName. This 0-index selects which control in the series should be returned.</param>
 <param name="nFound">In the case of nested controls, this variable keeps track of how many matches have been found across recursive function calls.</param>
 <returns>A reference to the control that matches the provided sControlName parameter. Returns "Nothing" if not found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Repeaters.SetCheckedActive(System.Web.UI.WebControls.Repeater@,System.String,System.Int32,System.Boolean,System.String,System.String,System.String)">
 <summary>
 Updates a DataTable's Active column for all checked rows in a repeater.
 </summary>
 <param name="rpt">The repeater to check for checked items in.</param>
 <param name="sTable">The full name of the DataTable to update. Example Web3.adTelephone.dbo.PeopleListing.</param>
 <param name="nActive">The global enum integer value to set the Active column to.</param>
 <param name="sAssignErrorsTo">The username of the web team member to receive error messages.</param>
 <param name="sActionCheckBoxControl">The name of the action CheckBox control.</param>
 <param name="sIDLabelControl">The name of the ID Label control.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Repeaters.UpdateOrderIndex(System.String,System.Int32,System.Int32,System.Boolean,System.Int32,System.Boolean,System.String,System.Boolean,System.String,System.String)">
 <summary>
 Updates the Order Index of a table's rows. The OrderIndex column is 1-indexed, 0 is the value for inactive or unassigned rows.
 </summary>
 <param name="sTable">The DataTable to update order indices for.</param>
 <param name="nUpdateID">The row ID that is getting changed. Can be set to 0 for a general order index sorting function.</param>
 <param name="nNewOrderIndex">The new order index for the row getting updated.</param>
 <param name="bUpdateInactive">Update inactive rows to the nInactiveValue integer?</param>
 <param name="nInactiveValue">The value to assign to inactive rows.</param>
 <param name="sColumnToUpdate">The column the order indices are saved in. This is the column that will be updated by this function.</param>
 <param name="bRefreshPage">Should the page refresh after the update is complete?</param>
 <param name="bHasSecondColumnToMatch">Is there a column in the datatable that must have a specific value in order for the order indices to be updated? Note: The column "Active" is already automatically checked and does not require the use of this parameter.</param>
 <param name="sSecondColumnToMatch">The name of the column that must have a specific value in order for the indices to be updated. Note: The column "Active" is already automatically checked and does not require the use of this parameter.</param>
 <param name="sSecondColumnToMatchValue">The specific value in the column that must be a match in order for the indices to be updated. Note: The column "Active" is already automatically checked and does not require the use of this parameter.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Repeaters.UpdateOrderIndex(System.String,System.Int32,System.Boolean,System.String,System.Boolean,System.String,System.String)">
 <summary>
 Updates the Order Index of a table's rows. The OrderIndex column is 1-indexed, 0 is the value for inactive or unassigned rows.
 </summary>
 <param name="sTable">The DataTable to update order indices for.</param>
 <param name="nInactiveValue">The value to assign to inactive rows.</param>
 <param name="sColumnToUpdate">The column the order indices are saved in. This is the column that will be updated by this function.</param>
 <param name="bRefreshPage">Should the page refresh after the update is complete?</param>
 <param name="bHasSecondColumnToMatch">Is there a column in the datatable that must have a specific value in order for the order indices to be updated? Note: The column "Active" is already automatically checked and does not require the use of this parameter.</param>
 <param name="sSecondColumnToMatch">The name of the column that must have a specific value in order for the indices to be updated. Note: The column "Active" is already automatically checked and does not require the use of this parameter.</param>
 <param name="sSecondColumnToMatchValue">The specific value in the column that must be a match in order for the indices to be updated. Note: The column "Active" is already automatically checked and does not require the use of this parameter.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Repeaters.UpdateOrderIndex(System.String,System.String,System.String,System.Boolean,System.Int32,System.Boolean,System.String,System.Boolean,System.String,System.String)">
 <summary>
 Updates the Order Index of a table's rows. The OrderIndex column is 1-indexed, 0 is the value for inactive or unassigned rows.
 </summary>
 <param name="sTable">The DataTable to update order indices for.</param>
 <param name="sUpdateID">The row ID that is getting changed. Can be set to 0 for a general order index sorting function.</param>
 <param name="sNewOrderIndex">The new order index for the row getting updated.</param>
 <param name="bUpdateInactive">Update inactive rows to the nInactiveValue integer?</param>
 <param name="nInactiveValue">The value to assign to inactive rows.</param>
 <param name="sColumnToUpdate">The column the order indices are saved in. This is the column that will be updated by this function.</param>
 <param name="bRefreshPage">Should the page refresh after the update is complete?</param>
 <param name="bHasSecondColumnToMatch">Is there a column in the datatable that must have a specific value in order for the order indices to be updated? Note: The column "Active" is already automatically checked and does not require the use of this parameter.</param>
 <param name="sSecondColumnToMatch">The name of the column that must have a specific value in order for the indices to be updated. Note: The column "Active" is already automatically checked and does not require the use of this parameter.</param>
 <param name="sSecondColumnToMatchValue">The specific value in the column that must be a match in order for the indices to be updated. Note: The column "Active" is already automatically checked and does not require the use of this parameter.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Repeaters.UpdateOrderIndex(System.Object,System.String,System.String,System.Boolean,System.Int32,System.Boolean,System.String,System.String,System.String,System.Boolean,System.String,System.String)">
 <summary>
 Updates the Order Index of a table's rows. The OrderIndex column is 1-indexed, 0 is the value for inactive or unassigned rows.
 </summary>
 <param name="ddlSender">The object that called this function. Expects the DropDownList control that maintains the Order Index value.</param>
 <param name="sTable">The DataTable to update order indices for.</param>
 <param name="bUpdateInactive">Update inactive rows to the nInactiveValue integer?</param>
 <param name="nInactiveValue">The value to assign to inactive rows.</param>
 <param name="bRefreshPage">Refresh the page after updating?</param>
 <param name="sColumnToUpdate">The column the order indices are saved in. This is the column that will be updated by this function.</param>
 <param name="sIDLabelControl">The Label control containing the DataTable row id to change.</param>
 <param name="sOrderIndexDDLControl">The name of the control being used to update the order index.</param>
 <param name="sRepeaterControl">The name of the repeater control that contains the DropDownList being used to update the order index.</param>
 <param name="bHasSecondColumnToMatch">Is there a column in the datatable that must have a specific value in order for the order indices to be updated? Note: The column "Active" is already automatically checked and does not require the use of this parameter.</param>
 <param name="sSecondColumnToMatch">The name of the column that must have a specific value in order for the indices to be updated. Note: The column "Active" is already automatically checked and does not require the use of this parameter.</param>
 <param name="sSecondColumnToMatchValue">The specific value in the column that must be a match in order for the indices to be updated. Note: The column "Active" is already automatically checked and does not require the use of this parameter.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Repeaters.FillRepeaterOrderIndexDDL(System.String,System.Int32,System.String,System.String,System.String,System.String)">
 <summary>
 Fills a DropDownList on the provided repeater with the order index values of the DataTable provided.
 </summary>
 <param name="sTable">The DataTable to pull order index values from.</param>
 <param name="nInactiveValue">The inactive order index value to assign to inactive/unassigned rows.</param>
 <param name="sOrderIndexLabelControl">The name of the Label control in the repeater that holds the current order index of the row.</param>
 <param name="sOrderIndexDDLControl">The DropDownList control in the repeater that displays the current order index and allows users to change the order index.</param>
 <param name="sRepeaterControl">The Repeater control the changes will be made in.</param>
 <param name="sPrimaryKey">The Primary Key to search a DataTable on.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Repeaters.SetRepeaterPanelVisibility(System.Web.UI.WebControls.Repeater@,System.String,System.String,System.Boolean)">
 <summary>
 Sets the visiblity of a panel within a repeater depending on its position relative to the provided index.
 </summary>
 <param name="rpt">The repeater to set the panel visibility for.</param>
 <param name="sIndex">The index to determine panel visibility.</param>
 <param name="sPanelName">The name of the panel to set the visibility for. Defaults to the first panel within the repeater control.</param>
 <param name="bLessThan">Set repeater items panels invisible if their position is less than the provided index. If false, uses less than or equal to.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Repeaters.EmptyControl(System.Web.UI.Control@)">
 <summary>
 Removes items from a control. (Repeater/DataList)
 </summary>
 <param name="ctrl">The control to remove items from.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Repeaters.EmptyDataList(System.Web.UI.Control@)">
 <summary>
 Removes items from a control.
 </summary>
 <param name="ctrl">The control to remove items from.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Repeaters.EmptyRepeater(System.Web.UI.Control@)">
 <summary>
 Removes items from a control.
 </summary>
 <param name="ctrl">The control to remove items from.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Repeaters.UpdateRepeaterItems(System.Web.UI.Control@,System.String,System.Data.DataTable,System.String,System.Int32,System.Data.SqlClient.SqlConnection)">
 <summary>
 
 </summary>
 <param name="ctlLister"></param>
 <param name="sItemCount"></param>
 <param name="dtSuppliedData"></param>
 <param name="sRemoveIndex"></param>
 <param name="nCopyIndex"></param>
 <param name="cnx"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Repeaters.UpdateRepeaterItems(System.Web.UI.Control@,System.String,System.String,System.String,System.Int32,System.Data.SqlClient.SqlConnection)">
 <summary>
 
 </summary>
 <param name="ctlLister"></param>
 <param name="sItemCount"></param>
 <param name="sSuppliedData"></param>
 <param name="sRemoveIndex"></param>
 <param name="nCopyIndex"></param>
 <param name="cnx"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Repeaters.UpdateRepeaterItems(System.Web.UI.Control@,System.String,System.Data.SqlClient.SqlConnection,System.Data.DataTable,System.String,System.Int32)">
 <summary>
 
 </summary>
 <param name="ctlLister"></param>
 <param name="sItemCount"></param>
 <param name="cnx"></param>
 <param name="dtSuppliedData"></param>
 <param name="sRemoveIndex"></param>
 <param name="nCopyIndex"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Repeaters.AddNewRepeaterItem(System.Web.UI.WebControls.Repeater@,WhitTools.DataTablesSupplied,System.Int32,System.Int32,System.Web.UI.WebControls.CustomValidator@,System.String)">
 <summary>
 
 </summary>
 <param name="rpt"></param>
 <param name="dtsupplied"></param>
 <param name="nIncrement"></param>
 <param name="nMaxItems"></param>
 <param name="cv"></param>
 <param name="sItemName"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Repeaters.RemoveRepeaterItem(System.Web.UI.WebControls.Repeater@,WhitTools.DataTablesSupplied,System.Int32,System.Int32,System.Web.UI.WebControls.CustomValidator@,System.String)">
 <summary>
 
 </summary>
 <param name="rpt"></param>
 <param name="dtsupplied"></param>
 <param name="nIndex"></param>
 <param name="nMinItems"></param>
 <param name="cv"></param>
 <param name="sItemName"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Repeaters.GetParentRepeaterItem(System.Web.UI.Control@)">
 <summary>
 
 </summary>
 <param name="Control"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RSS.WriteStandardPodcasts(System.Int32,System.Int32)">
 <summary>
 The Type of podcast is the topmost level of a department's podcast feed. The subtype is available in case 
 a department (i.e. Athletics) wants to show both a department podcast as well as an individual podcast for 
 different sections within their department (i.e. Football, Baseball, Basketball, etc).
 </summary>
 <param name="nType">The type of podcast.</param>
 <param name="nSubType">The subtype of the podcast.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RSS.WriteRSS(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
 <summary>
 Writes the .rss.xml file according to variables set in WriteStandardPodcasts().
 </summary>
 <param name="sSelect">The select query string to use.</param>
 <param name="sFile"></param>
 <param name="sTitle"></param>
 <param name="sImage"></param>
 <param name="sItemSelect"></param>
 <param name="sMediaType"></param>
 <param name="sDescription"></param>
 <param name="sLink"></param>
 <param name="bWriteHighQuality">Is the item of 'high quality' format?</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RSS.WriteItem(System.Xml.XmlTextWriter@,System.String,System.String,System.Boolean)">
 <summary>
 Creates an XML item.
 </summary>
 <param name="xtwWriteItem"></param>
 <param name="sSelect"></param>
 <param name="sMediaType"></param>
 <param name="bWriteHighQuality"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RSS.CopyRSSFeeds">
 <summary>
 Copies versions of web1 rss feeds to web2
 </summary>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RSS.GetRFC822Date(System.DateTime)">
 <summary>
 Formats a datetime to what the RSS feed is expecting.
 </summary>
 <param name="dateRFC822">The datetime to format.</param>
 <returns>A datetime string in the form of Wed, 21 Sep 2005 09:40:02 GMT</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.SendRuleEmail(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Sends an email to all of the users assigned to the provided rule and department.
 </summary>
 <param name="nRuleID">The rule that applies to this application.</param>
 <param name="sDepIDCode">Accepts two values, 1)The department id number or 2)The department code.</param>
 <param name="sFrom">The address the email will be marked from.</param>
 <param name="sBody">The message to send in the email.</param>
 <param name="sSubject">The subject line of the email.</param>
 <param name="sAdditionalEmails">Additional email addresses to send the email message to.</param>
 <param name="sTestEmail">Send a test email to this email address instead of the actual recipients.</param>
 <remarks>A link is appended to the end of the email body to provide the recipient a way to opt out of emails.</remarks>
</member>
<member name="M:WhitTools.RulesAssignments.FormatRuleTypeCode(System.String)">
 <summary>
 Formats the code string for a rule type.
 </summary>
 <param name="sRuleTypeCode">The code string to format.</param>
 <returns>A formatted version of the code string.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.GetDepartmentInfo(System.String)">
 <summary>
 Returns a departments information in a DataTable.
 </summary>
 <param name="sDepIDCode">Accepts two values, 1)The department id number or 2)The department code.</param>
 <returns>The department's information in a DataTable.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.GetDepartmentInfo(System.String,System.String)">
 <summary>
 Returns a departments information in a DataTable.
 </summary>
 <param name="sDepIDCode">Accepts two values, 1)The department id number or 2)The department code.</param>
 <param name="sColumn">The DataTable column to get a value from.</param>
 <returns>The department's information in a DataTable.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.GetDepartmentChair(System.String,System.String)">
 <summary>
 Returns the specified value for the department chair assigned to the provided department number.
 </summary>
 <param name="sDepIDCode">Accepts two values, 1)The department id number or 2)The department code.</param>
 <returns>The department chair assigned to the department.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.GetDepartmentDirectorDean(System.String,System.String,System.String)">
 <summary>
 Returns the specified value for the department director or dean assigned to the provided department number.
 </summary>
 <param name="sDepIDCode">Department code</param>
 <param name="sReturnType">Value to return</param>
 <param name="sTypeSelect">For specifying a type or types to select (e.g. dean, director, interim director, etc. Should be submitted
 as a comma delimited list of integers</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.GetDepartmentSupervisor(System.String,System.String,System.String,System.String)">
 <summary>
 
 </summary>
 <param name="sSupervisorType"></param>
 <param name="sDepIDCode"></param>
 <param name="sReturnType"></param>
 <param name="sTypeSelect"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.IsDepartmentChair(System.String,System.String,System.Boolean)">
 <summary>
 Checks if the user is a department chair.
 </summary>
 <param name="sUsername">Request.Servervariables.LOGON_USER or a username. The username to compare to the cabinet member list. If no username is provided then the currently logged-in user is used.</param>
 <param name="sDepIDCode">Accepts two values, 1)The department id number or 2)The department code.</param>
 <returns>Is the user a department chair? If a department is included, is the user a department chair for the provided department?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.GetDepartmentVP(System.String)">
 <summary>
 Returns the PLID number for the VP assigned to the provided department number.
 </summary>
 <param name="sDepIDCode">Accepts two values, 1)The department id number or 2)The department code.</param>
 <returns>The VP assigned to the department.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.IsVP(System.String,System.String,System.Boolean)">
 <summary>
 Checks if the user is a VP.
 </summary>
 <param name="sUsername">Request.Servervariables.LOGON_USER or a username. The username to compare to the cabinet member list. If no username is provided then the currently logged-in user is used.</param>
 <param name="sDepIDCode">Accepts two values, 1)The department id number or 2)The department code.</param>
 <returns>Is the user a VP? If a department is included, is the user a VP in charge of the provided department?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.GetDepartmentCabinet(System.String)">
 <summary>
 Returns the PLID number for the Cabinet member assigned to the provided department number.
 </summary>
 <param name="sDepIDCode">Accepts two values, 1)The department id number or 2)The department code.</param>
 <returns>The Cabinet member assigned to the department.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.IsCabinetMember(System.String,System.String,System.Boolean)">
 <summary>
 Checks if the user is a cabinet member.
 </summary>
 <param name="sUsername">Request.Servervariables.LOGON_USER or a username. The username to compare to the cabinet member list. If no username is provided then the currently logged-in user is used.</param>
 <param name="sDepIDCode">Accepts two values, 1)The department id number or 2)The department code.</param>
 <returns>Is the user a cabinet member? If a department is included, is the user a cabinet member in charge of the provided department?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.GetAssignedPLIDs(System.Int32,System.String,System.Boolean)">
 <summary>
 Returns a DataTable of PLID number(s) for the assigned user(s) for the provided rule. The DataTable column "PLID"
 will contain either the assigned user's PLID or an email address.
 </summary>
 <param name="nRuleID">The rule to get the assigned users for. RuleID = 0 returns web team members.</param>
 <param name="sDepIDCode">Accepts two values, 1)The department id number or 2)The department code. An empty string returns all PLIDs for departments with assigned users.</param>
 <param name="bShowCodeReturned">Show the code returned? Web team only.</param>
 <returns>A DataTable containing the PLIDs assigned to the rule for all departments.</returns>
 <remarks>
 If an AU is assigned (not the DC), and the DC wants to be considered along with the other AUs, then
 the DC needs to be added as an AU. Otherwise they will not be reached. Once the initial AUs are found
 these functions do not search out any further PLIDs.
 </remarks>
</member>
<member name="M:WhitTools.RulesAssignments.GetAssignedEmailList(System.Int32,System.String,System.String)">
 <summary>
 Returns an email list for the assigned user(s) for the provided rule.
 </summary>
 <param name="nRuleID">The rule to get the assigned user for.</param>
 <param name="sDepIDCode">Accepts two values, 1)The department id number or 2)The department code. An empty string returns all PLIDs for departments with assigned users.</param>
 <param name="sAdditionalEmailAddresses">Additional email addresses to add to the list.</param>
 <returns>A list of email addresses for people assigned to this rule. Should be ; delimited.</returns>
 <remarks>
 If an AU is assigned (not the DC), and the DC wants to be considered along with the other AUs, then
 the DC needs to be added as an AU. Otherwise they will not be reached. Once the initial AUs are found
 these functions do not search out any further PLIDs.
 </remarks>
</member>
<member name="M:WhitTools.RulesAssignments.GetAssignedUsernames(System.Int32,System.String)">
 <summary>
 Returns a list of usernames for the assigned user(s) for the provided rule. Excludes email addresses that
 are assigned to this rule.
 </summary>
 <param name="nRuleID">The rule to get the assigned user for.</param>
 <param name="sDepIDCode">Accepts two values, 1)The department id number or 2)The department code. An empty string returns all PLIDs for departments with assigned users.</param>
 <returns>A list of usernames assigned to this rule.</returns>
 <remarks>
 If an AU is assigned (not the DC), and the DC wants to be considered along with the other AUs, then
 the DC needs to be added as an AU. Otherwise they will not be reached. Once the initial AUs are found
 these functions do not search out any further PLIDs.
 </remarks>
</member>
<member name="M:WhitTools.RulesAssignments.GetAssignedUserInfo(System.Int32,System.String,System.Boolean)">
 <summary>
 Returns a DataTable containing all of the Web3.adTelephone.dbo.PeopleListing data for the assigned user(s) for the provided rule.
 </summary>
 <param name="nRuleID">The rule to get the assigned user for.</param>
 <param name="sDepIDCode">Accepts two values, 1)The department id number or 2)The department code. An empty string returns all PLIDs for departments with assigned users.</param>
 <param name="bShowCodeReturned">Show the code returned? Web team only.</param>
 <returns>All information associated with the assigned users of this rule.</returns>
 <remarks>
 If an AU is assigned (not the DC), and the DC wants to be considered along with the other AUs, then
 the DC needs to be added as an AU. Otherwise they will not be reached. Once the initial AUs are found
 these functions do not search out any further PLIDs.
 </remarks>
</member>
<member name="M:WhitTools.RulesAssignments.GetDepID(System.String)">
 <summary>
 Returns the Dep ID# of the department ID/code/name provided. Returns 0 if not found. Ensures the most up-to-date department ID.
 </summary>
 <param name="sDepIDCode">Accepts three values, 1)The department id number or 2)The department code or 3)The department name as it appears in the DataTable or DataWarehouse.</param>
 <returns>The department ID # connected to the provided value. Returns 0 if not found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.GetDepCode(System.String)">
 <summary>
 Returns the Code of the department value provided. Returns an empty string if not found.
 </summary>
 <param name="sDepIDCode">Accepts three values, 1)The department id number or 2)The department code or 3)The department name as it appears in the DataTable or DataWarehouse.</param>
 <returns>The department code connected to the provided department value. Returns and empty string if not found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.CheckValidAdmin(System.String,System.String,System.Boolean)">
 <summary>
 Checks to see if the current user is a valid web application admin for the provided department.
 </summary>
 <param name="sDepIDCode">Accepts two values, 1)The department id number or 2)The department code.</param>
 <param name="sUsername">The username to check. If no username is provided, then Request.Servervariables.LOGON_USER is used.</param>
 <param name="bWebTeamAreAdmin">Is the web team a valid admin?</param>
 <returns>Is the provided user a valid admin for the provided department.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.IsAdminUser(System.Int32,System.String,System.String,System.Boolean)">
 <summary>
 Checks to see if the current user is assigned to the provided rule.
 </summary>
 <param name="nRuleID">The RuleID to check the current user against.</param>
 <param name="sDepIDCode">The Dep ID of the admins. A blank string returns all admins for the rule.</param>
 <param name="sUsername">The username to check. If no username is provided, then Request.Servervariables.LOGON_USER is used.</param>
 <param name="bWebTeamAreAdmin">Is the web team a valid admin?</param>
 <returns>Is the user assigned to the rule?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.MainDepartmentContacts(System.String)">
 <summary>
 Returns a quick link to all of the main contacts for the provided department.
 </summary>
 <param name="sDepIDCode">Accepts two values, 1)The department id number or 2)The department code.</param>
 <returns>A string with the format: For assistance, please contact... followed by a mailto link with the contacts name followed by the contacts phone number.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.InsertAssignment(System.Int32,System.Int32,System.String)">
 <summary>
 Inserts an assignment into the Web3.Communications.dbo.ARA_Assignments DataTable.
 </summary>
 <param name="nRuleID">The rule to assign the PLID to.</param>
 <param name="nDepID">The department id to assign the PLID to.</param>
 <param name="sAssignment">The PLID or email address to assign to the rule.</param>
 <returns>Was the insert query successful?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.DeleteAssignment(System.Int32,System.String,System.String)">
 <summary>
 Deletes an assignment from the Web3.Communications.dbo.ARA_Assignments DataTable.
 </summary>
 <param name="nRuleID">The rule to remove the PLID from.</param>
 <param name="sAssignment">The PLID or email address to remove.</param>
 <param name="sDepIDCode">The department to remove the assignment from. If not provided, then all department references to the assignment are removed.</param>
 <returns>Was the assignment deleted successfully?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.RemoveAssignment(System.Int32,System.String,System.String)">
 <summary>
 Removes an assignment from the Web3.Communications.dbo.ARA_Assignments DataTable.
 </summary>
 <param name="nRuleID">The rule to remove the PLID from.</param>
 <param name="sAssignment">The PLID or email address to remove.</param>
 <param name="sDepIDCode">The department to remove the assignment from. If not provided, then all department references to the assignment are removed.</param>
 <returns>Was the assignment deleted successfully?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.IsAssigned(System.Int32,System.String,System.String)">
 <summary>
 Checks if the assignment parameters already exist in the Web3.Communications.dbo.ARA_Assignments DataTable.
 </summary>
 <param name="nRuleID">The rule to check an assignment for.</param>
 <param name="sAssignment">The PLID or email address to check.</param>
 <param name="sDepIDCode">The department to check the assignment on. If not provided, then all department references to the assignment are checked.</param>
 <returns>Does the assignment already exist?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.ValidateInsertAssignment(System.Int32,System.Int32,System.String,System.Web.UI.WebControls.CustomValidator@,System.Web.UI.WebControls.ServerValidateEventArgs@)">
 <summary>
 Validates if assignment insert values are valid.
 </summary>
 <param name="nRuleID">The rule to assign the PLID to.</param>
 <param name="nDepID">The department id to assign the PLID to.</param>
 <param name="sAssignment">The PLID or email address to assign to the rule.</param>
 <param name="cv">The CustomValidator to fill invalid values with.</param>
 <param name="args">The ServerValidateEventArgs variable for the page.</param>
 <returns>Are the insert values valid?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.GetNotAdminMessage(System.Int32,System.Int32,System.String,System.String)">
 <summary>
 Returns a custom message for an application's "Not Admin" page.
 </summary>
 <param name="nAdminRuleID">The rule id number for admins. Set to zero to default to Web Team.</param>
 <param name="nDepID">The department admins come from.</param>
 <param name="sMessageSubject">An optional autofilled email subject line.</param>
 <param name="sMessageBody">An optional autofilled email message body. You may leave this field blank to autofill the message body.</param>
 <returns>A message containing an explanation as to why the user was redirected to the "Not Admin" page. Provides the name and contact info of current admins.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.GetNotAdminMessage(System.String,System.String,System.String)">
 <summary>
 Returns a custom message for an application's "Not Admin" page.
 </summary>
 <param name="sActiveDirectoryGroup">The active directory group that represents the admins.</param>
 <param name="sMessageSubject">An optional autofilled email subject line.</param>
 <param name="sMessageBody">An optional autofilled email message body. You may leave this field blank to autofill the message body.</param>
 <returns>A message containing an explanation as to why the user was redirected to the "Not Admin" page. Provides the name and contact info of current admins.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.InsertNewSchool(System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
 <summary>
 Inserts a school into the database.
 </summary>
 <param name="sSchoolName">The full name of the school to insert (i.e. 'Whitworth University' rather than simply 'Whitworth').</param>
 <param name="nType">The type of school.</param>
 <param name="sAddressLine1">The first line of the address.</param>
 <param name="sAddressLine2">The second line of the address.</param>
 <param name="sCity">The city where the school is located.</param>
 <param name="sState">The state where the school is located.</param>
 <param name="sZIP">The ZIP/Postal Code of the school.</param>
 <param name="sCountry">The country where the school is located.</param>
 <param name="sWebsite">The school's website.</param>
 <param name="sPhone">The school's main contact phone number.</param>
 <param name="sEmail">The school's main email address.</param>
 <param name="sCEEB">The school's CEEB code.</param>
 <param name="nLocal">Is the school local? N_YES(1)/N_NO(0)</param>
 <returns>The new school id number. N_ERROR global enum if an error occurs.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.ValidateInsertSchool(System.String,System.Int32,System.Web.UI.WebControls.CustomValidator@,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Web.UI.WebControls.ServerValidateEventArgs@)">
 <summary>
 Validates that a school to be inserted into the database contains valid values.
 </summary>
 <param name="sSchoolName">The full name of the school to insert (i.e. 'Whitworth University' rather than simply 'Whitworth').</param>
 <param name="nType">The type of school.</param>
 <param name="cv">A CustomValidator to display error messages with.</param>
 <param name="sAddressLine1">The first line of the address.</param>
 <param name="sAddressLine2">The second line of the address.</param>
 <param name="sCity">The city where the school is located.</param>
 <param name="sState">The state where the school is located.</param>
 <param name="sZIP">The ZIP/Postal Code of the school.</param>
 <param name="sCountry">The country where the school is located.</param>
 <param name="sWebsite">The school's website.</param>
 <param name="sPhone">The school's main contact phone number.</param>
 <param name="sEmail">The school's main email address.</param>
 <param name="sCEEB">The school's CEEB code.</param>
 <param name="nLocal">Is the school local? N_YES(1)/N_NO(0)</param>
 <param name="args">The ServerValidateEventArgs variable for the page.</param>
 <returns>Are the values valid?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.GetUpToDateSchoolID(System.Int32,System.Int32)">
 <summary>
 Returns the most up-to-date school id associated with the provided school id.
 GetSchoolID() should be called outside ofor this function.
 </summary>
 <param name="nSchoolID">The school id to get the most up-to-date school id for.</param>
 <param name="nDepth">A depth variable that helps prevent infinite-loops.</param>
 <returns>The most up-to-date school id for the school provided.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.GetUpToDateDepartmentID(System.Int32,System.Int32)">
 <summary>
 Returns the most up-to-date department id associated with the provided department id. Some departments
 have obsolete codes. GetDepID() should be called outside ofor this function.
 </summary>
 <param name="nDepID">The department id to get the most up-to-date department id for.</param>
 <param name="nDepth">A depth variable that helps prevent infinite-loops.</param>
 <returns>The most up-to-date department id for the department provided.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.GetNotAdminLink(System.Int32,System.String)">
 <summary>
 Displays a link to the "Not Admin" notification page if the current user is an admin. Intended to fill a Label control.
 </summary>
 <param name="nAdminRuleID">The admin rule id to get admins for. Defaults to zero, which ignores specific admins.</param>
 <param name="sDepIDCode">The department to get assigned users from.</param>
 <returns>The html anchor link wrapped in a (p) tag. Only shows for admin users and web team members.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.GetNotAdminLink(System.String,System.String)">
 <summary>
 Displays a link to the "Not Admin" notification page if the current user is an admin. Intended to fill a Label control.
 </summary>
 <param name="sGroupName">The name of the Active Directory group that contains admin users.</param>
 <param name="sUsername">The username of the current user. Defaults to the current logged in user.</param>
 <returns>The html anchor link wrapped in a (p) tag. Only shows for admin users and web team members.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.GetAssignedUserEmail(System.String)">
 <summary>
 Checks an assigned PLID for an existing Whitworth ID. If the ID exists then returns the user's email address. If 
 the PLID does not exist then it checks if the PLID is already in email address format. If so, then the email 
 address is returned. Returns S_ERROR if no valid entry if found.
 </summary>
 <param name="sAssignment">The assigned user's PLID or the assigned email address.</param>
 <returns>The email address associated with the provided parameter string.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.GetCabinetMemberPLID(System.Int32)">
 <summary>
 Gets the PLID of the provided cabinet member.
 </summary>
 <param name="nCabinetMemberID">The PLID of the cabinet member.</param>
 <returns>The PLID of the provided cabinet member.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.GetDepartmentBuildings(System.String)">
 <summary>
 Returns a department's building information in a DataTable.
 </summary>
 <param name="sDepIDCode">Accepts two values, 1)The department id number or 2)The department code.</param>
 <returns>The department's building information in a DataTable.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.GetSchoolID(System.String)">
 <summary>
 Returns the school ID# of the school ID/name provided. Returns 0 if not found. Ensures the most up-to-date school ID.
 </summary>
 <param name="sSchoolNameID">Accepts two values, 1)The school id number or 2)The school name as it appears in the DataTable or DataWarehouse.</param>
 <returns>The school ID # connected to the provided value. Returns 0 if not found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.RulesAssignments.InsertNewDepartment(System.String,System.String,System.Int32,System.Int32,System.Int32)">
 <summary>
 Insert a new department.
 </summary>
 <param name="sDepartment">The name of the new department.</param>
 <param name="sCode">The code for the department.</param>
 <returns>The new department ID.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Setter.SetItemSelected(System.Web.UI.WebControls.RadioButtonList,System.String,System.Boolean)">
 <summary>
 Selects the first item in a radiobuttonlist that matches the value of sTarget.
 </summary>
 <param name="rblSetSelected">The radiobuttonlist to search through.</param>
 <param name="sTarget">The target value to search for.</param>
 <param name="bByValue">Check by .Value(true) or by .Text(false). Default: True</param>
 <remarks>
 Example: SetItemSelected(rblYesNo, dt.rows(nCounter).item("Married"))
 Example: SetItemSelected(rblYesNo, dt.rows(nCounter).item("Married"), False)
 Same as: PickPosition()
 </remarks>
</member>
<member name="M:WhitTools.Setter.SetItemSelected(System.Web.UI.WebControls.DropDownList,System.String,System.Boolean)">
 <summary>
 Selects the first item in a dropdownlist that matches the value of sTarget.
 </summary>
 <param name="ddlSetSelected">The dropdownlist to search through.</param>
 <param name="sTarget">The target value to search for.</param>
 <param name="bByValue">Check by .Value(true) or by .Text(false). Default: True</param>
 <remarks>
 Example: SetItemSelected(ddlStates, dt.rostws(nCounter).item("State"))
 Example: SetItemSelected(ddlStates, dt.rows(nCounter).item("State"), False)
 </remarks>
</member>
<member name="M:WhitTools.Setter.SetListControlItemSelected(System.Web.UI.WebControls.ListControl@,System.String,System.Boolean,System.Data.DataTable,System.String)">
 <summary>
 Selects the first item in a ListControl that matches the value of sTarget.
 </summary>
 <param name="listControl">The ListControl to search through.</param>
 <param name="sTarget">The target value to search for. Not relevant if dt is provided.</param>
 <param name="bByValue">Check by .Value(true) or by .Text(false). Default: True</param>
 <param name="dt">A DataTable to cycle through and set matching ListControl items checked.</param>
 <param name="sTargetColumn">The column in the DataTable to match.</param>
 <remarks>
 Example: SetItemSelected(cblInterests, dt.rows(nCounter).item("Interests"))
 Example: SetItemSelected(cblInterests, dt.rows(nCounter).item("Interests"), False)
 </remarks>
</member>
<member name="M:WhitTools.Setter.SetListItemSelected(System.Web.UI.WebControls.ListControl@,System.String,System.Boolean)">
 <summary>
 Selects the first item in a list control that matches the value of sTarget.
 </summary>
 <param name="listControl"></param>
 <param name="sTarget"></param>
 <param name="bByValue"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Setter.SetItemSelected(System.Web.UI.WebControls.Repeater@,System.Int32,System.String,System.String)">
 <summary>
 Searches through a repeater for a label whose contents match a targetid, 
 then sets either a checkbox or radiobutton as checked.
 </summary>
 <param name="rpt">The repeater to search through</param>
 <param name="nTargetID">The target value to search for.</param>
 <param name="sHolderNameID">The name of the Label control the value of which will be matched against the targetid.</param>
 <param name="sSelectorName">The name of the control (either Checkbox or Radiobutton) which will have its Checked property set to true if the target value is found.</param>
 <remarks>
 Example: SetItemSelected(rptVisitOptions, dt.Rows(nCounter).Item(""), "lblID", "chkOption")
 </remarks>
</member>
<member name="M:WhitTools.Setter.SetSessionVariable(System.String,System.String)">
 <summary>
 Sets the value of the provided session variable.
 </summary>
 <param name="sSession">The name of the session variable to set a value for.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Setter.SetPageControlsEnabled(System.Boolean)">
 <summary>
 Sets the controls of a page to the provided enabled state. Defaults to disabled.
 </summary>
 <param name="bEnabled">The enabled state to set.</param>
 <returns>The enabled state that was set to the page controls.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Setter.SetPageControlsEnabled(System.Web.UI.ControlCollection@,System.Boolean)">
 <summary>
 Sets the enabled state of a ControlCollection object.
 </summary>
 <param name="ctrlCollection">The ControlCollection to set the enabled state for.</param>
 <param name="bEnabled">The enabled state to set.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Setter.SetPageControlsVisible(System.Boolean)">
 <summary>
 Sets the controls of a page to the provided visible state. Defaults to visible.
 </summary>
 <param name="bVisible">The visible state to set.</param>
 <returns>The visible state that was set to the page controls.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Setter.SetPageControlsVisible(System.Web.UI.ControlCollection@,System.Boolean)">
 <summary>
 Sets the visible state of a ControlCollection object.
 </summary>
 <param name="ctrlCollection">The ControlCollection to set the visible state for.</param>
 <param name="bVisible">The enabled state to set.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Setter.SetMaintenanceQueryString(System.String)">
 <summary>
 Sets the value that bypasses the redirect to the maintenance page when a page is set as "Under Maintenance".
 </summary>
 <returns>The Request.QueryString("Maintenance") value that should be set to bypass the maintenance page redirect.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Setter.SetActive(System.Web.UI.WebControls.Repeater@,System.String,System.Int32,System.Boolean,System.String,System.String,System.String)">
 <summary>
 Updates a DataTable's Active column for all checked rows in a repeater.
 </summary>
 <param name="rpt">The repeater to check for checked items in.</param>
 <param name="sTable">The full name of the DataTable to update. Example Web3.adTelephone.dbo.PeopleListing.</param>
 <param name="nActive">The global enum integer value to set the Active column to.</param>
 <param name="sAssignErrorsTo">The username of the web team member to receive error messages.</param>
 <param name="sActionCheckBoxControl">The name of the action CheckBox control.</param>
 <param name="sIDLabelControl">The name of the ID Label control.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Setter.SetColumn(System.Web.UI.WebControls.Repeater@,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String)">
 <summary>
 Updates a DataTable's Active column for all checked rows in a repeater.
 </summary>
 <param name="rpt">The repeater to check for checked items in.</param>
 <param name="sTable">The full name of the DataTable to update. Example Web3.adTelephone.dbo.PeopleListing.</param>
 <param name="sColumn">The column to update.</param>
 <param name="sValue">The value to add to the column.</param>
 <param name="bRefreshPage">Refresh the page after updated the column values.</param>
 <param name="sAssignErrorsTo">The username of the web team member to receive error messages.</param>
 <param name="sActionCheckBoxControl">The name of the action CheckBox control.</param>
 <param name="sIDLabelControl">The name of the ID Label control.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Setter.SetInactive(System.Web.UI.WebControls.Repeater@,System.String,System.Int32,System.Boolean,System.String,System.String,System.String)">
 <summary>
 Updates a DataTable's Active column for all checked rows in a repeater.
 </summary>
 <param name="rpt">The repeater to check for checked items in.</param>
 <param name="sTable">The full name of the DataTable to update. Example Web3.adTelephone.dbo.PeopleListing.</param>
 <param name="nActive">The global enum integer value to set the Active column to.</param>
 <param name="sAssignErrorsTo">The username of the web team member to receive error messages.</param>
 <param name="sActionCheckBoxControl">The name of the action CheckBox control.</param>
 <param name="sIDLabelControl">The name of the ID Label control.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Setter.SetEmailIssuesOccurring(System.Boolean)">
 <summary>
 Sets if their are any email issues currently happening.
 </summary>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Setter.SetMasterFormsListMainContact(System.Int32,System.String)">
 <summary>
 Updates the main contact person for a master forms list entry.
 </summary>
 <param name="nMasterFormsListID">The master forms list entry ID# to update.</param>
 <param name="sPLID">The PLID of the person to make the main contact.</param>
 <returns>Was the update successful?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Sorter.SortListBox(System.Web.UI.WebControls.ListBox@,System.String,System.String)">
 <summary>
 Sorts the items in a ListBox by the given parameters.
 </summary>
 <param name="lsb">The ListBox control to sort.</param>
 <param name="sSort">The item parameter to sort on. (Text/Value)</param>
 <param name="sSortDirection">The direction to sort. (ASC/DESC)</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Sorter.SortDT(System.Data.DataTable@,System.String)">
 <summary>
 Sorts a DataTable into the provided columns. Columns must be part of the DataTable schema and separated by commas (Example: FirstName ASC, LastName DESC).
 </summary>
 <param name="dtSort">The DataTable to sort.</param>
 <param name="sSortColumns">The columns to sort the DataTable on. (Example: FirstName ASC, LastName DESC)</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.ExecuteNonQuery(System.Data.SqlClient.SqlCommand@,System.String,System.Int32,System.Boolean,System.Data.SqlClient.SqlConnection@,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Shortens the code required to execute a non-query sql call. Returns the number of rows affected.
 </summary>
 <param name="cmd">The sql command to use.</param>
 <param name="sAssignTo">The web team member to assign error reports to.</param>
 <param name="nErrorImportance">The global enum error importance of the error.</param>
 <param name="bShowErrorAlert">Show an error alert upon an error?</param>
 <param name="cnx">The sql connection to use.</param>
 <param name="bWriteInfo">Write the query information to the page?</param>
 <param name="bReportError">Report any errors?</param>
 <param name="bCheckAttacks">Check for sql injection attacks?</param>
 <returns>The number of rows affected.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.ExecuteNonQuery(System.Data.SqlClient.SqlCommand@,System.Data.SqlClient.SqlConnection@,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Shortens the code required to execute a non-query sql call. Returns the number of rows affected.
 </summary>
 <param name="cmd">The sql command to use.</param>
 <param name="cnx">The sql connection to use.</param>
 <param name="sAssignTo">The web team member to assign error reports to.</param>
 <param name="nErrorImportance">The global enum error importance of the error.</param>
 <param name="bShowErrorAlert">Show an error alert upon an error?</param>
 <param name="bWriteInfo">Write the query information to the page?</param>
 <param name="bReportError">Report any errors?</param>
 <returns>The number of rows affected.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.ExecuteNonQuery(System.Boolean,System.Data.SqlClient.SqlCommand@,System.Data.SqlClient.SqlConnection@,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Shortens the code required to execute a non-query sql call. Returns the number of rows affected.
 </summary>
 <param name="bWriteInfo">Write the query information to the page?</param>
 <param name="cmd">The sql command to use.</param>
 <param name="cnx">The sql connection to use.</param>
 <param name="sAssignTo">The web team member to assign error reports to.</param>
 <param name="nErrorImportance">The global enum error importance of the error.</param>
 <param name="bShowErrorAlert">Show an error alert upon an error?</param>
 <param name="bReportError">Report any errors?</param>
 <returns>The number of rows affected.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.ExecuteNonQuery(System.String,System.String,System.Int32,System.Boolean,System.Data.SqlClient.SqlConnection@,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Shortens the code required to execute a non-query sql call. Returns the number of rows affected.
 </summary>
 <param name="sQuery">The query to run.</param>
 <param name="sAssignTo">The web team member to assign error reports to.</param>
 <param name="nErrorImportance">The global enum error importance of the error.</param>
 <param name="bShowErrorAlert">Show an error alert upon an error?</param>
 <param name="cnx">The sql connection to use.</param>
 <param name="bWriteInfo">Write the query information to the page?</param>
 <param name="bReportError">Report any errors?</param>
 <returns>The number of rows affected.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.ExecuteNonQuery(System.Boolean,System.String,System.String,System.Int32,System.Boolean,System.Data.SqlClient.SqlConnection@,System.Boolean,System.Boolean)">
 <summary>
 Shortens the code required to execute a non-query sql call. Returns the number of rows affected.
 </summary>
 <param name="bWriteInfo">Write the query information to the page?</param>
 <param name="sQuery">The query to run.</param>
 <param name="sAssignTo">The web team member to assign error reports to.</param>
 <param name="nErrorImportance">The global enum error importance of the error.</param>
 <param name="bShowErrorAlert">Show an error alert upon an error?</param>
 <param name="cnx">The sql connection to use.</param>
 <param name="bReportError">Report any errors?</param>
 <returns>The number of rows affected.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.ExecuteNonQuery(System.String,System.Data.SqlClient.SqlConnection@,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Shortens the code required to execute a non-query sql call. Returns the number of rows affected.
 </summary>
 <param name="sQuery">The query to run.</param>
 <param name="cnx">The sql connection to use.</param>
 <param name="sAssignTo">The web team member to assign error reports to.</param>
 <param name="nErrorImportance">The global enum error importance of the error.</param>
 <param name="bShowErrorAlert">Show an error alert upon an error?</param>
 <param name="bWriteInfo">Write the query information to the page?</param>
 <param name="bReportError">Report any errors?</param>
 <returns>The number of rows affected.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.ExecuteNonQuery(System.Boolean,System.String,System.Data.SqlClient.SqlConnection@,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Shortens the code required to execute a non-query sql call. Returns the number of rows affected.
 </summary>
 <param name="bWriteInfo">Write the query information to the page?</param>
 <param name="sQuery">The query to run.</param>
 <param name="cnx">The sql connection to use.</param>
 <param name="sAssignTo">The web team member to assign error reports to.</param>
 <param name="nErrorImportance">The global enum error importance of the error.</param>
 <param name="bShowErrorAlert">Show an error alert upon an error?</param>
 <param name="bReportError">Report any errors?</param>
 <returns>The number of rows affected.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.ExecuteScalar(System.Data.SqlClient.SqlCommand@,System.String,System.Int32,System.Boolean,System.Data.SqlClient.SqlConnection@,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Shortens the code required to execute a scalar sql call. Returns the value in the first column of the first row affected by the query.
 </summary>
 <param name="cmd">The sql command to use.</param>
 <param name="sAssignTo">The web team member to assign error reports to.</param>
 <param name="nErrorImportance">The global enum error importance of the error.</param>
 <param name="bShowErrorAlert">Show an error alert upon an error?</param>
 <param name="cnx">The sql connection to use.</param>
 <param name="bWriteInfo">Write the query information to the page?</param>
 <param name="bReportError">Report any errors?</param>
 <returns>The value in the first column of the first row affected by the query.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.ExecuteScalar(System.Boolean,System.Data.SqlClient.SqlCommand@,System.String,System.Int32,System.Boolean,System.Data.SqlClient.SqlConnection@,System.Boolean,System.Boolean)">
 <summary>
 Shortens the code required to execute a scalar sql call. Returns the value in the first column of the first row affected by the query.
 </summary>
 <param name="bWriteInfo">Write the query information to the page?</param>
 <param name="cmd">The sql command to use.</param>
 <param name="sAssignTo">The web team member to assign error reports to.</param>
 <param name="nErrorImportance">The global enum error importance of the error.</param>
 <param name="bShowErrorAlert">Show an error alert upon an error?</param>
 <param name="cnx">The sql connection to use.</param>
 <param name="bReportError">Report any errors?</param>
 <returns>The value in the first column of the first row affected by the query.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.ExecuteScalar(System.Data.SqlClient.SqlCommand@,System.Data.SqlClient.SqlConnection@,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Shortens the code required to execute a scalar sql call. Returns the value in the first column of the first row affected by the query.
 </summary>
 <param name="cmd">The sql command to use.</param>
 <param name="cnx">The sql connection to use.</param>
 <param name="sAssignTo">The web team member to assign error reports to.</param>
 <param name="nErrorImportance">The global enum error importance of the error.</param>
 <param name="bShowErrorAlert">Show an error alert upon an error?</param>
 <param name="bWriteInfo">Write the query information to the page?</param>
 <param name="bReportError">Report any errors?</param>
 <returns>The value in the first column of the first row affected by the query.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.ExecuteScalar(System.Boolean,System.Data.SqlClient.SqlCommand@,System.Data.SqlClient.SqlConnection@,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Shortens the code required to execute a scalar sql call. Returns the value in the first column of the first row affected by the query.
 </summary>
 <param name="bWriteInfo">Write the query information to the page?</param>
 <param name="cmd">The sql command to use.</param>
 <param name="cnx">The sql connection to use.</param>
 <param name="sAssignTo">The web team member to assign error reports to.</param>
 <param name="nErrorImportance">The global enum error importance of the error.</param>
 <param name="bShowErrorAlert">Show an error alert upon an error?</param>
 <param name="bReportError">Report any errors?</param>
 <returns>The value in the first column of the first row affected by the query.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.ExecuteScalar(System.Data.SqlClient.SqlDataAdapter@,System.String,System.Int32,System.Boolean,System.Data.SqlClient.SqlConnection@,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Shortens the code required to execute a scalar sql call. Returns the value in the first column of the first row affected by the query.
 </summary>
 <param name="sda">The sql data adapter to use.</param>
 <param name="sAssignTo">The web team member to assign error reports to.</param>
 <param name="nErrorImportance">The global enum error importance of the error.</param>
 <param name="bShowErrorAlert">Show an error alert upon an error?</param>
 <param name="cnx">The sql connection to use.</param>
 <param name="bWriteInfo">Write the query information to the page?</param>
 <param name="bReportError">Report any errors?</param>
 <returns>The value in the first column of the first row affected by the query.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.ExecuteScalar(System.Boolean,System.Data.SqlClient.SqlDataAdapter@,System.String,System.Int32,System.Boolean,System.Data.SqlClient.SqlConnection@,System.Boolean,System.Boolean)">
 <summary>
 Shortens the code required to execute a scalar sql call. Returns the value in the first column of the first row affected by the query.
 </summary>
 <param name="bWriteInfo">Write the query information to the page?</param>
 <param name="sda">The sql data adapter to use.</param>
 <param name="sAssignTo">The web team member to assign error reports to.</param>
 <param name="nErrorImportance">The global enum error importance of the error.</param>
 <param name="bShowErrorAlert">Show an error alert upon an error?</param>
 <param name="cnx">The sql connection to use.</param>
 <param name="bReportError">Report any errors?</param>
 <returns>The value in the first column of the first row affected by the query.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.ExecuteScalar(System.Data.SqlClient.SqlDataAdapter@,System.Data.SqlClient.SqlConnection@,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Shortens the code required to execute a scalar sql call. Returns the value in the first column of the first row affected by the query.
 </summary>
 <param name="sda">The sql data adapter to use.</param>
 <param name="cnx">The sql connection to use.</param>
 <param name="sAssignTo">The web team member to assign error reports to.</param>
 <param name="nErrorImportance">The global enum error importance of the error.</param>
 <param name="bShowErrorAlert">Show an error alert upon an error?</param>
 <param name="bReportError">Report any errors?</param>
 <returns>The value in the first column of the first row affected by the query.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.ExecuteScalar(System.Boolean,System.Data.SqlClient.SqlDataAdapter@,System.Data.SqlClient.SqlConnection@,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Shortens the code required to execute a scalar sql call. Returns the value in the first column of the first row affected by the query.
 </summary>
 <param name="bWriteInfo">Write the query information to the page?</param>
 <param name="sda">The sql data adapter to use.</param>
 <param name="cnx">The sql connection to use.</param>
 <param name="sAssignTo">The web team member to assign error reports to.</param>
 <param name="nErrorImportance">The global enum error importance of the error.</param>
 <param name="bShowErrorAlert">Show an error alert upon an error?</param>
 <param name="bReportError">Report any errors?</param>
 <returns>The value in the first column of the first row affected by the query.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.ExecuteScalar(System.String,System.String,System.Int32,System.Boolean,System.Data.SqlClient.SqlConnection@,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Shortens the code required to execute a scalar sql call. Returns the value in the first column of the first row affected by the query.
 </summary>
 <param name="sQuery">The query to run.</param>
 <param name="sAssignTo">The web team member to assign error reports to.</param>
 <param name="nErrorImportance">The global enum error importance of the error.</param>
 <param name="bShowErrorAlert">Show an error alert upon an error?</param>
 <param name="cnx">The sql connection to use.</param>
 <param name="bWriteInfo">Write the query information to the page?</param>
 <param name="bReportError">Report any errors?</param>
 <returns>The value in the first column of the first row affected by the query.</returns>
 <remarks>Will return a 0 value for INSERT queries.</remarks>
</member>
<member name="M:WhitTools.SQL.ExecuteScalar(System.Boolean,System.String,System.String,System.Int32,System.Boolean,System.Data.SqlClient.SqlConnection@,System.Boolean,System.Boolean)">
 <summary>
 Shortens the code required to execute a scalar sql call. Returns the value in the first column of the first row affected by the query.
 </summary>
 <param name="bWriteInfo">Write the query information to the page?</param>
 <param name="sQuery">The query to run.</param>
 <param name="sAssignTo">The web team member to assign error reports to.</param>
 <param name="nErrorImportance">The global enum error importance of the error.</param>
 <param name="bShowErrorAlert">Show an error alert upon an error?</param>
 <param name="cnx">The sql connection to use.</param>
 <param name="bReportError">Report any errors?</param>
 <returns>The value in the first column of the first row affected by the query.</returns>
 <remarks>Will return a 0 value for INSERT queries.</remarks>
</member>
<member name="M:WhitTools.SQL.ExecuteScalar(System.String,System.Data.SqlClient.SqlConnection@,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Shortens the code required to execute a scalar sql call. Returns the value in the first column of the first row affected by the query.
 </summary>
 <param name="sQuery">The query to run.</param>
 <param name="cnx">The sql connection to use.</param>
 <param name="sAssignTo">The web team member to assign error reports to.</param>
 <param name="nErrorImportance">The global enum error importance of the error.</param>
 <param name="bShowErrorAlert">Show an error alert upon an error?</param>
 <param name="bWriteInfo">Write the query information to the page?</param>
 <param name="bReportError">Report any errors?</param>
 <returns>The value in the first column of the first row affected by the query.</returns>
 <remarks>Will return a 0 value for INSERT queries.</remarks>
</member>
<member name="M:WhitTools.SQL.ExecuteScalar(System.Boolean,System.String,System.Data.SqlClient.SqlConnection@,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Shortens the code required to execute a scalar sql call. Returns the value in the first column of the first row affected by the query.
 </summary>
 <param name="bWriteInfo">Write the query information to the page?</param>
 <param name="sQuery">The query to run.</param>
 <param name="cnx">The sql connection to use.</param>
 <param name="sAssignTo">The web team member to assign error reports to.</param>
 <param name="nErrorImportance">The global enum error importance of the error.</param>
 <param name="bShowErrorAlert">Show an error alert upon an error?</param>
 <param name="bReportError">Report any errors?</param>
 <returns>The value in the first column of the first row affected by the query.</returns>
 <remarks>Will return a 0 value for INSERT queries.</remarks>
</member>
<member name="M:WhitTools.SQL.CleanSQL(System.String,System.Boolean)">
 <summary>
 Takes a string and replaces characters with the version that the SQL query will accept.
 </summary>
 <param name="sSQL">The string to replace characters in.</param>
 <param name="bIncludeTrim">Is the value trimmed?</param>
 <returns>A clean SQL query string.</returns>
 <remarks>Example: Replaces ' with '' to get the literal value.</remarks>
</member>
<member name="M:WhitTools.SQL.CreateSQLConnection(System.String,System.String)">
 <summary>
 Creates an SqlConnection object for the provided database. If the database provided does not exist, then DB_COMMUNICATIONS is used.
 </summary>
 <param name="sDatabase">The database to connect to.</param>
 <param name="sServer">The server to connect to.</param>
 <returns>An SQLConnection object connected to the provided database.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.CreateSQLCommand(System.String,System.String,System.String)">
 <summary>
 Creates an SqlCommand object with the provided procedure. Reads the provided database, otherwise defaults to the database assigned to the SESSION_PROJECT_DB_CONNECTION session variable.
 </summary>
 <param name="sProcedure">The procedure to apply to the SqlCommand object.</param>
 <param name="sDatabase">The database to connect to.</param>
 <param name="sServer">The server to connect to.</param>
 <returns>An SqlCommand object that calls the provided procedure.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.CreateSQLCommand(System.String,System.Data.SqlClient.SqlConnection,System.String)">
 <summary>
 Creates an SqlCommand object with the provided procedure. Reads the provided SqlConnection object, otherwise defaults to the database assigned to the SESSION_PROJECT_DB_CONNECTION session variable.
 </summary>
 <param name="sProcedure">The procedure to apply to the SqlCommand object.</param>
 <param name="cnx">The SqlConnection object to use. Defaults to SESSION_PROJECT_DB_CONNECTION, or DB_COMMUNICATIONS if the session variable is not assigned.</param>
 <param name="sServer">The server to connect to.</param>
 <returns>An SqlCommand object that calls the provided procedure.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.GetDatabases(System.Boolean)">
 <summary>
 Gets a list of all Whitworth databases. Loaded under the column name "DatabaseName".
 </summary>
 <returns>A list of all Whitworth databases. Loaded under the column name "DatabaseName".</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.GetDatabaseTables(System.String)">
 <summary>
 Gets a list of all DataTables within the provided database. Loaded under the column name "TableName".
 </summary>
 <param name="sDatabase">The database to get a list of DataTables for.</param>
 <returns>A list of all DataTables within the provided database. Loaded under the column name "TableName".</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.GetDatabaseViews(System.String)">
 <summary>
 Gets a list of all views within the provided database. Loaded under the column name "ViewName".
 </summary>
 <param name="sDatabase">The database to get a list of views for.</param>
 <returns>A list of all views within the provided database. Loaded under the column name "ViewName".</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.GetDatabaseTablesViews(System.String)">
 <summary>
 Gets a list of all DataTables and views within the provided database. Loaded under the column name "TableName".
 </summary>
 <param name="sDatabase">The database to get a list of DataTables and views for.</param>
 <returns>A list of all DataTables and views within the provided database. Loaded under the column name "TableName".</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.GetDatabaseProcedures(System.String)">
 <summary>
 Gets a list of all procedures within the provided database. Loaded under the column name "ProcedureName".
 </summary>
 <param name="sDatabase">The database to get a list of procedures for.</param>
 <returns>A list of all procedures within the provided database. Loaded under the column name "ProcedureName".</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.GetDatabaseFunctions(System.String)">
 <summary>
 Gets a list of all functions within the provided database. Loaded under the column name "FunctionName".
 </summary>
 <param name="sDatabase">The database to get a list of functions for.</param>
 <returns>A list of all functions within the provided database. Loaded under the column name "FunctionName".</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.GetDatabaseRoutines(System.String)">
 <summary>
 Gets a list of all procedures and functions within the provided database. Loaded under the column name "RoutineName".
 </summary>
 <param name="sDatabase">The database to get a list of procedures and functions for.</param>
 <returns>A list of all procedures and functions within the provided database. Loaded under the column name "RoutineName".</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.GetDataTableColumns(System.String,System.String,System.String,System.String,System.Boolean)">
 <summary>
 Gets the columns of a DataTable, as well as specific information about the column details. The columns are under ColumnName, type is under DataType, database is under DatabaseName, datatable is under TableName, maximum character length is under MaxLength.
 </summary>
 <param name="sTableName">The DataTable to retrieve columns for. If you provide the full path (i.e. Web3.adTelephone.dbo.PeopleListing) you do not need to provide the database.</param>
 <param name="sDatabase">The database the DataTable is located in. Can be left blank if the database is provided in sTableName.</param>
 <param name="sDataType">The data type to filter the results with.</param>
 <param name="sMaxLength">If filtering on a varchar or char data type, you can provide a max length to return only columns with that max length value. -1 is MAX.</param>
 <param name="bInclude8000AsMaxLength">Does varchar(8000) get treated like varchar(MAX) for filtering purposes?</param>
 <returns>A DataTable containing information about the DataTable columns for the provided table name. The columns are under ColumnName.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.GetDataTableDatabase(System.String)">
 <summary>
 Gets the database the DataTable is located in. sTableName can be the full path or just a table name. 
 If sTableName is found in more than one database, then S_FAILED is returned.
 </summary>
 <param name="sTableName">The DataTable to retrieve the database for.</param>
 <returns>The name of the database the DataTable is located in. Returns S_NOT_FOUND if no Datatable can be found containing a DataTable of that name. Returns S_FAILED if multiple Databases contain a DataTable with that name.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.IsDatabase(System.String)">
 <summary>
 Checks if the Database name provided is a valid database.
 </summary>
 <param name="sDatabaseName">The Database name to check.</param>
 <returns>Does the Database exist?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.DataTableInDatabase(System.String,System.String)">
 <summary>
 Checks if the DataTable is in the Database.
 </summary>
 <param name="sDataTableName">The name of the DataTable to check.</param>
 <param name="sDatabaseName">The Database to check for the DataTable in..</param>
 <returns>Does the DataTable exist in the Database?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.ReadableQuery(System.String)">
 <summary>
 Takes a query and returns a more readable version of the query string.
 </summary>
 <param name="sQuery">The query to format.</param>
 <returns>A more readable version of the query.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.CheckSQLObjectExists(System.String,System.Data.SqlClient.SqlConnection)">
 <summary>
 Check if a SQL object (table, stored procedure, etc.) exists.
 </summary>
 <param name="sObjectName">The name of the object.</param>
 <param name="cnx">The SqlConnection object.</param>
 <returns>Does the object exist?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.AlignTables(System.String,System.String,System.String,System.Data.SqlClient.SqlConnection)">
 <summary>
 
 </summary>
 <param name="sCopyFromTableName"></param>
 <param name="sCopyToTableName"></param>
 <param name="sDatabase"></param>
 <param name="cnx"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.CheckConnection(System.Data.SqlClient.SqlConnection@)">
 <summary>
 Ensures an SqlConnection object is a valid object with a connection to the database.
 </summary>
 <param name="cnx">The connection object to check.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.CheckIfProcedureExistsInDatabase(System.String,System.String)">
 <summary>
 Checks if a procedure already exists in a particular database.
 </summary>
 <param name="sProcedureName">The name of the procedure.</param>
 <param name="sDatabase">The database to check.</param>
 <returns>Does the procedure exist in the provided database?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.CheckQueryContainsAttacks(System.String@)">
 <summary>
 Checks if a query contains malicious content.
 </summary>
 <param name="sOriginalQuery">The query string to check.</param>
 <returns>Does the query contain malicious content?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.SQL.GetEcommerceInvoicePaidSQL(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String)">
 <summary>
 Returns SQL code for retrieving eCommerce invoice values that match the parameters. Defaults to returning only "Paid" invoices.
 </summary>
 <param name="bReturnPaidInvoices">Should fully paid invoices be returned in the query?</param>
 <param name="bReturnUnpaidInvoices">Should unpaid invoices be returned in the query?</param>
 <param name="bReturnCashInvoices">Should invoices marked as being paid with cash be returned in the query?</param>
 <param name="bReturnNullInvoices">Should "NULL" invoices be returned in the query?</param>
 <param name="sInvoice">The datatable column name to retrieve the invoice value from. Defaults to "Invoice". If an integer value above zero is provided, then results for that specific invoice will be returned.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.StudentApplications.GetApplicationOpenDate(System.Int32)">
 <summary>
 
 </summary>
 <param name="nApplicationType"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.StudentApplications.GetApplicationCloseDate(System.Int32)">
 <summary>
 
 </summary>
 <param name="nApplicationType"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.StudentApplications.GetApplicationOptionalDate1(System.Int32)">
 <summary>
 
 </summary>
 <param name="nApplicationType"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.StudentApplications.GetApplicationOptionalDate2(System.Int32)">
 <summary>
 
 </summary>
 <param name="nApplicationType"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.StudentApplications.GetApplicationOptionalDate3(System.Int32)">
 <summary>
 
 </summary>
 <param name="nApplicationType"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.StudentApplications.CheckApplicationOpen(System.Int32,System.Boolean)">
 <summary>
 
 </summary>
 <param name="nApplicationType"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.StudentApplications.CheckApplicationSubmitted(System.Int32,System.String,System.Boolean)">
 <summary>
 Checks to see if the current user has submitted an application for this round of hiring yet.
 </summary>
 <param name="nApplicationType">The application type to check for.</param>
 <param name="sUsername">The username of the application to check. If no username is provided, then the currently logged-in user is used.</param>
 <returns>Has the user submitted an application for this round of hiring yet?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.StudentApplications.GetPreviousApplication(System.Int32,System.String)">
 <summary>
 Gets a previous application submitted by this user. Only returns the most recent applications that was not submitted for this round of hiring.
 </summary>
 <param name="nApplicationType">The application type to check for.</param>
 <param name="sUsername">The username of the application to check. If no username is provided, then the currently logged-in user is used.</param>
 <returns>The most recent application submitted by the user.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.TextBoxes.LoadRichTextBoxes(System.Boolean,System.Web.UI.WebControls.TextBox[])">
 <summary>
 Adds rich controls to any number of TextBox controls. Should be called in the Page_Load function every
 time the page reloads, otherwise the rich controls will dissappear on a Page.PostBack.
 Note: Overwrites the window.onload() javascript function, which may cause issues.
 </summary>
 <param name="bOnLoad">When should the javascript be loaded. If True, then the javascript is added with addFunctionToLoadQueue(). If False, then the javascript is added when the function is called.</param>
 <param name="aTextBoxes">A comma-delimited list of TextBox controls to add rich controls to.</param>
 <remarks>Overwrites the window.onload() javascript function, which may cause issues.</remarks>
</member>
<member name="M:WhitTools.TextBoxes.LoadRichTextBoxes(System.Web.UI.WebControls.TextBox[])">
 <summary>
 Adds rich controls to any number of TextBox controls. Should be called in the Page_Load function every
 time the page reloads, otherwise the rich controls will dissappear on a Page.PostBack.
 Note: Overwrites the window.onload() javascript function, which may cause issues.
 </summary>
 <param name="aTextBoxes">A comma-delimited list of TextBox controls to add rich controls to.</param>
 <remarks>Overwrites the window.onload() javascript function, which may cause issues.</remarks>
</member>
<member name="M:WhitTools.TextBoxes.LoadRichTextBoxesOnLoad(System.Web.UI.WebControls.TextBox[])">
 <summary>
 Adds rich controls to any number of TextBox controls. Should be called in the Page_Load function every
 time the page reloads, otherwise the rich controls will dissappear on a Page.PostBack.
 Note: Overwrites the window.onload() javascript function, which may cause issues.
 </summary>
 <param name="aTextBoxes">A comma-delimited list of TextBox controls to add rich controls to.</param>
 <remarks>Overwrites the window.onload() javascript function, which may cause issues.</remarks>
</member>
<member name="M:WhitTools.TextBoxes.LoadRichTextBoxesBeforeOnLoad(System.Web.UI.WebControls.TextBox[])">
 <summary>
 Adds rich controls to any number of TextBox controls. Should be called in the Page_Load function every
 time the page reloads, otherwise the rich controls will dissappear on a Page.PostBack.
 Note: Overwrites the window.onload() javascript function, which may cause issues.
 </summary>
 <param name="aTextBoxes">A comma-delimited list of TextBox controls to add rich controls to.</param>
 <remarks>Overwrites the window.onload() javascript function, which may cause issues.</remarks>
</member>
<member name="M:WhitTools.TextBoxes.TextBoxTextAlign(System.Web.UI.WebControls.TextBox@,System.String)">
 <summary>
 Aligns the text in a TextBox control.
 </summary>
 <param name="txt">The TextBox control to align text in.</param>
 <param name="sAlign">The alignment to assign.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.TextBoxes.TextBoxRightAlign(System.Web.UI.WebControls.TextBox@)">
 <summary>
 Right-aligns the text in a TextBox control.
 </summary>
 <param name="txt">The TextBox control to right-align text in.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.TravelRequest.GetBudgetDetails(System.Int32,System.Int32,System.Boolean,System.Decimal@)">
 <summary>
 
 </summary>
 <param name="nRequestID"></param>
 <param name="nWorkflowProcessID"></param>
 <param name="bEmail"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:WhitTools.UserFileAccessRights">
 <summary>
 Configuring a Web site through a Web interface can be tricky. 
 If one is to read and write various files, it is useful to know 
 in advance if you have the authority to do so.
 
 This class contains a simple answer to a 
 potentially complicated question 
 "Can I read this file or can I write to this file?"
 
 Using the "rule of least privilege", 
 one must check not only is access granted but 
 is it denied at any point including a possibly recursive check of groups.
 
 For this simple check, a look at the user and immediate groups are only checked.
 
 This class could be expanded to identify if the applicable allow/deny rule
 was explicit or inherited
 
 </summary>
</member>
<member name="M:WhitTools.UserFileAccessRights.getWindowsIdentity">
 <summary>
 Simple accessor
 </summary>
 <returns></returns>
</member>
<member name="M:WhitTools.UserFileAccessRights.getPath">
 <summary>
 Simple accessor
 </summary>
 <returns></returns>
</member>
<member name="M:WhitTools.UserFileAccessRights.#ctor(System.String)">
 <summary>
 Convenience constructor assumes the current user
 </summary>
 <param name="path"></param>
</member>
<member name="M:WhitTools.UserFileAccessRights.#ctor(System.String,System.Security.Principal.WindowsIdentity)">
 <summary>
 Supply the path to the file or directory and a user or group. 
 Access checks are done
 during instantiation to ensure we always have a valid object
 </summary>
 <param name="path"></param>
 <param name="principal"></param>
</member>
<member name="M:WhitTools.UserFileAccessRights.ToString">
 <summary>
 Simply displays all allowed rights
 Useful if say you want to test for write access and find it is false
 </summary>
 <returns></returns>
</member>
<member name="M:WhitTools.UserFileAccessRights.contains(System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.FileSystemAccessRule)">
 <summary>
 Convenience method to test if the right exists within the given rights
 </summary>
 <param name="right"></param>
 <param name="rule"></param>
 <returns></returns>
</member>
<member name="M:WhitTools.Utilities.CheckIP(System.String)">
 <summary>
 Checks certain IP ranges to determine if a user is inside or outside of Whitworth's network.
 </summary>
 <param name="sIP">The IP address to check.</param>
 <returns>True(1) if inside the network, False(0) if outside.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.CheckIPOnCampus(System.String)">
 <summary>
 Checks certain IP ranges to determine if a user is inside or outside of Whitworth's network.
 </summary>
 <param name="sIP">The IP address to check.</param>
 <returns>Returns true if inside the network, false if outside.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.AddControlColumn(System.Data.DataTable@,System.Web.UI.Control@,System.Data.SqlClient.SqlConnection)">
 <summary>
 Adds a column to the DataTable being used to save repeater data.  Columns are added for each
 control present in the repeater item template in order to facilitate the saving of the 
 actual data at a later point.  
 
 Since panels and repeaters are not eligible for being saved
 as data, if either of those control types is found, the method searches recursively
 through the children controls owned by the control that has been passed until it finds
 a non-panel, non-repeater control, and then adds that control as a data column.
 </summary>
 <param name="dtTarget">The DataTable having columns added to it.</param>
 <param name="ctlTarget">The control being checked for eligibility for adding to the DataTable.</param>
</member>
<member name="M:WhitTools.Utilities.AddControlValue(System.Data.DataRow@,System.Web.UI.Control,System.Data.SqlClient.SqlConnection)">
 <summary>
 Adds a value to the DataTable being used to save repeater data.  Data is added to the table
 based on the type of control passed to the method.  If the control is eligible for having 
 its data value added to the DataTable, it is added to the row of that table which is
 passed to the method.
 
 Since panels and repeaters are not eligible for being saved
 as data, if either of those control types is found, the method searches recursively
 through the children controls owned by the control that has been passed until it finds
 a non-panel, non-repeater control, and then adds the value of that control to the DataRow.
 </summary>
 <param name="drTarget">The DataRow having a value added to it.</param>
 <param name="ctlTarget">The control being checked for eligibility for adding its value to the DataTable.</param>
</member>
<member name="M:WhitTools.Utilities.SelectControlValue(System.Object@,System.Data.DataRow@,System.Data.DataTable,System.Data.SqlClient.SqlConnection)">
 <summary>
 This will select a control based on a value passed to the method.  Depending on the type of control,
 different selection criteria are used.  In the case of a dropdownlist, the dtSupplied DataTable
 is used to check if any data needs to be supplied to the list before a value is selected.
 </summary>
 <param name="oControl">The control being selected.</param>
 <param name="drTarget">The value to be assigned</param>
 <param name="dtSupplied">The DataTable containing the list of supplied data for lists.</param>
 <param name="cnx">The SQL connection object.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.CreateSuppliedDT(System.String,System.Data.DataTable@)">
 <summary>
 This will take the supplied data string passed to the UpdateRepeaterItems method and turn it
 into a DataTable.  For every set of four passed variables, one row is added to the DataTable.
 </summary>
 <param name="sSupplied">The string containing data that must be supplied to lists.</param>
 <param name="dt">The DataTable which will be loaded with the supplied data variables.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.CheckSuppliedData(System.Web.UI.Control@,System.Data.DataTable,System.Data.SqlClient.SqlConnection)">
 <summary>
 This will check the supplied data DT against a control, and if it finds the control in the
 list of supplied data sources, that control will be loaded with the specified data.
 </summary>
 <param name="ctlTarget">The control being checked against the list of supplied data.</param>
 <param name="dtSupplied">The DataTable containing the supplied data sources.</param>
 <param name="cnx">The SQL connection.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.SearchRepeaterForControl(System.Web.UI.Control,System.Web.UI.WebControls.Repeater)">
 <summary>
 Searches a repeater for a match to the source control. If a match is found the index of the
 repeater item containing the control is returned. If no match is found, N_NOT_FOUND global enum
 is returned.
 </summary>
 <param name="source">The control to search for within the repeater.</param>
 <param name="rpt">The repeater control to search for a control in.</param>
 <returns>The repeater item index the source control was found in. Returns N_NOT_FOUND global enum if no match is found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.SearchControlCollection(System.Web.UI.Control,System.Web.UI.ControlCollection)">
 <summary>
 Searches a ControlCollection for a match to the source control. If a match is found the index of the
 ControlCollection index containing the control is returned. If no match is found, N_NOT_FOUND global enum
 is returned.
 </summary>
 <param name="source">The control to search for within the repeater.</param>
 <param name="collection">The ControlCollection to search for a control in.</param>
 <returns>The ControlCollection index the source control was found in. Returns N_NOT_FOUND global enum if no match is found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.ControlExistsInCollection(System.String,System.Web.UI.ControlCollection,System.Boolean@)">
 <summary>
 Searches a ControlCollection for a match to the provided control name. Returns if the control was found or not.
 </summary>
 <param name="sControlName">The name of the control to search for within the repeater.</param>
 <param name="collection">The ControlCollection to search for a control in. Defaults to the current Page() object.</param>
 <param name="bFound">A variable for tracking if the control was found.</param>
 <returns>Was the control found within the collection?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.WriteReadableQuery(System.String)">
 <summary>
 Takes a query string and turns it into a more easily readable html string. Supported queries: Update, Insert
 </summary>
 <param name="sQuery">The query string to make more easily readable.</param>
 <returns>A more easily readable html version of a query string.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.CountListControlSelectedItems(System.Web.UI.Control@)">
 <summary>
 Obsolete: UsGetter.GetListControlSelectedItems(). Gets the number of selected items in a control.
 </summary>
 <param name="cTarget">The control to check the number of selected items of.</param>
 <returns>The number of selected items in the control.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.WriteSessionVariables(System.Boolean,System.Boolean)">
 <summary>
 Writes all session variables to a string.
 </summary>
 <param name="bShowDecrypted">Show the decrypted version always?</param>
 <param name="bReportErrors">Send error reports?</param>
 <returns>A string with all of the current session variables. Returns a blank string if there are no session variables set.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.WriteQueryStringVariables(System.Boolean)">
 <summary>
 Writes all query string variables to a string.
 </summary>
 <param name="bShowDecrypted">Show the decrypted version always?</param>
 <returns>A string with all of the current QueryString variables. Returns a blank string if there are no QueryStrings.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.Write(System.String,System.Boolean)">
 <summary>
 Writes the provided string to the current page.
 </summary>
 <param name="sWrite">The string to write to the page.</param>
 <param name="bWebTeamOnly">Should only web team members be able to see this? Also displays if the maintenance QueryString is set.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.WWrite(System.String)">
 <summary>
 Writes the provided string to the current page. Only web team members will see it.
 </summary>
 <param name="sWrite">The string to write to the page.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.WriteHR(System.String,System.Boolean)">
 <summary>
 Writes the provided string to the current page with hr tags before and after.
 </summary>
 <param name="sWrite">The string to write to the page.</param>
 <param name="bWebTeamOnly">Should only web team members be able to see this? Also displays if the maintenance QueryString is set.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.WWriteHR(System.String)">
 <summary>
 Writes the provided string to the current page with hr tags before and after. Only web team members will see it.
 </summary>
 <param name="sWrite">The string to write to the page.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.WriteLine(System.String,System.Boolean)">
 <summary>
 Writes with an automatic double carriage return after.
 </summary>
 <param name="sWrite"></param>
 <param name="bWebTeamOnly"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.WriteAlert(System.String)">
 <summary>
 Provides an easy way to create a javascript alert message.
 </summary>
 <param name="sAlertMessage">The message to display in the javascript alert popup.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.Alert(System.String,System.Boolean)">
 <summary>
 Provides an easy way to create a javascript alert message. \n for newline. \t for tab.
 </summary>
 <param name="sAlertMessage">The message to display in the javascript alert popup.</param>
 <param name="bWebTeamOnly">Should only web team members be able to see this? Also displays if the maintenance QueryString is set.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.WAlert(System.String)">
 <summary>
 Provides an easy way to create a javascript alert message. Only web team members will see it.
 </summary>
 <param name="sAlertMessage">The message to display in the javascript alert popup.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.RedirectAfterSetTime(System.String,System.Double)">
 <summary>
 Redirects the user after a set amount of time.
 </summary>
 <param name="sRedirect">The page to redirect the user to.</param>
 <param name="nSeconds">The number of seconds to wait before redirecting the user. Defaults to 5 seconds.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.RefreshAfterSetTime(System.Double)">
 <summary>
 Refreshes the page after a set amount of time.
 </summary>
 <param name="nSeconds">The number of seconds to wait before redirecting the user. Defaults to 5 seconds.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.RedirectAfterAlert(System.String,System.String)">
 <summary>
 Redirects the user after displaying an alert message.
 </summary>
 <param name="sAlertMessage">The message to display before redirecting the user.</param>
 <param name="sRedirect">The page to redirect the user to.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.RefreshAfterAlert(System.String)">
 <summary>
 Refreshes the page after displaying an alert message.
 </summary>
 <param name="sAlertMessage">The message to display before refreshing the page.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.Redirect(System.String,System.Boolean)">
 <summary>
 Redirects the user to the provided URL.
 </summary>
 <param name="sRedirectURL">The URL to redirect to.</param>
 <param name="bKeepMaintenance">Keep the maintenance QueryString if it exists?</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.RedirectNewWindow(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
 <summary>
 Opens a new window.
 </summary>
 <param name="sRedirectURL">The URL to set to the new window.</param>
 <param name="sWindowName">The name of the window.</param>
 <param name="nWidth">The width of the window. Defaults to -1, which sets the width to the size of the screen.</param>
 <param name="nHeight">The height of the window. Defaults to -1, which sets the height to the size of the screen.</param>
 <param name="bShowAddressField">Display the address field?</param>
 <param name="bShowMenuBar">Display the menu bar?</param>
 <param name="bIsResizable">Is the window resizable?</param>
 <param name="bShowScrollBars">Display the scrollbars?</param>
 <param name="bShowStatusBar">Display the status bar?</param>
 <param name="bShowToolBar">Display the toolbar?</param>
 <param name="nLeft">The left position of the window.</param>
 <param name="nTop">The top position of the window (IE only).</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.RefreshPage(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Refreshes the current page.
 </summary>
 <param name="bKeepQueryStrings">Keep the current QueryStrings?</param>
 <param name="bShow">Is the "Show" QueryString being updated by the current page? Checks ddlShow.SelectedIndex</param>
 <param name="bPage">Is the "Page" QueryString being updated by the current page? Checks Request.QueryString("Page")</param>
 <param name="bSort">Is the "Sort" QueryString being updated by the current page? Checks ddlSort.SelectedIndex, or ddlSortBy.SelectedIndex, or ddlOrderBy.SelectedIndex</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.IsUnderMaintenance(System.Boolean,System.Boolean,System.String,System.String,System.String)">
 <summary>
 If the parameter bUnderMaintenance is false, then the user is redirected to the "Under Maintenance" 
 notification page. Exceptions include: 
 1) Web team members 
 2) The "Maintenance" session variable is set
 3) The "Maintenance" QueryString is set
 </summary>
 <param name="bUnderMaintenance">Is the page under maintenance?</param>
 <param name="bThisPageOnly">Is the current page the only one under maintenance?</param>
 <param name="sProjectWebTeamMember">The web team member to assign errors to. Expects the web team member's username.</param>
 <param name="sDB">The Database used for SqlConnection objects for the project.</param>
 <param name="sRedirectTo">The page to redirect users to if the page is under maintenance.</param>
 <returns>Is the page under maintenance?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.IsUnderMaintenance">
 <summary>
 Checks if the current page is under maintenance. Web team members are not redirected and automatically returns False for this function.
 </summary>
 <returns>Is the page under maintenance?</returns>
 <remarks>When a page is under maintenance either Session(Maintenance) or QueryString(Maintenance) will be set.</remarks>
</member>
<member name="M:WhitTools.Utilities.RemoveIsUnderMaintenanceSessionVariables">
 <summary>
 Resets the IsUnderMaintenance() session variables.
 </summary>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.ErrorAlert(System.Exception)">
 <summary>
 Creates a pop-up box with an error alert message.
 </summary>
 <param name="ex">The exception to show a message for.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.Alert(System.Exception)">
 <summary>
 Creates a pop-up box with an error alert message.
 </summary>
 <param name="ex">The exception to show a message for.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.WriteErrorAlert(System.Exception)">
 <summary>
 Creates a pop-up box with an error alert message.
 </summary>
 <param name="ex">The exception to show a message for.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.ErrorAlert(System.String)">
 <summary>
 Creates a pop-up box with an error alert message.
 </summary>
 <param name="sError">The error message to show.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.WriteErrorAlert(System.String)">
 <summary>
 Creates a pop-up box with an error alert message.
 </summary>
 <param name="sError">The error message to show.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.RedirectAfterErrorAlert(System.Exception,System.String)">
 <summary>
 Redirects the user after displaying an error alert message.
 </summary>
 <param name="ex">The exception error to display.</param>
 <param name="sRedirect">The page to redirect the user to.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.WriteCustomError(System.Exception,System.Boolean)">
 <summary>
 Writes a customized error message for the given exception.
 </summary>
 <param name="ex">The exception to write a customized error for.</param>
 <param name="bWebTeamOnly">Should the error only display for web team members?</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.AddBusinessDays(System.DateTime,System.Int32)">
 <summary>
 Returns the date that is a given number of business days from the starting date.
 </summary>
 <param name="dateStart">The DateTime to start adding business days to.</param>
 <param name="nBusinessDaysToAdd">The number of business days to add.</param>
 <returns>The DateTime that is the starting date plus the number of given business days.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.OpenNewWindow(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
 <summary>
 Opens a new window.
 </summary>
 <param name="sURL">The URL to set to the new window.</param>
 <param name="sWindowName">The name of the window.</param>
 <param name="nWidth">The width of the window. Defaults to -1, which sets the width to the size of the screen.</param>
 <param name="nHeight">The height of the window. Defaults to -1, which sets the height to the size of the screen.</param>
 <param name="bShowAddressField">Display the address field?</param>
 <param name="bShowMenuBar">Display the menu bar?</param>
 <param name="bIsResizable">Is the window resizable?</param>
 <param name="bShowScrollBars">Display the scrollbars?</param>
 <param name="bShowStatusBar">Display the status bar?</param>
 <param name="bShowToolBar">Display the toolbar?</param>
 <param name="nLeft">The left position of the window.</param>
 <param name="nTop">The top position of the window (IE only).</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.CreateNewWindow(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
 <summary>
 Opens a new window.
 </summary>
 <param name="sURL">The URL to set to the new window.</param>
 <param name="sWindowName">The name of the window.</param>
 <param name="nWidth">The width of the window. Defaults to -1, which sets the width to the size of the screen.</param>
 <param name="nHeight">The height of the window. Defaults to -1, which sets the height to the size of the screen.</param>
 <param name="bShowAddressField">Display the address field?</param>
 <param name="bShowMenuBar">Display the menu bar?</param>
 <param name="bIsResizable">Is the window resizable?</param>
 <param name="bShowScrollBars">Display the scrollbars?</param>
 <param name="bShowStatusBar">Display the status bar?</param>
 <param name="bShowToolBar">Display the toolbar?</param>
 <param name="nLeft">The left position of the window.</param>
 <param name="nTop">The top position of the window (IE only).</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.WritePageControls(System.Web.UI.ControlCollection@,System.String,System.Boolean)">
 <summary>
 Gets an html table of the controls on the page and specific settings for those controls.
 </summary>
 <param name="cc">The control collection to display information for. Defaults to the current page.</param>
 <param name="sDepth">A reference to the depth of the controls on the page.</param>
 <returns>A string containing an html table that displays information about the controls in the ControlCollection.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.WriteStack(System.Exception)">
 <summary>
 Writes the current process stack to a readable string format. Columns are Frame, ColumnNumber, LineNumber, FileName.
 </summary>
 <param name="ex">The optional exception to pull the stack from.</param>
 <returns>An html readable version of the current call stack.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.ScrollToControlID(System.String,System.Int32,System.String)">
 <summary>
 Animates the page to scroll to the top of the provided control id.
 </summary>
 <param name="sControlID">The control on the page to scroll to.</param>
 <param name="nOffsetTop">The distance to offset the top of the scroll position.</param>
 <param name="sAnimation">The type of animation to display.</param>
 <remarks>This function is untested.</remarks>
</member>
<member name="M:WhitTools.Utilities.WriteJavaScript(System.String)">
 <summary>
 Writes the provided javascript code. Adds the script tag within the function.
 </summary>
 <param name="sJavaScript">The javascript code to execute.</param>
 <returns>The javascript code that was executed.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.WriteJS(System.String)">
 <summary>
 Writes the provided javascript code. Adds the script tag within the function.
 </summary>
 <param name="sJavaScript">The javascript code to execute.</param>
 <returns>The javascript code that was executed.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.WriteJavaScriptOnLoad(System.String)">
 <summary>
 Writes the provided javascript code that will be called after the page loads. Adds the script tag and window.onload code within the function.
 </summary>
 <param name="sJavaScript">The javascript code to execute.</param>
 <returns>The javascript code that was executed.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.WriteJavaScriptBeforeOnLoad(System.String)">
 <summary>
 Writes the provided javascript code before the window.onload function gets called.
 </summary>
 <param name="sJavaScript">The javascript code to execute.</param>
 <returns>The javascript code that was executed.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.WriteJSOnLoad(System.String)">
 <summary>
 Writes the provided javascript code that will be called after the page loads. Adds the script tag and window.onload code within the function.
 </summary>
 <param name="sJavaScript">The javascript code to execute.</param>
 <returns>The javascript code that was executed.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.IsFacultyStaff(System.String,System.Boolean)">
 <summary>
 Is the provided username/PLID a faculty/staff member? Defaults to checking only active members.
 </summary>
 <param name="sInfo">The PLID/Username to check. Defaults to current user.</param>
 <param name="bMustBeActive">Does the faculty/staff member have to be an active member?</param>
 <returns>Is the provided parameter associated with a faculty/staff member?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.IsEmployee(System.String,System.Boolean)">
 <summary>
 Is the provided username/PLID a faculty/staff member? Defaults to checking only active members.
 </summary>
 <param name="sInfo">The PLID/Username to check. Defaults to current user.</param>
 <param name="bMustBeActive">Does the faculty/staff member have to be an active member?</param>
 <returns>Is the provided parameter associated with a faculty/staff member?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.IsFaculty(System.String,System.Boolean)">
 <summary>
 Is the provided username/PLID a faculty member? Defaults to checking only active members.
 </summary>
 <param name="sInfo">The PLID/Username to check. Defaults to current user.</param>
 <param name="bMustBeActive">Does the faculty/staff member have to be an active member?</param>
 <returns>Is the provided parameter associated with a faculty/staff member?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.IsStaff(System.String,System.Boolean)">
 <summary>
 Is the provided username/PLID a staff member? Defaults to checking only active members.
 </summary>
 <param name="sInfo">The PLID/Username to check. Defaults to current user.</param>
 <param name="bMustBeActive">Does the faculty/staff member have to be an active member?</param>
 <returns>Is the provided parameter associated with a faculty/staff member?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.IsStudent(System.String,System.Boolean)">
 <summary>
 Is the provided username/PLID a student? Defaults to checking only active members.
 </summary>
 <param name="sInfo">The PLID/Username to check. Defaults to current user.</param>
 <param name="bMustBeActive">Does the student have to be an active member?</param>
 <returns>Is the provided parameter associated with a student?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.CreateWeb1FormBreadcrumb(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Creates a Web1 Form breadcrumb html string.
 </summary>
 <param name="sLink">The url to link to.</param>
 <param name="sText">The text to display.</param>
 <param name="bNewWindow">Open the link in a new window?</param>
 <param name="bWebTeamOnly">Only show for web team members?</param>
 <param name="bShowAlways">Always show the link? This parameter is intended to have an IsAdmin() or similar function pass in whether the link should be displayed.</param>
 <returns>A Web1 Form formatted HTML anchor tag with the provided link and text.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.CreateWeb2FormBreadcrumb(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Creates a Web2 Form breadcrumb html string.
 </summary>
 <param name="sLink">The url to link to.</param>
 <param name="sText">The text to display.</param>
 <param name="bNewWindow">Open the link in a new window?</param>
 <param name="bWebTeamOnly">Only show for web team members?</param>
 <param name="bShowAlways">Always show the link? This parameter is intended to have an IsAdmin() or similar function pass in whether the link should be displayed.</param>
 <returns>A Web2 Form formatted HTML anchor tag with the provided link and text.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.TrackFunctionUse(System.String)">
 <summary>
 Tracks how many times a function has been called by calling this function within the function being tracked.
 </summary>
 <param name="sFunctionName">The name of the function to track.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.ReadFunctionUse(System.String)">
 <summary>
 Gets the number of times a function has been used since it was last reset.
 </summary>
 <param name="sFunctionName">The name of the function to check the use of.</param>
 <returns>The function use results.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.ResetFunctionTracking(System.String)">
 <summary>
 Resets the number of times a function has been tracked.
 </summary>
 <param name="sFunctionName">The name of the function to reset.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.CheckClosed(System.DateTime,System.DateTime,System.String,System.String,System.String,System.Boolean)">
 <summary>
 Checks a start date and end date. If the current date is outside of this timeframe then the user is redirected to the closed page.
 Check starting and end dates passed, redirect to a closed page if dates are valid and current date does not fall between them.
 </summary>
 <param name="openDate">The date the form opens.</param>
 <param name="closeDate">The date the form closes. If not provided, then the function will act as if there is not close date.</param>
 <param name="closedPage">The URL to redirect to if the form is closed.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.SetControlConsistency(System.Object@,System.Boolean)">
 <summary>
 Makes all controls on the page use a consistent CssClass value. Optionally sets the 
 MaintainScrollPositionOnPostBack setting on the page to True.
 </summary>
 <param name="obj">The control to make consistent. Defaults to the entire page.</param>
 <param name="bSetMaintainPositionOnPostBack">Set the MaintainScrollPositionOnPostBack page setting to true?</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.LoadMaintenanceIndex">
 <summary>
 Fills controls on the page to notify the user of information.
 </summary>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.RandomInt(System.Int32,System.Int32)">
 <summary>
 Returns a random number between -2147483648 (Integer.MinValue) and 2147483647 (Integer.MaxValue).
 </summary>
 <param name="nMin">The minimum random integer to return.</param>
 <param name="nMax">The maximum random integer to return.</param>
 <returns>A random number between -2147483648 and 2147483647 (or other provided parameters).</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.RandomIntPositive(System.Int32,System.Int32)">
 <summary>
 Returns a random number between 0 and 2147483647 (Integer.MaxValue).
 </summary>
 <param name="nMax">The maximum random integer to return.</param>
 <param name="nMin">The minimum random integer to return.</param>
 <returns>A random number between 0 and 2147483647 (or other provided parameters).</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.CreateHTMLAnchorTag(System.String,System.String,System.Boolean,System.String,System.Boolean)">
 <summary>
 Creates an HTML anchor tag.
 </summary>
 <param name="sLink">The url to link to.</param>
 <param name="sText">The text to display. A blank string shows the sLink parameter text.</param>
 <param name="bNewWindow">Open in a new window/tab?</param>
 <param name="sColor">The color to display the text in. Defaults to the current CSS setting.</param>
 <param name="bUnderline">Should the text be underlined when hovered over?</param>
 <returns>An HTML anchor tag with the given parameters.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.CurrentUsernameInList(System.Boolean,System.String[])">
 <summary>
 Checks a list of usernames passed in as parameters against the current user to determine if the current user is in the list.
 </summary>
 <param name="bIncludeWebTeam">Include web team members in the list?</param>
 <param name="aUsernames">A list of usernames to check against the current user.</param>
 <returns>Is the current user in the list?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.UsernameInList(System.String,System.Boolean,System.String[])">
 <summary>
 Checks a list of usernames passed in as parameters against the first username parameter to determine if the provided username is in the list.
 </summary>
 <param name="sUsername">The username to check if it is in the provided list.</param>
 <param name="bIncludeWebTeam">Include web team members in the list?</param>
 <param name="aUsernames">A list of usernames to check against the provided username.</param>
 <returns>Is the provided username in the list?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.EmailIsBlacklisted(System.String)">
 <summary>
 Checks if an email address is on the blacklist.
 </summary>
 <param name="sEmail">The email to check if it is on the blacklist.</param>
 <returns>Is the email on the blacklist?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.IsBlacklistedEmail(System.String)">
 <summary>
 Checks if an email address is on the blacklist.
 </summary>
 <param name="sEmail">The email to check if it is on the blacklist.</param>
 <returns>Is the email on the blacklist?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.BlacklistedEmails">
 <summary>
 Gets a list of blacklisted email addresses.
 </summary>
 <returns>A list of blacklisted email addresses.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.EmailBlacklist">
 <summary>
 Gets a list of blacklisted email addresses.
 </summary>
 <returns>A list of blacklisted email addresses.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.CheckFillPageControlsWithValues">
 <summary>
 Checks if the controls on the page should be filled with values. Fills controls on the page 
 if QueryString(S_FILL_CONTROLS) is not empty. This is a way of speeding up web team testing.
 </summary>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.GetTypesInNamespace(System.Reflection.Assembly,System.String)">
 <summary>
 
 </summary>
 <param name="assembly"></param>
 <param name="nameSpace"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.GetWhitToolsClasses">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.CloseWindow">
 <summary>
 Closes the current browser window.
 </summary>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.WindowClose">
 <summary>
 Closes the current browser window.
 </summary>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.SelectUserControlData(System.Web.UI.UserControl@,System.Data.DataTable,System.Data.SqlClient.SqlConnection,System.String)">
 <summary>
 
 </summary>
 <param name="uc"></param>
 <param name="dt"></param>
 <param name="cnx"></param>
 <param name="sSuppliedData"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.SelectUserControlData(System.Web.UI.UserControl@,System.Data.DataTable,System.Data.DataTable,System.Data.SqlClient.SqlConnection)">
 <summary>
 
 </summary>
 <param name="uc"></param>
 <param name="dt"></param>
 <param name="dtSuppliedData"></param>
 <param name="cnx"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.CreateUserControlData(System.Web.UI.UserControl@,System.Data.SqlClient.SqlConnection)">
 <summary>
 
 </summary>
 <param name="uc"></param>
 <param name="cnx"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.CreateFormBreadcrumb(System.String,System.String,System.Boolean,System.Object@)">
 <summary>
 Finds the lblBreadcrumbs Label control on the page and adds the parameter as a new breadcrumb.
 </summary>
 <param name="sText">The visible text.</param>
 <param name="sURL">The URL to link to. Defaults to empty, which is often used for the current page.</param>
 <param name="bNewWindow">Does the link open in a new window?</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.SetFormHeading(System.String,System.Object@)">
 <summary>
 Sets the sub heading for the form.
 </summary>
 <param name="sText">The text to show. Defaults to empty.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Utilities.ExtractUserProperty(System.String,WhitTools.Utilities.UserProperty)">
 <summary>
 For extracting individual properties from a user string in the format of User's Name (User's ID, User's Email Address)
 </summary>
 <param name="user"></param>
 <returns></returns>
</member>
<member name="M:WhitTools.Validator.ValidateTextBox(System.Web.UI.WebControls.TextBox@,System.Web.UI.WebControls.CustomValidator@,System.String,System.Int32,System.String,System.Web.UI.WebControls.ServerValidateEventArgs@,System.Boolean,System.Int32,System.Int32)">
 <summary>
 Validates the value provided in a TextBox.
 </summary>
 <param name="txtControl">The TextBox control to validate.</param>
 <param name="cv">The CustomValidator object to show error messages in.</param>
 <param name="sNoValueProvidedErrorText">The CustomValidator.Text value to display when a value is not provided for the TextBox, but is required.</param>
 <param name="nMaxLength">The maximum number of characters the TextBox text can contain.</param>
 <param name="sErrorMessage">The CustomValidator.ErrorMessage value to display. An empty string places sErrorText in its place.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="bEmptyIsValid">Is an empty text value valid?</param>
 <param name="nMinCharacters">The minimum number of characters the user must provide.</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <returns>Is the text in the TextBox valid?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Validator.ValidateTB(System.Web.UI.WebControls.TextBox@,System.Web.UI.WebControls.CustomValidator@,System.String,System.String,System.Web.UI.WebControls.ServerValidateEventArgs@,System.Boolean,System.Int32,System.Int32)">
 <summary>
 Validates the value provided in a TextBox.
 </summary>
 <param name="txtControl">The TextBox control to validate.</param>
 <param name="cv">The CustomValidator object to show error messages in.</param>
 <param name="sNoValueProvidedErrorText">The CustomValidator.Text value to display when a value is not provided for the TextBox, but is required.</param>
 <param name="sErrorMessage">The CustomValidator.ErrorMessage value to display. An empty string places sErrorText in its place.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="bEmptyIsValid">Is an empty text value valid?</param>
 <param name="nMinCharacters">The minimum number of characters the user must provide.</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <returns>Is the text in the TextBox valid?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Validator.ValidateTBNoEmails(System.Web.UI.WebControls.TextBox@,System.Web.UI.WebControls.CustomValidator@,System.String,System.String,System.Web.UI.WebControls.ServerValidateEventArgs@,System.Boolean,System.Int32,System.Int32)">
 <summary>
 Validates the value provided in a TextBox.
 </summary>
 <param name="txtControl">The TextBox control to validate.</param>
 <param name="cv">The CustomValidator object to show error messages in.</param>
 <param name="sNoValueProvidedErrorText">The CustomValidator.Text value to display when a value is not provided for the TextBox, but is required.</param>
 <param name="sErrorMessage">The CustomValidator.ErrorMessage value to display. An empty string places sErrorText in its place.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="bEmptyIsValid">Is an empty text value valid?</param>
 <param name="nMinCharacters">The minimum number of characters the user must provide.</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <returns>Is the text in the TextBox valid?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Validator.ValidateNumericTB(System.Web.UI.WebControls.TextBox@,System.Web.UI.WebControls.CustomValidator@,System.String,System.String,System.String,System.Web.UI.WebControls.ServerValidateEventArgs@,System.Boolean,System.Int32,System.Int32,System.Int32,System.String)">
 <summary>
 Validates the value provided in a TextBox.
 </summary>
 <param name="txtControl">The TextBox control to validate.</param>
 <param name="cv">The CustomValidator object to show error messages in.</param>
 <param name="sNoValueProvidedErrorText">The CustomValidator.Text value to display when a value is not provided for the TextBox, but is required.</param>
 <param name="sNotNumericErrorText">The CustomValidator.Text value to display when the value provided is not numeric.</param>
 <param name="sErrorMessage">The CustomValidator.ErrorMessage value to display. An empty string places sErrorText in its place.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="bEmptyIsValid">Is an empty text value valid?</param>
 <param name="nMinCharacters">The minimum number of characters the user must provide.</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <param name="nExactLength">The number must be a specific number of digits in length.</param>
 <param name="sNotExactLengthErrorText">The CustomValidator.Text value to display when a value does not match the exact length provided in nExactLength. Only relevant when nExactLength > 0.</param>
 <returns>Is the text in the TextBox valid?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Validator.ValidateTextBoxLength(System.Web.UI.WebControls.TextBox@,System.Int32,System.Web.UI.WebControls.CustomValidator@,System.Web.UI.WebControls.ServerValidateEventArgs@,System.Int32)">
 <summary>
 Old TextBox validator that has since been deprecated by ValidateTextbox. Please use ValidateTextbox going forward.
 </summary>
 <param name="txtControl"></param>
 <param name="nMaxLength"></param>
 <param name="cv"></param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Validator.ValidateSSN(System.Web.UI.WebControls.TextBox,System.Web.UI.WebControls.TextBox,System.Web.UI.WebControls.TextBox,System.Web.UI.WebControls.CustomValidator,System.Boolean,System.Web.UI.WebControls.ServerValidateEventArgs@,System.Int32)">
 <summary>
 Validates the input for SSNs.
 </summary>
 <param name="txtSSN1">The first 3-digit section of the SSN.</param>
 <param name="txtSSN2">The second 2-digit section of the SSN.</param>
 <param name="txtSSN3">The third 4-digit section of the SSN.</param>
 <param name="cv">Handles the error message for the validation check.</param>
 <param name="bEmptyIsValid">Can the SSN be empty?</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <returns>True(1) if valid, False(0) if false.</returns>
 <remarks>Example: Args.nIsValid = ValidateSSN(txtSSN1,txtSSN2,txtSSN3, cvSSN)</remarks>
</member>
<member name="M:WhitTools.Validator.ValidateSSN(System.String,System.Web.UI.WebControls.CustomValidator@,System.Web.UI.WebControls.ServerValidateEventArgs@,System.String,System.Boolean,System.Int32,System.Boolean)">
 <summary>
 Validates if a SSN passes the formatting requirements.
 </summary>
 <param name="sSSN">The SSN to check.</param>
 <param name="cv">Handles the validation errors.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="sErrorMessage">The CustomValidator.ErrorMessage value to assign.</param>
 <param name="bEmptyIsValid">Can the SSN be empty?</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <param name="bFullSSN">Does the SSN need to be a full 9 digits? If false, then only 4 digits.</param>
 <returns>True(1) if the SSN will format correctly, False(0) if not.</returns>
 <remarks>
 Example: Args.nIsValid = ValidateSSN("989-55-9055", cvSSN)
 Example: Args.nIsValid = ValidateSSN("98955-9055", cvSSN)
 Example: Args.nIsValid = ValidateSSN("989559055", cvSSN)
 </remarks>
</member>
<member name="M:WhitTools.Validator.ValidatePhone(System.Web.UI.WebControls.TextBox,System.Web.UI.WebControls.TextBox,System.Web.UI.WebControls.TextBox,System.Web.UI.WebControls.CustomValidator,System.String,System.Web.UI.WebControls.ServerValidateEventArgs@,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Validates a phone number. Area code digits in txtAreaCode, first 3 in txtPhone1, second 4 in txtPhone2.
 </summary>
 <param name="txtAreaCode">Area code digits.</param>
 <param name="txtPhone1">First 3 digits of phone number.</param>
 <param name="txtPhone2">Last 4 digits of phone number.</param>
 <param name="cv">Handles the validation error message.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="bRequireExtension">Minimum requirement is an extension number? If true, then bEmptyIsValid should be set to true.</param>
 <param name="bEmptyIsValid">Can the TextBoxes be empty and still be valid?</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <returns>True(1) if valid, False(0) if not.</returns>
 <remarks>
 Example: Args.nIsValid = ValidatePhone(txtAreaCode, txtPhone1, txtPhone2, cvPhone)
 Example: Args.nIsValid = ValidatePhone(txtAreaCode, txtPhone1, txtPhone2, cvPhone, True, True)
 Example: Args.nIsValid = ValidatePhone(txtAreaCode, txtPhone1, txtPhone2, cvPhone, True, False)
 Equivalent: Using bEmptyIsValid=True is equivalent to TomsLibrary.Utilities.ValidatePhone2()
 </remarks>
</member>
<member name="M:WhitTools.Validator.ValidatePhone(System.String,System.Web.UI.WebControls.CustomValidator,System.String,System.Web.UI.WebControls.ServerValidateEventArgs@,System.Boolean,System.Int32)">
 <summary>
 Validates a phone number.
 </summary>
 <param name="sPhone">The phone number to check.</param>
 <param name="cv">Handles the validation error message.</param>
 <param name="sErrorMessage">Overrides the cv.ErrorMessage value when assigned.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="bEmptyIsValid">Is an empty value valid?</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <returns>True if valid, False if not.</returns>
 <remarks>
 Example: Args.nIsValid = ValidatePhone(sPhoneNumber, cvPhone)
 </remarks>
</member>
<member name="M:WhitTools.Validator.ValidatePhoneExt(System.String,System.Web.UI.WebControls.CustomValidator,System.String,System.Web.UI.WebControls.ServerValidateEventArgs@,System.Boolean,System.Int32)">
 <summary>
 Validates a phone number extension.
 </summary>
 <param name="sPhoneExt">The phone number extension to check.</param>
 <param name="cv">Handles the validation error message.</param>
 <param name="sErrorMessage">Overrides the cv.ErrorMessage value when assigned.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="bEmptyIsValid">Is an empty value valid?</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <returns>True if valid, False if not.</returns>
 <remarks>
 Example: Args.nIsValid = ValidatePhone(sPhoneNumber, cvPhone)
 </remarks>
</member>
<member name="M:WhitTools.Validator.ValidateGLAccount(System.Web.UI.WebControls.TextBox,System.Web.UI.WebControls.TextBox,System.Web.UI.WebControls.TextBox,System.Web.UI.WebControls.TextBox,System.Web.UI.WebControls.CustomValidator@,System.String,System.Web.UI.WebControls.ServerValidateEventArgs@,System.Boolean,System.Int32)">
 <summary>
 Validates GL numbers to make sure they fit the proper format and are fully entered.
 </summary>
 <param name="txtAccount1">The first 2 digits of the account number.</param>
 <param name="txtAccount2">Digits 3 through 6 of the account number.</param>
 <param name="txtAccount3">Digits 7 through 11 of the account number.</param>
 <param name="txtAccount4">Digit 12 of the account number.</param>
 <param name="cv">Handles the validation error message.</param>
 <param name="sErrorMessage">A custom error message to display on the custom validator.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <returns>True(1) if valid, False(0) if not.</returns>
 <remarks>Example: args.nIsValid = ValidateGLAccount(txtGL1, txtGL2, txtGL3, txtGL4, cvGL)</remarks>
</member>
<member name="M:WhitTools.Validator.ValidateGLAccount(System.String,System.Web.UI.WebControls.CustomValidator@,System.String,System.Web.UI.WebControls.ServerValidateEventArgs@,System.Boolean,System.Int32)">
 <summary>
 Validates a GL account number.
 </summary>
 <param name="sGLAccountNumber">The account number to validate.</param>
 <param name="cv">The CustomValidator to display error messages in.</param>
 <param name="sErrorMessage">The CustomValidator.ErrorMessage value to set.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <returns>Is the account number valid?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Validator.ValidateDate(System.Web.UI.WebControls.DropDownList,System.Web.UI.WebControls.DropDownList,System.Web.UI.WebControls.DropDownList,System.Web.UI.WebControls.CustomValidator@,System.Boolean,System.String,System.Web.UI.WebControls.ServerValidateEventArgs@,System.DateTime,System.DateTime,System.Boolean,System.Int32)">
 <summary>
 Validates that the day, month and year selected is a real date (not February 31st, for instance). It will fill in the error message.
 </summary>
 <param name="ddlMonth">The month to check.</param>
 <param name="ddlDay">The day to check. Default: Null</param>
 <param name="ddlYear">The year to check. Default: Null</param>
 <param name="cv">Handles the validation error message. Default: Null</param>
 <param name="bEmptyIsValid">No selection at all is a valid choice. Setting this to true is the equivalent of ValidateDate2 in TomsLibrary.</param>
 <param name="sErrorMessage">The CustomValidator.ErrorMessage value to assign.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <returns>True(1) if valid, False(0) if not.</returns>
 <remarks>
 Example: Args.nIsValid = ValidateDate(ddlMonth, ddlDay, ddlYear, cvDate1)
 Example: Args.nIsValid = ValidateDate(ddlMonth, ddlDay, ddlYear, cvDate1, True)
 </remarks>
</member>
<member name="M:WhitTools.Validator.ValidateDate(System.String@,System.Web.UI.WebControls.CustomValidator@,System.String,System.Web.UI.WebControls.ServerValidateEventArgs@,System.Boolean,System.Int32)">
 <summary>
 Validates a datetime string.
 </summary>
 <param name="sDate">The date to validate.</param>
 <param name="cv">The CustomValidator object to display error messages in.</param>
 <param name="sErrorMessage">The CustomValidator.ErrorMessage text to display.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="bEmptyIsValid">Is a blank selection valid?</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <returns>Is the date valid?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Validator.ValidateDate(System.Web.UI.WebControls.TextBox@,System.Web.UI.WebControls.CustomValidator@,System.String,System.Web.UI.WebControls.ServerValidateEventArgs@,System.Boolean,System.Int32)">
 <summary>
 Validates a datetime string from a TextBox.
 </summary>
 <param name="txtDate">The date to validate.</param>
 <param name="cv">The CustomValidator object to display error messages in.</param>
 <param name="sErrorMessage">The CustomValidator.ErrorMessage text to display.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="bEmptyIsValid">Is a blank selection valid?</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <returns>Is the date valid?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Validator.ValidateDateTime(System.Web.UI.WebControls.DropDownList,System.Web.UI.WebControls.DropDownList,System.Web.UI.WebControls.DropDownList,System.Web.UI.WebControls.DropDownList,System.Web.UI.WebControls.CustomValidator@,System.Boolean,System.String,System.Web.UI.WebControls.ServerValidateEventArgs@,System.Int32)">
 <summary>
 Validates that the day, month and year selected is a real date (not February 31st, for instance). It will fill in the error message.
 </summary>
 <param name="ddlMonth">The month to check.</param>
 <param name="ddlDay">The month to check.</param>
 <param name="ddlYear">The year to check.</param>
 <param name="ddlTime">The time to check.</param>
 <param name="cv">Handles the validation error message.</param>
 <param name="bEmptyIsValid">No selection at all is a valid choice.</param>
 <param name="sErrorMessage">The CustomValidator.ErrorMessage value to assign.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <returns>True(1) if valid, False(0) if not.</returns>
 <remarks>
 Example: Args.nIsValid = ValidateDate(ddlMonth, ddlDay, ddlYear, ddlTime, cvDate1)
 Example: Args.nIsValid = ValidateDate(ddlMonth, ddlDay, ddlYear, ddlTime, cvDate1, True)
 </remarks>
</member>
<member name="M:WhitTools.Validator.ValidateDateTime(System.Web.UI.WebControls.DropDownList,System.Web.UI.WebControls.DropDownList,System.Web.UI.WebControls.DropDownList,System.Web.UI.WebControls.DropDownList,System.Web.UI.WebControls.DropDownList,System.Web.UI.WebControls.DropDownList,System.Web.UI.WebControls.CustomValidator@,System.Boolean,System.String,System.Web.UI.WebControls.ServerValidateEventArgs@,System.Int32)">
 <summary>
 Validates that the day, month and year selected is a real date (not February 31st, for instance). It will fill in the error message.
 </summary>
 <param name="ddlMonth">The month to check.</param>
 <param name="ddlDay">The month to check.</param>
 <param name="ddlYear">The year to check.</param>
 <param name="ddlHour">The hour to check.</param>
 <param name="ddlMinute">The minute to check.</param>
 <param name="ddlAmPm">The am/pm setting to check.</param>
 <param name="cv">Handles the validation error message.</param>
 <param name="bEmptyIsValid">No selection at all is a valid choice.</param>
 <param name="sErrorMessage">The CustomValidator.ErrorMessage value to assign.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <returns>True(1) if valid, False(0) if not.</returns>
 <remarks>
 Example: Args.nIsValid = ValidateDate(ddlMonth, ddlDay, ddlYear, ddlHour, ddlMinute, ddlAmPm, cvDate1)
 Example: Args.nIsValid = ValidateDate(ddlMonth, ddlDay, ddlYear, ddlHour, ddlMinute, ddlAmPm, cvDate1, True)
 </remarks>
</member>
<member name="M:WhitTools.Validator.ValidateEmail(System.String,System.Web.UI.WebControls.CustomValidator@,System.String,System.Web.UI.WebControls.ServerValidateEventArgs@,System.Boolean,System.Int32)">
 <summary>
 Validates that a single email address is formatted correctly.
 </summary>
 <param name="sAddress">The email address to check.</param>
 <param name="cv">The CustomValidator to place the error message in.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="sErrorMessage">The short error message to display.</param>
 <param name="bEmptyIsValid">Is an empty email address valid?</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <returns>Is the email address valid?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Validator.ValidateEmailIncludeBlacklist(System.String,System.Web.UI.WebControls.CustomValidator@,System.String,System.Web.UI.WebControls.ServerValidateEventArgs@,System.String,System.Boolean,System.Int32)">
 <summary>
 Validates that a single email address is formatted correctly.
 </summary>
 <param name="sAddress">The email address to check.</param>
 <param name="cv">The CustomValidator to place the error message in.</param>
 <param name="sErrorMessage">The short error message to display.</param>
 <param name="sBlacklistErrorMessage">The error text to display when the email address is blacklisted.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="bEmptyIsValid">Is an empty email address valid?</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <returns>Is the email address valid?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Validator.ValidateIsChecked(System.Int32,System.Int32)">
 <summary>
 Validates if an integer from a control is checked by comparing if it is above the unchecked integer value.
 </summary>
 <param name="nChecked">The value to check.</param>
 <param name="nMaxUnchecked">The maximum number of unchecked values.</param>
 <returns>Is the integer value checked?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Validator.StudentIDExists(System.String)">
 <summary>
 Checks if the ID exists in the database.
 </summary>
 <param name="sPLID">The PLID to check.</param>
 <returns>Does the ID exist?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Validator.ValidateCheckboxList(System.Web.UI.WebControls.CheckBoxList@,System.Web.UI.WebControls.CustomValidator@,System.String,System.Web.UI.WebControls.ServerValidateEventArgs@,System.Int32,System.Int32)">
 <summary>
 Validates whether or not a CheckBoxList has had a given number of items selected.
 </summary>
 <param name="cblControl">The control to check for enough selected items.</param>
 <param name="cv">Handles the validation error message.</param>
 <param name="sErrorMessage">The CustomValidator.ErrorMessage value to assign.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="nRequiredSelections">The number of items that must be selected.</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <returns>Are enough items selected?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Validator.ValidateListControl(System.Object@,System.Web.UI.WebControls.CustomValidator@,System.String,System.Web.UI.WebControls.ServerValidateEventArgs@,System.Int32,System.Int32,System.Int32)">
 <summary>
 Validates whether or not a list control has had a given number of items selected.
 </summary>
 <param name="ListControl">The control to check for enough selected items.</param>
 <param name="cv">Handles the validation error message.</param>
 <param name="sErrorMessage">The CustomValidator.ErrorMessage value to assign.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <returns>Are enough items selected?</returns>
 <remarks></remarks>
 
</member>
<member name="M:WhitTools.Validator.ValidateRepeaterSelection(System.Web.UI.WebControls.Repeater@,System.Web.UI.WebControls.CustomValidator@,System.String,System.Int32,System.Int32,System.Web.UI.WebControls.ServerValidateEventArgs@,System.Int32)">
 <summary>
 This method is used to validate the selection of repeater items when used as part of a form selection.
 Currently this will validate repeaters which contain checkboxes and/or radiobuttons.  
 </summary>
 <param name="rpt">The repeater in to be validated.</param>
 <param name="cv">The custom validator which will be assigned an error message if validation fails.</param>
 <param name="sTargetControl">An optional target control to use as the determinant of whether or not the repeater
 item has been selected. If a target control is not passed, then regardless of the number of eligible controls in the repeater 
 item, if at least one is selected, that item will be validated.</param>
 <param name="nRequiredSelection">The number of repeater items required to be selected.</param>
 <param name="nIncludeSubrepeaters">This parameter determines whether or not child controls of a repeater item
 which are also repeaters will be validated using the same nRequiredSelection value as the parent.
 Note:  If a target control is specified, this same control ID will be used for all repeaters, including children.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Validator.ValidatePLIDExists(System.String,System.Boolean)">
 <summary>
 Returns whether the PLID exists in the database.
 </summary>
 <param name="plid">The PLID to check.</param>
 <param name="blankReturnValue">The boolean value to return if the PLID is blank.</param>
 <returns>Does the PLID exist in the database?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Validator.ValidateStudentIDExists(System.String)">
 <summary>
 Returns whether the StudentID# exists in the database.
 </summary>
 <param name="sStudentID">The StudentID# to check.</param>
 <returns>Does the StudentID# exist in the database?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Validator.ValidateUsernameExists(System.String)">
 <summary>
 Returns whether the username exists in the database.
 </summary>
 <param name="sUsername">The username to check.</param>
 <returns>Does the username exist in the database?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Validator.ValidateStudentID(System.String,System.Web.UI.WebControls.CustomValidator@,System.String,System.Web.UI.WebControls.ServerValidateEventArgs@,System.Boolean,System.Int32)">
 <summary>
 Validates a student id number.
 </summary>
 <param name="sStudentID">The student id number to validate.</param>
 <param name="cv">The CustomValidator object to pass error messages to.</param>
 <param name="sErrorMessage">The custom error message to assign to the CustomValidator.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <returns>Is the student id valid?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Validator.ValidateWhitworthID(System.String,System.Web.UI.WebControls.CustomValidator@,System.Web.UI.WebControls.ServerValidateEventArgs@,System.String,System.Int32,System.Boolean)">
 <summary>
 Validates a Whitworth id number.
 </summary>
 <param name="sWhitworthID">The Whitworth PLID number to validate.</param>
 <param name="cv">The CustomValidator object to pass error messages to.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="sErrorMessage">The custom error message to assign to the CustomValidator.</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <returns>Is the student id valid?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Validator.ValidateWhitworthID(System.Web.UI.WebControls.TextBox,System.Web.UI.WebControls.CustomValidator@,System.Web.UI.WebControls.ServerValidateEventArgs@,System.String,System.Int32,System.Boolean)">
 <summary>
 Validates a Whitworth id number.
 </summary>
 <param name="txtWhitworthID">The Whitworth PLID number to validate.</param>
 <param name="cv">The CustomValidator object to pass error messages to.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="sErrorMessage">The custom error message to assign to the CustomValidator.</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <returns>Is the student id valid?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Validator.ValidateStudentID(System.Web.UI.WebControls.TextBox,System.Web.UI.WebControls.CustomValidator@,System.String,System.Web.UI.WebControls.ServerValidateEventArgs@,System.Int32,System.Boolean)">
 <summary>
 Validates a student id number.
 </summary>
 <param name="txtStudentID">The student id number to validate.</param>
 <param name="cv">The CustomValidator object to pass error messages to.</param>
 <param name="sErrorMessage">The custom error message to assign to the CustomValidator.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <returns>Is the student id valid?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Validator.ValidatePLID(System.String,System.Web.UI.WebControls.CustomValidator@,System.String,System.Web.UI.WebControls.ServerValidateEventArgs@,System.Int32)">
 <summary>
 Validates a PLID.
 </summary>
 <param name="sPLID">The PLID to validate.</param>
 <param name="cv">The CustomValidator object to pass error messages to.</param>
 <param name="sErrorMessage">The custom error message to assign to the CustomValidator.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <returns>Is the PLID valid?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Validator.ValidatePLID(System.Web.UI.WebControls.TextBox,System.Web.UI.WebControls.CustomValidator@,System.String,System.Web.UI.WebControls.ServerValidateEventArgs@,System.Int32)">
 <summary>
 Validates a PLID.
 </summary>
 <param name="txtPLID">The PLID to validate.</param>
 <param name="cv">The CustomValidator object to pass error messages to.</param>
 <param name="sErrorMessage">The custom error message to assign to the CustomValidator.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <returns>Is the PLID valid?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Validator.ValidateDDL(System.Web.UI.WebControls.DropDownList,System.Web.UI.WebControls.CustomValidator@,System.String,System.String,System.Web.UI.WebControls.ServerValidateEventArgs@,System.Boolean,System.Int32)">
 <summary>
 Checks if a dropdownlist matches invalid GlobalEnum values: S_EMPTY_VALUE, N_NOT_SELECTED, S_NOT_SELECTED
 </summary>
 <param name="ddlControl">The control to validate.</param>
 <param name="cv">The CustomValidator to display error messages with.</param>
 <param name="sText">The CustomValidator.Text value to assign.</param>
 <param name="sErrorMessage">The CustomValidator.ErrorMessage value to assign.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="bEmptyIsValid">Is an empty selection valid?</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <returns>Is the dropdownlist valid?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Validator.ValidateState(System.Web.UI.WebControls.DropDownList,System.Web.UI.WebControls.CustomValidator@,System.String,System.Web.UI.WebControls.ServerValidateEventArgs@,System.Boolean,System.Int32)">
 <summary>
 Validates a dropdownlist filled with states.
 </summary>
 <param name="ddlState">The control to validate.</param>
 <param name="cv">The CustomValidator to display error messages with.</param>
 <param name="sErrorMessage">The CustomValidator.ErrorMessage value to assign.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="bEmptyIsValid">Is an empty selection valid?</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Validator.ValidateRBL(System.Web.UI.WebControls.RadioButtonList,System.Web.UI.WebControls.CustomValidator@,System.String,System.String,System.Web.UI.WebControls.ServerValidateEventArgs@,System.Boolean,System.Int32)">
 <summary>
 Checks if a radiobuttonlist is checked and matches invalid GlobalEnum values: S_EMPTY_VALUE, N_NOT_SELECTED, S_NOT_SELECTED
 </summary>
 <param name="rblControl">The control to validate.</param>
 <param name="cv">The CustomValidator to display error messages with.</param>
 <param name="sText">The CustomValidator.Text value to assign.</param>
 <param name="sErrorMessage">The CustomValidator.ErrorMessage value to assign.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call.</param>
 <param name="bEmptyIsValid">Is an empty selection valid?</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <returns>Is the radiobuttonlist valid?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Validator.IsValidator(System.Object@)">
 <summary>
 Checks if the provided object is a validator control.
 </summary>
 <param name="oControl">The control to check.</param>
 <returns>Is the object a validator control? 1 = Yes, 0 = No</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Validator.SetValid(System.Web.UI.WebControls.CustomValidator@,System.Web.UI.WebControls.ServerValidateEventArgs@,System.String,System.String,System.Boolean,System.Int32,System.Boolean)">
 <summary>
 Shortens the code to set a CustomValidator and ServerValidateEventArgs valid state.
 </summary>
 <param name="cv">The CustomValidator object to set values for.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call. Only changes args.IsValid if bIsValid is False.</param>
 <param name="sErrorMessage">The cv.ErrorMessage value to assign. The shorter version of the error display.</param>
 <param name="sErrorText">The cv.Text value to assign. The longer version of the error display.</param>
 <param name="bIsValid">Is the ServerValidateEventArgs object valid?</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <param name="bAddLink">Should the cv.ErrorMessage text be a link to the error on the page?</param>
 <returns>Returns the bIsValid parameter value.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Validator.SetInvalid(System.Web.UI.WebControls.CustomValidator@,System.Web.UI.WebControls.ServerValidateEventArgs@,System.String,System.String,System.Boolean,System.Int32)">
 <summary>
 Shortens the code to set a CustomValidator and ServerValidateEventArgs valid state.
 </summary>
 <param name="cv">The CustomValidator object to set values for.</param>
 <param name="args">The ServerValidateEventArgs object associated with this function call. Only changes args.IsValid if bIsValid is False.</param>
 <param name="sErrorMessage">The cv.ErrorMessage value to assign. The shorter version of the error display.</param>
 <param name="sErrorText">The cv.Text value to assign. The longer version of the error display.</param>
 <param name="bIsValid">Is the ServerValidateEventArgs object valid?</param>
 <param name="nDisplayType">The method to display the error messages. 0 = Global Default Setting, 1 = .Text is the always the same as .ErrorMessage, 2 = .Text is different from .ErrorMessage if provided</param>
 <returns>Returns the bIsValid parameter value.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Validator.SetPageMustBeValid(System.Boolean)">
 <summary>
 Sets the SESSION_PAGE_MUST_BE_VALID session variable, which determines if a page should be completely validated
 or if it can be saved with empty values in the controls that are set to require values. Must be set on each 
 individual page it is meant to be used on.
 </summary>
 <param name="bPageMustBeValid">Does the page need to be completely valid?</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Validator.GetPageMustBeValid(System.Boolean)">
 <summary>
 Checks if the page needs to be completely validated. If SetPageMustBeValid() is false, then this will
 always return true so the page can be saved in its current state without being completely filled out.
 Otherwise the provided bEmptyIsValid value will be returned.
 </summary>
 <param name="bEmptyIsValid">The bEmptyIsValid value to return if the page needs to be completely validated.</param>
 <returns>If the page needs to be completely validated, then the bEmptyIsValid parameter is returned, otherwise returns true.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Variables.UpdateVariable(System.String,System.String,System.DateTime)">
 <summary>
 Updates the value of a variable. If the InvoiceVariable does not exist yet, it is inserted.
 </summary>
 <param name="sKey">The variable to update (or insert if it does not exists). Key must be unique, otherwise other applications that use the key will be messed up. Suggested naming convention: ApplicationName_VariableName</param>
 <param name="sValue">The value to assign to the variable.</param>
 <param name="dateExpires">The date the variable expires. Defaults to "Does not expire".</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Variables.InsertNewVariable(System.String,System.String,System.DateTime)">
 <summary>
 Inserts a new variable into the database. If the InvoiceVariable already exists then it is updated.
 </summary>
 <param name="sKey">The variable to update (or update if it already exists). Key must be unique, otherwise other applications that use the key will be messed up. Suggested naming convention: ApplicationName_VariableName</param>
 <param name="sValue">The value to assign to the variable.</param>
 <param name="dateExpires">The date the variable expires. Defaults to "Does not expire".</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Variables.VariableExists(System.String)">
 <summary>
 Returns whether or not a variable with the provided key exists in the database.
 </summary>
 <param name="sKey">The unique name of the variable to check if it exists.</param>
 <returns>Does a variable with the provided unique key exist?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Variables.GetVariableValue(System.String)">
 <summary>
 Retrieves the value of a variable. Returns S_NOT_FOUND global enum value if the InvoiceVariable does not exist in the database.
 </summary>
 <param name="sKey">The variable key to retrieve a value for.</param>
 <returns>The value of the variable requested.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Variables.GetVariableValueInt(System.String)">
 <summary>
 Retrieves the value of a variable. Returns N_NOT_FOUND (-14) global enum value if the InvoiceVariable does not exist in the database.
 </summary>
 <param name="sKey">The variable key to retrieve a value for.</param>
 <returns>The value of the variable requested.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Variables.GetVariableValueDec(System.String)">
 <summary>
 Retrieves the value of a variable. Returns N_NOT_FOUND (-14) global enum value if the InvoiceVariable does not exist in the database.
 </summary>
 <param name="sKey">The variable key to retrieve a value for.</param>
 <returns>The value of the variable requested.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Variables.GetVariableValueDate(System.String)">
 <summary>
 Retrieves the value of a variable. Returns S_NULL_DATE global enum value if the InvoiceVariable does not exist in the database.
 </summary>
 <param name="sKey">The variable key to retrieve a value for.</param>
 <returns>The value of the variable requested.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Variables.GetVariableValueBool(System.String,System.Boolean)">
 <summary>
 Retrieves the value of a variable. Returns bValueToReturnOnError if the InvoiceVariable does not exist in the database.
 </summary>
 <param name="sKey">The variable key to retrieve a value for.</param>
 <param name="bValueToReturnOnError">The boolean value to return if an error occurs.</param>
 <returns>The boolean value of the variable requested.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Variables.UpdateVariableLongWay(System.String,System.String,System.DateTime)">
 <summary>
 Updates the value of a variable. If the InvoiceVariable does not exist yet, it is inserted.
 </summary>
 <param name="sKey">The variable to update (or insert if it does not exists). Key must be unique, otherwise other applications that use the key will be messed up. Suggested naming convention: ApplicationName_VariableName</param>
 <param name="sValue">The value to assign to the variable.</param>
 <param name="dateExpires">The date the variable expires. Defaults to "Does not expire".</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Variables.GetVariableExpirationDate(System.String)">
 <summary>
 Retrieves the expiration date of a variable. Returns S_NULL_DATE global enum value if the InvoiceVariable does not exist in the database.
 </summary>
 <param name="sKey">The variable key to retrieve the expiration date for.</param>
 <returns>The expiration date of the variable requested.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Variables.UpdateMainContact(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Updates a variable key with the PLID of the provided main contact. Accepts PLID/username/email. The InvoiceVariable key must already exist.
 </summary>
 <param name="sVariableKey">The variable key to update (must already exist).</param>
 <param name="sMainContact">The main contact person's information to update. Accepts PLID/username/email.</param>
 <param name="bAlertWhenSuccessful">If the main contact is updated successfully, should the user be notified via an alert message?</param>
 <param name="bAlertWhenUnsuccessful">If the main contact fails to update, should the user be notified via an alert message?</param>
 <param name="bRefreshPageWhenSuccessful">Should the page be refreshed when the update is successful? Defaults to True.</param>
 <param name="bRefreshPageWhenUnsuccessful">Should the page be refreshed when the update is unsuccessful? Defaults to False.</param>
 <returns>Was the update successful?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.VehicleRequest.InsertVehicleRequest(System.String,System.Int32,System.Int32,System.DateTime,System.DateTime,System.String,System.String,System.Int32,System.Data.DataTable,System.Data.DataTable)">
 <summary>
 Inserts a vehicle request with the provided values into the database.
 </summary>
 <param name="sDestination">The trip destination.</param>
 <param name="nExceed50Miles">Does the one-way trip exceed 50 miles from campus? 1=yes, 0=no</param>
 <param name="nOutsideUS">Is the destination outside the US? 1=yes, 0=no</param>
 <param name="dateDeparture">The date/time the vehicle will be checked out.</param>
 <param name="dateReturn">The date/time the vehicle will be returned.</param>
 <param name="sRequestedBy">The username of the person making the request.</param>
 <param name="sGL">The department GL account number to charge.</param>
 <param name="nDepID">The id of the department making the request.</param>
 <param name="dtRequestedVehicleIDs">A DataTable containing a column called 'ID' that relates to the vehicle's ID# in the Web3.Facilities.dbo.Vehicles DataTable.</param>
 <param name="dtCertifiedDriverIDs">A DataTable containing a column called 'ID' that relates to a certified driver's ID# in the Web3.Facilities.dbo.CertifiedDrivers DataTable.</param>
 <returns>Was the vehicle request successful?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.VehicleRequest.InsertLocalVehicleRequest(System.String,System.DateTime,System.DateTime,System.String,System.String,System.Int32,System.Int32,System.Int32)">
 <summary>
 Inserts a vehicle request with the provided values into the database.
 </summary>
 <param name="sDestination">The trip destination.</param>
 <param name="dateDeparture">The date/time the vehicle will be checked out.</param>
 <param name="dateReturn">The date/time the vehicle will be returned.</param>
 <param name="sRequestedBy">The username of the person making the request.</param>
 <param name="sGL">The department GL account number to charge.</param>
 <param name="nDepID">The id of the department making the request.</param>
 <param name="nVehicleID">The vehicle to request.</param>
 <param name="nCertifiedDriverID">The certified driver to assign to the request. If 0, then TBD driver.</param>
 <returns>Was the vehicle request successful?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.VehicleRequest.SendDepartmentApproveRequest(System.Int32)">
 <summary>
 Sends a request to the department contact requesting they approve the vehicle request.
 </summary>
 <param name="nVehicleRequestID">The id of the request to approve.</param>
 <returns>Was the email successfully sent?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.VehicleRequest.SendDepartmentDeniedNotice(System.Int32)">
 <summary>
 Sends a notice email to the requester telling them their vehicle request was denied.
 </summary>
 <param name="nVehicleRequestID">The id of the request to approve.</param>
 <returns>Was the email successfully sent?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.VehicleRequest.SendFacilitiesApproveRequest(System.Int32,System.Int32)">
 <summary>
 Sends a request to facilities services requesting they approve the vehicle request.
 </summary>
 <param name="nVehicleRequestID">The id of the request to approve.</param>
 <param name="nEmailTemplate">The email template to send. 0 = Normal request, 1 = Department chair made the request.</param>
 <returns>Was the email successfully sent?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.VehicleRequest.SendFacilitiesCancelNotice(System.Int32)">
 <summary>
 Sends a notice to a requestor notifying them facilities services has cancelled their vehicle request.
 </summary>
 <param name="nVehicleRequestID">The id of the request to cancel.</param>
 <returns>Was the email successfully sent?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.VehicleRequest.SendFacilitiesApproveNotice(System.Int32)">
 <summary>
 Sends a notice to a requestor notifying them facilities services has approved their vehicle request.
 </summary>
 <param name="nVehicleRequestID">The id of the request to cancel.</param>
 <returns>Was the email successfully sent?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.VehicleRequest.SendVPApproveRequest(System.Int32)">
 <summary>
 Sends a request to a VP requesting they approve the vehicle request.
 </summary>
 <param name="nVehicleRequestID">The id of the request to approve.</param>
 <returns>Was the email successfully sent?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.VehicleRequest.FillVehicles(System.Web.UI.WebControls.DropDownList@,System.Web.UI.WebControls.Repeater@,System.DateTime,System.DateTime,System.Int32,System.String)">
 <summary>
 Fills a dropdownlist with vehicles available for the provided departure/return dates. Excludes vehicles already present in the provided repeater object.
 </summary>
 <param name="ddlVehicles">The control to fill.</param>
 <param name="rptRequestedVehicles">The repeater to check for already selected vehicles.</param>
 <param name="dateDeparture">The departure date to check for available vehicles on.</param>
 <param name="dateReturn">The return date to check for available vehicles on.</param>
 <param name="nVehicleRequestId">The vehicle request id to exclude requests from, to allow for re-requesting a vehicle in the same vehicle request.</param>
 <param name="sDepID">Include vehicles reserved for this department in the available vehicles list.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.VehicleRequest.FillVehicles(System.Web.UI.WebControls.DropDownList@,System.DateTime,System.DateTime,System.String,System.String)">
 <summary>
 Fills a dropdownlist with vehicles available for the provided departure/return dates.
 </summary>
 <param name="ddlVehicles">The control to fill.</param>
 <param name="dateDeparture">The departure date to check for available vehicles on.</param>
 <param name="dateReturn">The return date to check for available vehicles on.</param>
 <param name="sDepID">Include vehicles reserved for this department in the available vehicles list.</param>
 <param name="sExcludeVehicleRequestID">The vehicle request id to exclude from the filter, meaning these vehicles will show up in the list.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.VehicleRequest.FillDrivers(System.Web.UI.WebControls.ListBox@,System.Boolean)">
 <summary>
 Fills a listbox with certified drivers.
 </summary>
 <param name="lsbDrivers">The listbox to fill.</param>
 <param name="bIncludeTBD">Include a 'To Be Determined' option for the driver?</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.VehicleRequest.GetDepartmentApprover(System.Int32)">
 <summary>
 Gets the PLID of the person assigned to approve vehicle requests for the given department. 
 Defaults to the department chair if there is no assigned user.
 </summary>
 <param name="nDepID">The department to get the approver for.</param>
 <returns>The PLID of the department approver.</returns>
 <remarks>Only one PLID number is stored for each vehicle request, so only one is returned.</remarks>
</member>
<member name="M:WhitTools.VehicleRequest.VehicleRequestIsValid(System.String,System.Int32,System.Int32,System.DateTime,System.DateTime,System.String,System.String,System.Int32,System.Data.DataTable,System.Data.DataTable)">
 <summary>
 Checks the provided DataTables for valid vehicle requests.
 </summary>
 <returns>Is the vehicle request valid?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.VehicleRequest.VehicleLocalRequestIsValid(System.String,System.DateTime,System.DateTime,System.String,System.String,System.Int32,System.Int32,System.Int32)">
 <summary>
 Checks the provided DataTables for valid vehicle requests.
 </summary>
 <returns>Is the vehicle request valid?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.VehicleRequest.ConvertVehicleType(System.Int32)">
 <summary>
 Converts a vehicle type integer to its string format.
 </summary>
 <param name="nType">The vehicle type to convert.</param>
 <returns>The string form of a vehicle type.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.VehicleRequest.GetVehicleRequestFirstVehicle(System.Int32)">
 <summary>
 
 </summary>
 <param name="nVehicleRequestID"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.VehicleRequest.GetVehicleRequestFirstVehicleID(System.Int32)">
 <summary>
 
 </summary>
 <param name="nVehicleRequestID"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.VehicleRequest.GetVehicleDescription(System.Int32)">
 <summary>
 
 </summary>
 <param name="nVehicleID"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Video.WriteVideo(System.String,System.String,System.Int32,System.Int32,System.Decimal,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean)">
 <summary>
 Provides an HTML5 video tag with the provided parameters assigned.
 </summary>
 <param name="sVideoFile">The path to the video file to play.</param>
 <param name="sID">The html tag id to assign. Defaults to a unique video id.</param>
 <param name="nWidth">The width of the video display.</param>
 <param name="nHeight">The height of the video display.</param>
 <param name="nVolume">The volume to start the video at (0 to 1.0). Defaults to 1.0.</param>
 <param name="bAutoPlay">Start the video as soon as it loads?</param>
 <param name="bStartsMuted">Should the video start as muted?</param>
 <param name="bLoops">Does the video loop?</param>
 <param name="sPreLoads">How does the video preload?</param>
 <param name="bShowStats">Show the video's information to web team members?</param>
 <returns>The HTML5 code for rendering a video on the page.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Video.ResizeVideo(System.String,System.Int32,System.Int32)">
 <summary>
 Resizes an HTML5 video tag.
 </summary>
 <param name="sID">The HTML5 video tag id.</param>
 <param name="nNewWidth">The width of the video display.</param>
 <param name="nNewHeight">The height of the video display.</param>
 <returns>The JavaScript that was executed.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Video.ResizeVideo(System.Web.UI.WebControls.Label@,System.Int32,System.Int32)">
 <summary>
 Resizes an HTML5 video tag within a Label control.
 </summary>
 <param name="lblVideo">The Label control displaying the HTML5 video.</param>
 <param name="nNewWidth">The width of the video display.</param>
 <param name="nNewHeight">The height of the video display.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Video.PlayVideo(System.String)">
 <summary>
 Plays an HTML5 video tag.
 </summary>
 <param name="sID">The HTML5 video tag id.</param>
 <returns>The JavaScript that was executed.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Video.PauseVideo(System.String)">
 <summary>
 Plays an HTML5 video tag.
 </summary>
 <param name="sID">The HTML5 video tag id.</param>
 <returns>The JavaScript that was executed.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Video.PlayPauseVideo(System.String)">
 <summary>
 Plays an HTML5 video tag.
 </summary>
 <param name="sID">The HTML5 video tag id.</param>
 <returns>The JavaScript that was executed.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Video.LoadVideo(System.String,System.String)">
 <summary>
 Plays an HTML5 video tag.
 </summary>
 <param name="sID">The HTML5 video tag id.</param>
 <param name="sVideoFile">The path to the video file to play.</param>
 <returns>The JavaScript that was executed.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Video.SetVideoMute(System.String,System.Boolean)">
 <summary>
 Plays an HTML5 video tag.
 </summary>
 <param name="sID">The HTML5 video tag id.</param>
 <param name="bMuted">Set the video as muted?</param>
 <returns>The JavaScript that was executed.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Video.SetVideoVolume(System.String,System.Decimal)">
 <summary>
 Sets the volume on an HTML5 video tag.
 </summary>
 <param name="sID">The HTML5 video tag id.</param>
 <param name="nVolume">The volume to set to the video (0.0 to 1.0).</param>
 <returns>The JavaScript that was executed.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Video.SetVideoPreload(System.String,System.String)">
 <summary>
 Sets the volume on an HTML5 video tag.
 </summary>
 <param name="sID">The HTML5 video tag id.</param>
 <param name="sPreload">The preload option to set to the video (auto, metadata, none).</param>
 <returns>The JavaScript that was executed.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Video.SetVideoHasControls(System.String,System.Boolean)">
 <summary>
 Handles an HTML5 video tag.
 </summary>
 <param name="sID">The HTML5 video tag id.</param>
 <param name="bHasControls">Set the video as controls?</param>
 <returns>The JavaScript that was executed.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Video.GetOnLoadedDataVideoJS(System.String,System.String,System.Boolean)">
 <summary>
 Refreshes a video to its status before the page was refreshed.
 </summary>
 <param name="sID">The HTML5 video tag id.</param>
 <param name="sExclude">The video element to exclude from updating.</param>
 <param name="bIncludeAssignment">Include code to assign the JavaScript to the onloadeddata variable?</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.IsWebTeamMember(System.String,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Checks if the user is a web team member.
 </summary>
 <param name="sWebTeam">The web team member's name/ID/email/username/type to retrieve. If no value is provided, the current logged-in username will be used. The full name must match what appears in DT_PEOPLE_LISTING. The type must be the string value of the type (i.e. "Developer", "Designer", "Admin" or "Administration", "Intern", "Student Employee")</param>
 <param name="bIncludeDevelopers">Include developers in the check?</param>
 <param name="bIncludeDesigners">Include designers in the check?</param>
 <param name="bIncludeAdministrators">Include administrators in the check?</param>
 <returns>Is the user a web team member?</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetLoggedInWebTeamMember(System.String,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Checks if a web team member is the currently logged-in user. If so, then their username is returned, otherwise the provided username is returned.
 </summary>
 <param name="sUsername">The username to return if the currently logged-in user is not a web team member.</param>
 <param name="bIncludeDevelopers">Include developers in the web team member list to check?</param>
 <param name="bIncludeDesigners">Include designers in the web team member list to check?</param>
 <param name="bIncludeAdministrators">Include administrators in the web team member list to check?</param>
 <returns>The currently logged-in web team member, otherwise returns the provided username.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetLoggedInWebTeamMemberID(System.Int32)">
 <summary>
 Checks if a web team member is the currently logged-in user. If so, then their web team ID is returned, otherwise the provided nNotFound parameter is returned.
 </summary>
 <param name="nNotFound">The value to return if a web team member is not currently logged-in. Defaults to N_NOT_FOUND (-14).</param>
 <returns>The currently logged-in web team member, otherwise returns the provided nNotFound parameter. Defaults to N_NOT_FOUND (-14)</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetWebTeamEmails(System.Boolean,System.Boolean,System.Boolean,System.String)">
 <summary>
 Gets a string containing the email addresses of all web team members of the selected parameters.
 </summary>
 <param name="bIncludeDevelopers">Include web team developers email addresses?</param>
 <param name="bIncludeDesigners">Include web team designers email addresses?</param>
 <param name="bIncludeAdministration">Include web team administration email addresses?</param>
 <param name="sDelimeter">The delimeter between email addresses.</param>
 <returns>A string containing the email addresses of web team members.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetWebTeamPersonalEmails(System.Boolean,System.Boolean,System.Boolean,System.String)">
 <summary>
 Gets a string containing the personal email addresses of all web team members of the selected parameters.
 </summary>
 <param name="bIncludeDevelopers">Include web team developers email addresses?</param>
 <param name="bIncludeDesigners">Include web team designers email addresses?</param>
 <param name="bIncludeAdministration">Include web team administration email addresses?</param>
 <param name="sDelimeter">The delimeter between email addresses.</param>
 <returns>A string containing the personal email addresses of web team members.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetWebTeamUsernames(System.Boolean,System.Boolean,System.Boolean,System.String)">
 <summary>
 Gets a string containing the usernames of all web team members of the selected parameters.
 </summary>
 <param name="bIncludeDevelopers">Include web team developers?</param>
 <param name="bIncludeDesigners">Include web team designers?</param>
 <param name="bIncludeAdministration">Include web team administration?</param>
 <param name="sDelimeter">The delimeter between usernames.</param>
 <returns>A string containing the usernames of web team members.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetWebTeamNames(System.Boolean,System.Boolean,System.Boolean,System.String)">
 <summary>
 Gets a string containing the names of all web team members of the selected parameters.
 </summary>
 <param name="bIncludeDevelopers">Include web team developers?</param>
 <param name="bIncludeDesigners">Include web team designers?</param>
 <param name="bIncludeAdministration">Include web team administration?</param>
 <param name="sDelimeter">The delimeter between names.</param>
 <returns>A string containing the names of web team members.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetWebTeamUsernamesDebug(System.String,System.Boolean,System.Boolean,System.Boolean,System.String)">
 <summary>
 Gets a string containing the usernames of all web team members of the selected parameters except for the provided username.
 </summary>
 <param name="sExcludedUsername">The username to exclude as an admin for the purpose of testing.</param>
 <param name="bIncludeDevelopers">Include web team developers?</param>
 <param name="bIncludeDesigners">Include web team designers?</param>
 <param name="bIncludeAdministration">Include web team administration?</param>
 <param name="sDelimeter">The delimeter between usernames.</param>
 <returns>A string containing the usernames of web team members.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetWebTeamInfo(System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Gets information about the selected web team members.
 </summary>
 <param name="bIncludeDevelopers">Include web team developers?</param>
 <param name="bIncludeDesigners">Include web team designers?</param>
 <param name="bIncludeAdministration">Include web team administration?</param>
 <returns>A DataTable with web team member information.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetWebTeamInfo(System.String,System.Boolean)">
 <summary>
 Gets information about the selected web team members.
 </summary>
 <param name="sWebTeam">The web team member's name/ID/email/username/type to retrieve. The full name must match what appears in DT_PEOPLE_LISTING. The type must be the string value of the type (i.e. "Developer", "Designer", "Admin" or "Administration", "Intern", "Student Employee")</param>
 <returns>A DataTable with web team member information.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.ConvertWebTeamMember(System.String,System.String)">
 <summary>
 Gets the name of the provided web team member that matches the parameter.
 </summary>
 <param name="sWebTeam">The web team member's name/ID/email/username/type to retrieve. The full name must match what appears in DT_PEOPLE_LISTING. The type must be the string value of the type (i.e. "Developer", "Designer", "Admin" or "Administration", "Intern", "Student Employee")</param>
 <param name="sPeopleListingColumn">The DT_PEOPLE_LISTING column to get information from. Defaults to "PLName", which is the web team member's full name.</param>
 <returns>The name of the web team member. Returns S_INVALID if no match is found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.ConvertWebTeamMemberToUsername(System.String)">
 <summary>
 Gets the Username of the provided web team member id.
 </summary>
 <param name="sWebTeam">The web team member's name/ID/email/username/type to retrieve. The full name must match what appears in DT_PEOPLE_LISTING. The type must be the string value of the type (i.e. "Developer", "Designer", "Admin" or "Administration", "Intern", "Student Employee")</param>
 <returns>The Username of the web team member. Returns S_INVALID if no match is found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetWebTeamMemberEmail(System.String)">
 <summary>
 Gets a web team member's email address if they are still an active web team member, otherwise an email is sent
 notifying current web team members that there is code referencing an inactive web team member.
 </summary>
 <param name="sWebTeam">The web team member's name/ID/email/username/type to retrieve. The full name must match what appears in DT_PEOPLE_LISTING. The type must be the string value of the type (i.e. "Developer", "Designer", "Admin" or "Administration", "Intern", "Student Employee")</param>
 <returns>The web team member's email address.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetWebTeamMemberUsername(System.String)">
 <summary>
 Gets a web team member's username if they are still an active web team member, otherwise an email is sent
 notifying current web team members that there is code referencing an inactive web team member.
 </summary>
 <param name="sWebTeam">The web team member's name/ID/email/username/type to retrieve. The full name must match what appears in DT_PEOPLE_LISTING. The type must be the string value of the type (i.e. "Developer", "Designer", "Admin" or "Administration", "Intern", "Student Employee")</param>
 <returns>The web team member's username.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetWebTeamMemberID(System.String,System.Boolean)">
 <summary>
 Return the web team member's ID number. Only matches active web team members. Returns N_NOT_FOUND (-14) if no match is found.
 </summary>
 <param name="sWebTeam">The web team member's name/ID/email/username/type to retrieve. The full name must match what appears in DT_PEOPLE_LISTING. The type must be the string value of the type (i.e. "Developer", "Designer", "Admin" or "Administration", "Intern", "Student Employee")</param>
 <param name="bAlwayReturnRelevantID">Always return an active web team member ID?</param>
 <returns>The web team member ID of the matching web team member.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetPrimaryDeveloperInfo">
 <summary>
 Gets the information for the primary web developer contact.
 </summary>
 <returns>The information for the primary web developer contact in a DataTable.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetPrimaryDeveloperInfo(System.String)">
 <summary>
 Gets a specific column for the primary web developer contact's information.
 </summary>
 <returns>The specific column information for the primary web developer contact in a DataTable.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetPrimaryDeveloperName">
 <summary>
 Gets the name of the primary web developer contact.
 </summary>
 <returns>The name of the primary web developer contact in a DataTable.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetPrimaryDeveloperEmail">
 <summary>
 Gets the email address of the primary web developer contact.
 </summary>
 <returns>The email address of the primary web developer contact in a DataTable.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetPrimaryDeveloperTitle">
 <summary>
 Gets the title of the primary web developer contact.
 </summary>
 <returns>The title of the primary web developer contact in a DataTable.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetPrimaryDeveloperPersonalEmail">
 <summary>
 Gets the personal email address of the primary web developer contact. Returns work email if personal is not found.
 </summary>
 <returns>The personal email address of the primary web developer contact in a DataTable. Returns work email if personal is not found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetPrimaryDeveloperPhone">
 <summary>
 Gets the phone number of the primary web developer contact. Formats the number within the function.
 </summary>
 <returns>The phone number of the primary web developer contact in a DataTable.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetPrimaryDesignerInfo">
 <summary>
 Gets the information for the primary web designer contact.
 </summary>
 <returns>The information for the primary web designer contact in a DataTable.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetPrimaryDesignerInfo(System.String)">
 <summary>
 Gets a specific column for the primary web designer contact's information.
 </summary>
 <returns>The specific column information for the primary web designer contact in a DataTable.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetPrimaryDesignerName">
 <summary>
 Gets the name of the primary web designer contact.
 </summary>
 <returns>The name of the primary web designer contact in a DataTable.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetPrimaryDesignerEmail">
 <summary>
 Gets the email address of the primary web designer contact.
 </summary>
 <returns>The email address of the primary web designer contact in a DataTable.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetPrimaryDesignerTitle">
 <summary>
 Gets the title of the primary web designer contact.
 </summary>
 <returns>The title of the primary web designer contact in a DataTable.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetPrimaryDesignerPersonalEmail">
 <summary>
 Gets the personal email address of the primary web designer contact. Returns work email if personal is not found.
 </summary>
 <returns>The personal email address of the primary web designer contact in a DataTable. Returns work email if personal is not found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetPrimaryDesignerPhone">
 <summary>
 Gets the phone number of the primary web designer contact. Formats the number within the function.
 </summary>
 <returns>The phone number of the primary web designer contact in a DataTable.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetPrimaryWebTeamAdminInfo">
 <summary>
 Gets the information for the primary web team admin contact.
 </summary>
 <returns>The information for the primary web team admin contact in a DataTable.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetPrimaryWebTeamAdminInfo(System.String)">
 <summary>
 Gets a specific column for the primary web team admin contact's information.
 </summary>
 <returns>The specific column information for the primary web team admin contact in a DataTable.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetPrimaryWebTeamAdminName">
 <summary>
 Gets the name of the primary web team admin contact.
 </summary>
 <returns>The name of the primary web team admin contact in a DataTable.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetPrimaryWebTeamAdminEmail">
 <summary>
 Gets the email address of the primary web team admin contact.
 </summary>
 <returns>The email address of the primary web team admin contact in a DataTable.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetPrimaryWebTeamAdminTitle">
 <summary>
 Gets the title of the primary web team admin contact.
 </summary>
 <returns>The title of the primary web team admin contact in a DataTable.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetPrimaryWebTeamAdminPersonalEmail">
 <summary>
 Gets the personal email address of the primary web team admin contact. Returns work email if personal is not found.
 </summary>
 <returns>The personal email address of the primary web team admin contact in a DataTable. Returns work email if personal is not found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetPrimaryWebTeamAdminPhone">
 <summary>
 Gets the phone number of the primary web team admin contact. Formats the number within the function.
 </summary>
 <returns>The phone number of the primary web team admin contact in a DataTable.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetPrimaryDeveloperID">
 <summary>
 Gets the web team ID for the primary developer contact.
 </summary>
 <returns>The web team ID for the primary developer contact.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetPrimaryDesignerID">
 <summary>
 Gets the web team ID for the primary designer contact.
 </summary>
 <returns>The web team ID for the primary designer contact.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetPrimaryWebTeamAdminID">
 <summary>
 Gets the web team ID for the primary web team admin contact.
 </summary>
 <returns>The web team ID for the primary web team admin contact.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetWebTeamMemberInfo(System.String)">
 <summary>
 Gets the information for the provided web team member in a DataTable. Includes PeopleListing columns.
 </summary>
 <param name="sWebTeam">The web team member's name/ID/email/username/type to retrieve. The full name must match what appears in DT_PEOPLE_LISTING. The type must be the string value of the type (i.e. "Developer", "Designer", "Admin" or "Administration", "Intern", "Student Employee")</param>
 <returns>The information for the provided web team member in a DataTable.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetWebTeamMemberInfo(System.String,System.String)">
 <summary>
 Gets the specific column information for the provided web team member.
 </summary>
 <param name="sWebTeam">The web team member's name/ID/email/username/type to retrieve. The full name must match what appears in DT_PEOPLE_LISTING. The type must be the string value of the type (i.e. "Developer", "Designer", "Admin" or "Administration", "Intern", "Student Employee")</param>
 <returns>The specific column information for the provided web team member.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.SetWebTeamMemberAssignedToProject(System.String)">
 <summary>
 Sets the web team member assigned to the current project.
 </summary>
 <param name="sWebTeam">The web team member to assign to the current project.</param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetWebTeamMemberAssignedToProjectUsername">
 <summary>
 Returns the username of the web team member assigned to the current project.
 </summary>
 <returns>The username of the web team member assigned to the current project. Returns S_EMPTY_VALUE if no value is found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetWebTeamMemberAssignedToProjectEmail">
 <summary>
 Returns the username of the web team member assigned to the current project.
 </summary>
 <returns>The username of the web team member assigned to the current project. Returns S_EMPTY_VALUE if no value is found.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.SetWebProjectRequestMinWeeksNonProgramming(System.Int32)">
 <summary>
 Sets the minimum number of weeks required for a non-programming web project request.
 </summary>
 <param name="nWeeks">The minimum number of weeks.</param>
 <returns>The minimum number of weeks.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.SetWebProjectRequestMinWeeksProgramming(System.Int32)">
 <summary>
 Sets the minimum number of weeks required for a programming web project request.
 </summary>
 <param name="nWeeks">The minimum number of weeks.</param>
 <returns>The minimum number of weeks.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.SetWebProjectRequestMaxWeeksNonProgramming(System.Int32)">
 <summary>
 Sets the maximum number of weeks required for a non-programming web project request.
 </summary>
 <param name="nWeeks">The maximum number of weeks.</param>
 <returns>The maximum number of weeks.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.SetWebProjectRequestMaxWeeksProgramming(System.Int32)">
 <summary>
 Sets the maximum number of weeks required for a programming web project request.
 </summary>
 <param name="nWeeks">The maximum number of weeks.</param>
 <returns>The maximum number of weeks.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.SetWebProjectRequestNonProgrammingApology(System.Int32)">
 <summary>
 Sets the number of weeks required for a non-programming web project request apology message to appear.
 </summary>
 <param name="nWeeks">The number of weeks.</param>
 <returns>The number of weeks.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.SetWebProjectRequestProgrammingApology(System.Int32)">
 <summary>
 Sets the number of weeks required for a programming web project request apology message to appear.
 </summary>
 <param name="nWeeks">The number of weeks.</param>
 <returns>The number of weeks.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetWebProjectRequestMinWeeksNonProgramming">
 <summary>
 Returns the minimum number of weeks required for a non-programming web project request.
 </summary>
 <returns>The minimum number of weeks required for a non-programming web project request.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetWebProjectRequestMaxWeeksNonProgramming">
 <summary>
 Returns the maximum number of weeks required for a non-programming web project request.
 </summary>
 <returns>The maximum number of weeks required for a non-programming web project request.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetWebProjectRequestMinWeeksProgramming">
 <summary>
 Returns the minimum number of weeks required for a programming web project request.
 </summary>
 <returns>The minimum number of weeks required for a programming web project request.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetWebProjectRequestMaxWeeksProgramming">
 <summary>
 Returns the maximum number of weeks required for a programming web project request.
 </summary>
 <returns>The maximum number of weeks required for a programming web project request.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetWebProjectRequestNonProgrammingApologyWeeks">
 <summary>
 Returns the number of weeks required for a non-programming web project request apology to appear.
 </summary>
 <returns>The number of weeks required for a non-programming web project request apology to appear</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.WebTeam.GetWebProjectRequestProgrammingApologyWeeks">
 <summary>
 Returns the number of weeks required for a programming web project request apology to appear.
 </summary>
 <returns>The number of weeks required for a programming web project request apology to appear</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Workflow.GetWorkflowLink(System.Int32,System.Int32,System.Boolean)">
 <summary>
 
 </summary>
 <param name="nWorkflowPosition"></param>
 <param name="nOriginatingPosition"></param>
 <param name="bBuildProcess"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Workflow.WorkflowStepCompleted(System.Int32,System.Int32,System.String)">
 <summary>
 
 </summary>
 <param name="nWorkflowProcessStepID"></param>
 <param name="nWorkflowStepType"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Workflow.SaveWorkflowProcessStepRequest(System.Int32,System.Int32,System.String,System.Int32,System.String)">
 <summary>
 
 </summary>
 <param name="nWorkflowProcessID"></param>
 <param name="nWorkflowStepID"></param>
 <param name="sUsername"></param>
 <param name="nRequestedWorkflowStepID"></param>
 <param name="sSupervisorEmail"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Workflow.GetWorkflowStepSupervisors(System.Int32)">
 <summary>
 
 </summary>
 <param name="nWorkflowStepID"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Workflow.CheckWorkflowFinished(System.Int32,System.Int32)">
 <summary>
 
 </summary>
 <param name="nWorkflowProcessID"></param>
 <param name="nWorkflowTypeStepID"></param>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Workflow.WorkFlowTypeSendsConclusionEmail(System.Int32)">
 <summary>
 
 </summary>
 <param name="nWorkflowTypeStepID"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Workflow.SaveWorkflowStep(System.Int32,System.Int32,System.String,System.String)">
 <summary>
 
 </summary>
 <param name="nWorkflowProcessID"></param>
 <param name="nCurrentID"></param>
 <param name="sWorkflowStepID"></param>
 <param name="sTableReference"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Workflow.GetWorkflowStepID">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Workflow.IsFirstWorkflowStep(System.Int32)">
 <summary>
 
 </summary>
 <param name="nWorkflowStep"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.Workflow.GetWorkflowProcessID(System.Int32)">
 <summary>
 
 </summary>
 <param name="nWorkflowStep"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.XML.ReadXmlFile(System.String)">
 <summary>
 Creates an XPathNavigator object for reading an xml file.
 </summary>
 <param name="sXmlFilePath">The path to the xml file to read. (i.e. FILE_PATH_WEB1 + "Students\ASWU\Forms\ShuttleControl\Global\ShuttleControlVariables.xml")</param>
 <returns>An XPathNavigator object with the xml file read into it.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.XML.GetElementNode(System.Xml.XPath.XPathNavigator,System.String,System.Int32)">
 <summary>
 Retrieves the value of an element node with the provided element name and index (1-based).
 </summary>
 <param name="xpn">The XPathNavigator object to search through.</param>
 <param name="sElement">The path to the element node to search for. (i.e. "root/element")</param>
 <param name="nIndex">The index of the element to retrieve.</param>
 <returns>The value of the element node at the provided location.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.XML.GetElementNodeAttribute(System.Xml.XPath.XPathNavigator,System.String,System.Int32,System.String)">
 <summary>
 Retrieves the value of an element node's attribute with the provided element name, attribute name and element index (1-based).
 </summary>
 <param name="xpn">The XPathNavigator object to search through.</param>
 <param name="sElement">The path to the element node to search for. (i.e. "root/element")</param>
 <param name="nIndex">The index of the element to retrieve.</param>
 <param name="sAttribute">The attribute to get a value for from the selected element node.</param>
 <returns>The value of the desired attribute.</returns>
 <remarks></remarks>
</member>
<member name="M:WhitTools.XML.GetElementNodeHasAttributes(System.Xml.XPath.XPathNavigator,System.String,System.Int32)">
 <summary>
 Returns if the desired element has attributes.
 </summary>
 <param name="xpn">The XPathNavigator object to search through.</param>
 <param name="sElement">The path to the element node to search for. (i.e. "root/element")</param>
 <param name="nIndex">The index of the element to retrieve.</param>
 <returns>Does the element have attributes?</returns>
 <remarks></remarks>
</member>
</members>
</doc>
